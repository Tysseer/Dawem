<View style={styles.toolButton}>
          <TouchableWithoutFeedback onPress={this.onEdit.bind(this)}>
            <Image
              source={require("../../assets/icons/edit.png")}
              style={{ width: "100%", height: "100%" }}
            />
          </TouchableWithoutFeedback>
        </View>
        <View style={styles.toolButton}>
          <TouchableWithoutFeedback onPress={this.onDelete.bind(this)}>
            <Image
              source={require("../../assets/icons/delete.png")}
              style={{ width: "100%", height: "100%" }}
            />
          </TouchableWithoutFeedback>
        </View>
		<View style={styles.toolButton}>
          <TouchableWithoutFeedback onPress={this.onDonate.bind(this)}>
            <Image
              source={require("../../assets/icons/donate.png")}
              style={{ width: "100%", height: "100%" }}
            />
          </TouchableWithoutFeedback>
        </View>
        <View style={styles.toolButton}>
          <TouchableWithoutFeedback onPress={this.onShare.bind(this)}>
            <Image
              source={require("../../assets/icons/share.png")}
              style={{ width: "100%", height: "100%" }}
            />
          </TouchableWithoutFeedback>
        </View>


            case REHYDRATE: {
      // convert revisions to array of Revision
      console.log("rehydrate");
      console.log(revisions);

      var newRevArr = new Array(revisions.length);
      for (var i = 0; i < revisions.length; i++) {
        newRevArr[i] = new Revision();
        newRevArr[i].fillFromObj(revisions[i]);
      }
      console.log(newRevArr);
      const newState = {
        bIsFirstRun: bIsFirstRun,
        bSkipWelcome: bSkipWelcome,
        strLang: strLang,
        revisions: newRevArr,
        curRevision: curRevision,
      };
      return newState;
    }

    import { REHYDRATE } from "redux-persist";
import Revision from "../helpers/Revision";


  getDayBadge(bIsDim) {
    if (bIsDim) {
      return (
        <Svg width="100%" height="100%" viewBox="-6 -6 342 342">
          <Circle
            fill="#D0CECE"
            stroke="#333333"
            fillRule="evenodd"
            strokeWidth="12"
            cx="165"
            cy="165"
            r="165"
          />
          <G transform="translate(-178 -119)" fillRule="evenodd">
            <Path
              fill="#333333"
              d="M335 150C335 145.582 338.582 142 343 142L343 142C347.418 142 351 145.582 351 150L351 179C351 183.418 347.418 187 343 187L343 187C338.582 187 335 183.418 335 179Z"
            />
            <Path
              fill="#333333"
              d="M208.5 293C203.806 293 200 289.194 200 284.5L200 284.5C200 279.806 203.806 276 208.5 276L236.5 276C241.194 276 245 279.806 245 284.5L245 284.5C245 289.194 241.194 293 236.5 293Z"
            />
            <Path
              fill="#333333"
              d="M262.601 165.772 268.882 161.766 277.463 175.219 271.182 179.226Z"
            />
            <Path
              fill="#333333"
              d="M214.069 228.903 216.4 221.827 231.556 226.82 229.225 233.896Z"
            />
            <Rect
              fill="#333333"
              x="0"
              y="0"
              width="7.45008"
              height="15.9574"
              transform="matrix(-0.84309 -0.537773 -0.537773 0.84309 425.756 165.772)"
            />
            <Rect
              fill="#333333"
              x="0"
              y="0"
              width="7.45008"
              height="15.9574"
              transform="matrix(-0.405611 -0.914046 -0.914046 0.405611 475.909 225.299)"
            />
            <Path
              fill="#333333"
              d="M451.5 293C446.806 293 443 289.194 443 284.5L443 284.5C443 279.806 446.806 276 451.5 276L479.5 276C484.194 276 488 279.806 488 284.5L488 284.5C488 289.194 484.194 293 479.5 293Z"
            />
            <Path
              fill="#333333"
              d="M343 395C343 390.582 346.582 387 351 387L351 387C355.418 387 359 390.582 359 395L359 424C359 428.418 355.418 432 351 432L351 432C346.582 432 343 428.418 343 424Z"
            />
            <Rect
              fill="#333333"
              x="0"
              y="0"
              width="7.45008"
              height="15.9574"
              transform="matrix(0.84309 0.537773 0.537773 -0.84309 261.43 407.804)"
            />
            <Rect
              fill="#333333"
              x="0"
              y="0"
              width="7.45008"
              height="15.9574"
              transform="matrix(0.312906 0.949784 0.949784 -0.312906 214.85 347.015)"
            />
            <Path
              fill="#333333"
              d="M441.756 397.268 435.475 401.274 426.894 387.821 433.175 383.814Z"
            />
            <Path
              fill="#333F50"
              stroke="#767171"
              strokeWidth="11"
              d="M332.5 353.5C332.5 343.559 340.559 335.5 350.5 335.5L483.5 335.5C493.441 335.5 501.5 343.559 501.5 353.5L501.5 425.5C501.5 435.441 493.441 443.5 483.5 443.5L350.5 443.5C340.559 443.5 332.5 435.441 332.5 425.5Z"
            />
            <Path
              fill="#767171"
              d="M0 0 119.457 0 93.1918 16.5268 16.6147 16.5268 16.6147 64.7117 0 75.1663Z"
              transform="matrix(0.520202 -0.854043 -0.854043 -0.520202 344.195 302.049)"
            />
            <G transform="translate(340 445) rotate(-135)  scale(0.32)">
              <Path
                fill="#939393"
                d="M0 200 v-200 h200 
                            a100,100 90 0,1 0,200
                            a100,100 90 0,1 -200,0
                            z"
              />
            </G>
            <Text
              fill="#FFFFFF"
              // fontFamily="Segoe UI,Segoe UI_MSFontService,sans-serif"
              fontWeight="900"
              fontSize="53"
              transform="translate(405.802 410)"
            >
              24
            </Text>
          </G>
        </Svg>
      );
    } else {
      return (
        <Svg width="100%" height="100%" viewBox="-6 -6 342 342">
          <Circle
            stroke="#333333"
            fill="#E1FCFF"
            fillRule="evenodd"
            strokeWidth="12"
            cx="165"
            cy="165"
            r="165"
          />
          <G transform="translate(-178 -119)" fillRule="evenodd">
            <Path
              fill="#333333"
              d="M335 150C335 145.582 338.582 142 343 142L343 142C347.418 142 351 145.582 351 150L351 179C351 183.418 347.418 187 343 187L343 187C338.582 187 335 183.418 335 179Z"
            />
            <Path
              fill="#333333"
              d="M208.5 293C203.806 293 200 289.194 200 284.5L200 284.5C200 279.806 203.806 276 208.5 276L236.5 276C241.194 276 245 279.806 245 284.5L245 284.5C245 289.194 241.194 293 236.5 293Z"
            />
            <Path
              fill="#333333"
              d="M262.601 165.772 268.882 161.766 277.463 175.219 271.182 179.226Z"
            />
            <Path
              fill="#333333"
              d="M214.069 228.903 216.4 221.827 231.556 226.82 229.225 233.896Z"
            />
            <Rect
              fill="#333333"
              x="0"
              y="0"
              width="7.45008"
              height="15.9574"
              transform="matrix(-0.84309 -0.537773 -0.537773 0.84309 425.756 165.772)"
            />
            <Rect
              fill="#333333"
              x="0"
              y="0"
              width="7.45008"
              height="15.9574"
              transform="matrix(-0.405611 -0.914046 -0.914046 0.405611 475.909 225.299)"
            />
            <Path
              fill="#333333"
              d="M451.5 293C446.806 293 443 289.194 443 284.5L443 284.5C443 279.806 446.806 276 451.5 276L479.5 276C484.194 276 488 279.806 488 284.5L488 284.5C488 289.194 484.194 293 479.5 293Z"
            />
            <Path
              fill="#333333"
              d="M343 395C343 390.582 346.582 387 351 387L351 387C355.418 387 359 390.582 359 395L359 424C359 428.418 355.418 432 351 432L351 432C346.582 432 343 428.418 343 424Z"
            />
            <Rect
              fill="#333333"
              x="0"
              y="0"
              width="7.45008"
              height="15.9574"
              transform="matrix(0.84309 0.537773 0.537773 -0.84309 261.43 407.804)"
            />
            <Rect
              fill="#333333"
              x="0"
              y="0"
              width="7.45008"
              height="15.9574"
              transform="matrix(0.312906 0.949784 0.949784 -0.312906 214.85 347.015)"
            />
            <Path
              fill="#333333"
              d="M441.756 397.268 435.475 401.274 426.894 387.821 433.175 383.814Z"
            />
            <Path
              fill="#2F90B2"
              stroke="#50AED0"
              strokeWidth="11"
              d="M332.5 353.5C332.5 343.559 340.559 335.5 350.5 335.5L483.5 335.5C493.441 335.5 501.5 343.559 501.5 353.5L501.5 425.5C501.5 435.441 493.441 443.5 483.5 443.5L350.5 443.5C340.559 443.5 332.5 435.441 332.5 425.5Z"
            />
            <Path
              fill="#2F90B2"
              d="M0 0 119.457 0 93.1918 16.5268 16.6147 16.5268 16.6147 64.7117 0 75.1663Z"
              transform="matrix(0.520202 -0.854043 -0.854043 -0.520202 344.195 302.049)"
            />
            <G transform="translate(340 445) rotate(-135)  scale(0.32)">
              <Path
                fill="#FF0000"
                d="M0 200 v-200 h200 
                        a100,100 90 0,1 0,200
                        a100,100 90 0,1 -200,0
                        z"
              />
            </G>
            <Text
              fill="#FFFFFF"
              // fontFamily="Segoe UI,Segoe UI_MSFontService,sans-serif"
              fontWeight="900"
              fontSize="53"
              transform="translate(405.802 410)"
            >
              24
            </Text>
          </G>
        </Svg>
      );
    }
  }

  getMonthBadge(bIsDim) {
    if (bIsDim) {
      return (
        <Svg width="100%" height="100%" viewBox="-6 -6 342 342">
          <Circle
            fill="#D0CECE"
            stroke="#333333"
            fillRule="evenodd"
            strokeWidth="12"
            cx="165"
            cy="165"
            r="165"
          />
          <G transform="translate(-99 -35)">
            <Path
              fill="#DACFCB"
              stroke="#000000"
              strokeWidth="8"
              fillRule="evenodd"
              d="M165 113.016C165 104.17 172.17 97 181.016 97L345.984 97C354.829 97 362 104.17 362 113.016L362 250.984C362 259.83 354.829 267 345.984 267L181.016 267C172.17 267 165 259.83 165 250.984Z"
            />
            <Path
              fill="#877065"
              stroke="#877065"
              strokeWidth="8"
              fillRule="evenodd"
              d="M178.117 97 348.883 97C356.127 97 362 102.873 362 110.117L362 146 165 146 165 110.117C165 102.873 170.873 97 178.117 97Z"
            />
            <Path
              fill="#000000"
              stroke="#FFFFFF"
              strokeWidth="4"
              fillRule="evenodd"
              d="M199 77.5376C199 72.8224 202.822 69 207.538 69L219.462 69C224.178 69 228 72.8224 228 77.5376L228 108.462C228 113.178 224.178 117 219.462 117L207.538 117C202.822 117 199 113.178 199 108.462Z"
            />
            <Path
              fill="#000000"
              stroke="#FFFFFF"
              strokeWidth="4"
              fillRule="evenodd"
              d="M298 77.5376C298 72.8224 301.822 69 306.538 69L318.462 69C323.178 69 327 72.8224 327 77.5376L327 108.462C327 113.178 323.178 117 318.462 117L306.538 117C301.822 117 298 113.178 298 108.462Z"
            />
            <G transform="translate(260 350) rotate(-135)  scale(0.36)">
              <Path
                fill="#939393"
                d="M0 200 v-200 h200 
                    a100,100 90 0,1 0,200
                    a100,100 90 0,1 -200,0
                    z"
              />
            </G>
            <Text
              fill="#757171"
              // fontFamily="Segoe UI,Segoe UI_MSFontService,sans-serif"
              fontWeight="900"
              fontSize="88"
              transform="translate(210.837 226)"
            >
              30
            </Text>
          </G>
        </Svg>
      );
    } else {
      return (
        <Svg width="100%" height="100%" viewBox="-6 -6 342 342">
          <Circle
            stroke="#333333"
            fill="#E1FCFF"
            fillRule="evenodd"
            strokeWidth="12"
            cx="165"
            cy="165"
            r="165"
          />
          <G transform="translate(-99 -35)">
            <Path
              fill="#FFFFFF"
              stroke="#000000"
              strokeWidth="8"
              fillRule="evenodd"
              d="M165 113.016C165 104.17 172.17 97 181.016 97L345.984 97C354.829 97 362 104.17 362 113.016L362 250.984C362 259.83 354.829 267 345.984 267L181.016 267C172.17 267 165 259.83 165 250.984Z"
            />
            <Path
              fill="#DD4400"
              stroke="#DD4400"
              strokeWidth="8"
              fillRule="evenodd"
              d="M178.117 97 348.883 97C356.127 97 362 102.873 362 110.117L362 146 165 146 165 110.117C165 102.873 170.873 97 178.117 97Z"
            />
            <Path
              fill="#000000"
              stroke="#FFFFFF"
              strokeWidth="4"
              fillRule="evenodd"
              d="M199 77.5376C199 72.8224 202.822 69 207.538 69L219.462 69C224.178 69 228 72.8224 228 77.5376L228 108.462C228 113.178 224.178 117 219.462 117L207.538 117C202.822 117 199 113.178 199 108.462Z"
            />
            <Path
              fill="#000000"
              stroke="#FFFFFF"
              strokeWidth="4"
              fillRule="evenodd"
              d="M298 77.5376C298 72.8224 301.822 69 306.538 69L318.462 69C323.178 69 327 72.8224 327 77.5376L327 108.462C327 113.178 323.178 117 318.462 117L306.538 117C301.822 117 298 113.178 298 108.462Z"
            />
            <G transform="translate(260 350) rotate(-135)  scale(0.36)">
              <Path
                fill="#FF0000"
                d="M0 200 v-200 h200 
                a100,100 90 0,1 0,200
                a100,100 90 0,1 -200,0
                z"
              />
            </G>
            <Text
              fill="#1F1F1F"
              // fontFamily="Segoe UI,Segoe UI_MSFontService,sans-serif"
              fontWeight="900"
              fontSize="88"
              transform="translate(210.837 226)"
            >
              30
            </Text>
          </G>
        </Svg>
      );
    }
  }

  getWeekBadge(bIsDim) {
    if (bIsDim) {
      return (
        <Svg width="100%" height="100%" viewBox="-6 -6 342 342">
          <Circle
            fill="#D0CECE"
            stroke="#333333"
            fillRule="evenodd"
            strokeWidth="12"
            cx="165"
            cy="165"
            r="165"
          />
          <Image
            x="8%"
            y="3%"
            width="88%"
            height="88%"
            href={require("../../assets/images/trophy_dim.png")}
          />
          <G transform="translate(-99 -35)">
            <G transform="translate(250 355) rotate(-135)  scale(0.35)">
              <Path
                fill="#939393"
                d="M0 200 v-200 h200 
               a100,100 90 0,1 0,200
               a100,100 90 0,1 -200,0
               z"
              />
            </G>
          </G>
        </Svg>
      );
    } else {
      return (
        <Svg width="100%" height="100%" viewBox="-6 -6 342 342">
          <Circle
            stroke="#333333"
            fill="#E1FCFF"
            fillRule="evenodd"
            strokeWidth="12"
            cx="165"
            cy="165"
            r="165"
          />
          <Image
            x="8%"
            y="3%"
            width="88%"
            height="88%"
            href={require("../../assets/images/trophy.png")}
          />

          <G transform="translate(-99 -35)">
            <G transform="translate(250 355) rotate(-135)  scale(0.35)">
              <Path
                fill="#FF0000"
                d="M0 200 v-200 h200 
               a100,100 90 0,1 0,200
               a100,100 90 0,1 -200,0
               z"
              />
            </G>
          </G>
        </Svg>
      );
    }
  }


import React, { Component } from "react";
import { connect } from "react-redux";
import {
  Text,
  StyleSheet,
  View,
  Image,
  TouchableWithoutFeedback,
  I18nManager,
} from "react-native";
import * as strings from "../helpers/StringsManager";
import StringsManager from "../helpers/StringsManager";
import * as Updates from "expo-updates";
import ActionBtn from "../../components/ActionBtn";
import { MaterialIcons } from "@expo/vector-icons";

import {
  reduxActionSetLanguage,
  reduxActionSetFirstRunFlag,
} from "../redux/reduxActions";

class ScreenLanguage extends Component {
  constructor(props) {
    super(props);
    this.stringsManager = new StringsManager();
    this.stringsManager.setLanguage(this.props.strLang);
  }

  arLangPressed() {
    this.props.reduxActionSetLanguage("ar");
    // I18nManager.forceRTL(true);
    // Updates.reloadAsync();
  }
  enLangPressed() {
    this.props.reduxActionSetLanguage("en");
    // I18nManager.forceRTL(false);
    // Updates.reloadAsync();
  }
  okButtonPressed() {
    this.props.reduxActionSetFirstRunFlag(false);
    if (this.props.strLang == "ar") {
      I18nManager.forceRTL(true);
    } else {
      I18nManager.forceRTL(false);
    }
    Updates.reloadAsync();
    // if (this.props.isSkipWelcome == false)
    //   this.props.navigation.navigate("ScrWelcome");
    // else this.props.navigation.navigate("ScrList");
  }
  render() {
    this.stringsManager.setLanguage(this.props.strLang);
    return (
      <View style={styles.mainContainer}>
        <View style={styles.quranLogoContainer}>
          <Image
            source={require("assets/images/Quran_logo.png")}
            style={{ resizeMode: "contain" }}
          />
        </View>
        <View style={styles.allLangsContainer}>
          <TouchableWithoutFeedback onPress={this.enLangPressed.bind(this)}>
            <View style={this.getLangContainerStyle("en")}>
              <Image
                source={require("assets/images/lang_en.png")}
                style={styles.langLogo}
              />
              <Text style={this.getlangLabelTextStyle("en")}>English</Text>
            </View>
          </TouchableWithoutFeedback>
          <View style={styles.separator}></View>
          <TouchableWithoutFeedback onPress={this.arLangPressed.bind(this)}>
            <View style={this.getLangContainerStyle("ar")}>
              <Image
                source={require("../../assets/images/lang_ar.png")}
                style={styles.langLogo}
              />
              <Text style={this.getlangLabelTextStyle("ar")}>العربية</Text>
            </View>
          </TouchableWithoutFeedback>
        </View>
        <ActionBtn
          text={this.stringsManager.getStr(strings.STR_SEL_LANGUAGE)}
          handler={this.okButtonPressed.bind(this)}
          lang={this.props.strLang}
          style={{ height: 60, width: "93%" }}
        />
      </View>
    );
  }

  renderOKButton(nStrID, pressHandler) {
    var styleContainer = {
      flex: 1,
      justifyContent: "flex-end",
      marginBottom: 5,
      width: "100%",
      alignItems: "center",
    };
    var styleOKButton = {
      backgroundColor: "#0B721E",
      alignItems: "center",
      justifyContent: "center",
      width: "93%",
      height: 70,
      borderTopLeftRadius: 10,
      borderTopRightRadius: 10,
      borderBottomLeftRadius: 10,
      borderBottomRightRadius: 10,
      marginTop: 50,
      marginBottom: 25,
    };
    var styleOkButtonTxt = {
      textAlign: "center",
      color: "#FFFFFF",
      fontFamily: this.props.strLang == "ar" ? "Amiri" : "Poppins",
      justifyContent: "center",
      fontSize: this.props.strLang == "ar" ? 22 : 20,
      lineHeight: 35,
      fontWeight: "600",
    };
    return (
      <TouchableWithoutFeedback onPress={this.okButtonPressed.bind(this)}>
        <View style={styleContainer}>
          <View style={styleOKButton}>
            <View>
              <Text style={styleOkButtonTxt}>
                {this.stringsManager.getStr(nStrID)}
              </Text>
            </View>
          </View>
        </View>
      </TouchableWithoutFeedback>
    );
  }

  getLangContainerStyle(strLang) {
    return [
      styles.langContainer,
      this.props.strLang == strLang
        ? { borderColor: "#00AB14" }
        : { borderColor: "#00AB1400" },
    ];
  }

  getlangButtonTextStyle() {
    return {
      textAlign: "center",
      color: "#FFFFFF",
      fontFamily: this.props.strLang == "ar" ? "Amiri" : "Poppins",
      justifyContent: "center",
      fontSize: this.props.strLang == "ar" ? 22 : 20,
      lineHeight: 35,
      fontWeight: "600",
    };
  }
  getlangLabelTextStyle(strLang) {
    return {
      fontSize: strLang == "ar" ? 22 : 18,
      lineHeight: 35,

      fontFamily: strLang == "ar" ? "Amiri" : "Poppins",
      textAlign: "left",
      color: "#0C3D11",
    };
  }
}
const mapStateToProps = (state) => ({
  isSkipWelcome: state.bSkipWelcome,
  strLang: state.strLang,
});
const mapDispatchToProps = () => {
  return {
    reduxActionSetFirstRunFlag,
    reduxActionSetLanguage,
  };
};
export default connect(mapStateToProps, mapDispatchToProps())(ScreenLanguage);
const styles = StyleSheet.create({
  mainContainer: {
    flex: 1,
    justifyContent: "space-evenly",
    alignItems: "center",
    backgroundColor: "#EEEEEE",
  },
  quranLogoContainer: {
    alignItems: "center",
    justifyContent: "center",

    height: "42%",
    width: "100%",
  },
  allLangsContainer: {
    width: "100%",
    height: 200,
    alignItems: "center",
    justifyContent: "center",
  },
  langContainer: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "flex-start",
    width: "93%",
    height: 70,
    borderTopLeftRadius: 10,
    borderTopRightRadius: 10,
    borderBottomLeftRadius: 10,
    borderBottomRightRadius: 10,
    borderWidth: 2,

    borderColor: "#0B721EFF",
  },
  langLogo: {
    width: 40,
    height: 40,
    marginRight: 30,
  },

  separator: {
    borderColor: "#88888859",
    borderWidth: 1,
    borderTopLeftRadius: 10,
    borderTopRightRadius: 10,
    borderBottomLeftRadius: 10,
    borderBottomRightRadius: 10,
    height: 2,
    width: "93%",
    marginVertical: 15,
  },
  okButton: {
    backgroundColor: "#0B721E",
    alignItems: "center",
    justifyContent: "center",
    width: "93%",
    height: 70,
    borderTopLeftRadius: 10,
    borderTopRightRadius: 10,
    borderBottomLeftRadius: 10,
    borderBottomRightRadius: 10,
    marginTop: 50,
    marginBottom: 25,
  },
});


 for (var iTok = 0; iTok < tokens.length; iTok++) {
      var tokClass = this.classifyToken(tokens[iTok]);
      console.log(tokClass);
      if (
        tokClass.tokType == tokenTypes.ignore ||
        tokClass.tokType == tokenTypes.unkown
      )
        continue;
      tokensClassified.push(tokClass);

      if (
        tokClass.tokType == tokenTypes.juzuuID ||
        tokClass.tokType == tokenTypes.surahID ||
        tokClass.tokType == tokenTypes.number
      ) {
        if (tokClass.tokType == tokenTypes.number) {
          if (importantTokens.length > 1) {
            //there are prev tokens, try to use them to know what the number represents
            var prev = importantTokens[importantTokens.length - 1]; // todo: this should search backwards until another important token is found
            if (prev.tokType == tokenTypes.pageWord) {
              tokClass.tokType = tokenTypes.pageID;
            }
            if (prev.tokType == tokenTypes.surahWord) {
              tokClass.tokType = tokenTypes.surahID;
            }
            if (prev.tokType == tokenTypes.juzuuWord) {
              tokClass.tokType = tokenTypes.juzuuID;
            }
            if (prev.tokType == tokenTypes.ayahWord) {
              tokClass.tokType = tokenTypes.ayahID;
            }
          }
        }

        if (tokClass.tokType == tokenTypes.ayahID) {
          // add this as a child to prevtokens if possible
          if (importantTokens.length > 1) {
            importantTokens[importantTokens.length - 1].child = tokClass; // todo: must search for surahID or juzuuID
            continue;
          }
        }
        importantTokens.push(tokClass);
      }
    }

    if (importantTokens.length == 1) {
      var ret = this.getLocation(importantTokens[0]);
      console.log(ret);
      return ret;
    }
    if (importantTokens.length == 2) {
      return this.getCombinedLocation(importantTokens[0], importantTokens[1]);
    }



     var bIsEnglish = /[a-z]/.test(str);
    var to = bIsEnglish ? "to" : "حتي";
    var text = str.replace(/[\t\r\n']/g, " ").toLowerCase();

    text = text.replace(/[-؟؛٠,،;:_]/g, " " + to + " ").toLowerCase();

    text = text.replace(/(\d+)/g, " $1 "); // make sure numbers have spaces around them

    //remove special characters & tashkeel
    text = text.replace(/([^\u0621-\u063A\u0641-\u064A\u0660-\u0669])/g, "");

    //normalize Arabic
    text = text.replace(/(آ|إ|أ)/g, "ا");

    text = text.replace(/(ة)/g, "ه");

    text = text.replace(/(ئ|ؤ)/g, "ء");

    text = text.replace(/(ى)/g, "ي");
    text = text.replace(/(ـ)/g, "ي");

    if (text.startsWith("ال")) {
      if (text.length >= 3) text = text.substring(2);
      else return "";
    }

    var ret = MiscUtilities.convertToArabicNumbers(text);

    return ret;