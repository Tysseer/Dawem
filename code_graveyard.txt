<View style={styles.toolButton}>
          <TouchableWithoutFeedback onPress={this.onEdit.bind(this)}>
            <Image
              source={require("../../assets/icons/edit.png")}
              style={{ width: "100%", height: "100%" }}
            />
          </TouchableWithoutFeedback>
        </View>
        <View style={styles.toolButton}>
          <TouchableWithoutFeedback onPress={this.onDelete.bind(this)}>
            <Image
              source={require("../../assets/icons/delete.png")}
              style={{ width: "100%", height: "100%" }}
            />
          </TouchableWithoutFeedback>
        </View>
		<View style={styles.toolButton}>
          <TouchableWithoutFeedback onPress={this.onDonate.bind(this)}>
            <Image
              source={require("../../assets/icons/donate.png")}
              style={{ width: "100%", height: "100%" }}
            />
          </TouchableWithoutFeedback>
        </View>
        <View style={styles.toolButton}>
          <TouchableWithoutFeedback onPress={this.onShare.bind(this)}>
            <Image
              source={require("../../assets/icons/share.png")}
              style={{ width: "100%", height: "100%" }}
            />
          </TouchableWithoutFeedback>
        </View>


            case REHYDRATE: {
      // convert revisions to array of Revision
      console.log("rehydrate");
      console.log(revisions);

      var newRevArr = new Array(revisions.length);
      for (var i = 0; i < revisions.length; i++) {
        newRevArr[i] = new Revision();
        newRevArr[i].fillFromObj(revisions[i]);
      }
      console.log(newRevArr);
      const newState = {
        bIsFirstRun: bIsFirstRun,
        bSkipWelcome: bSkipWelcome,
        strLang: strLang,
        revisions: newRevArr,
        curRevision: curRevision,
      };
      return newState;
    }

    import { REHYDRATE } from "redux-persist";
import Revision from "../helpers/Revision";