{"ast":null,"code":"import { useEffect } from 'react';\nimport ExpoKeepAwake from \"./ExpoKeepAwake\";\nvar ExpoKeepAwakeTag = 'ExpoKeepAwakeDefaultTag';\nexport function useKeepAwake() {\n  var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ExpoKeepAwakeTag;\n  useEffect(function () {\n    activateKeepAwake(tag);\n    return function () {\n      return deactivateKeepAwake(tag);\n    };\n  }, [tag]);\n}\nexport function activateKeepAwake() {\n  var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ExpoKeepAwakeTag;\n  if (ExpoKeepAwake.activate) ExpoKeepAwake.activate(tag);\n}\nexport function deactivateKeepAwake() {\n  var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ExpoKeepAwakeTag;\n  if (ExpoKeepAwake.deactivate) ExpoKeepAwake.deactivate(tag);\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AAEjC,OAAOC,aAAa;AAEpB,IAAMC,gBAAgB,GAAG,yBAAyB;AAUlD,OAAM,SAAUC,YAAY,GAA+B;EAAA,IAA9BC,0EAAcF,gBAAgB;EACzDF,SAAS,CAAC,YAAK;IACbK,iBAAiB,CAACD,GAAG,CAAC;IACtB,OAAO;MAAA,OAAME,mBAAmB,CAACF,GAAG,CAAC;IAAA;EACvC,CAAC,EAAE,CAACA,GAAG,CAAC,CAAC;AACX;AAYA,OAAM,SAAUC,iBAAiB,GAA+B;EAAA,IAA9BD,0EAAcF,gBAAgB;EAC9D,IAAID,aAAa,CAACM,QAAQ,EAAEN,aAAa,CAACM,QAAQ,CAACH,GAAG,CAAC;AACzD;AASA,OAAM,SAAUE,mBAAmB,GAA+B;EAAA,IAA9BF,0EAAcF,gBAAgB;EAChE,IAAID,aAAa,CAACO,UAAU,EAAEP,aAAa,CAACO,UAAU,CAACJ,GAAG,CAAC;AAC7D","names":["useEffect","ExpoKeepAwake","ExpoKeepAwakeTag","useKeepAwake","tag","activateKeepAwake","deactivateKeepAwake","activate","deactivate"],"sourceRoot":"","sources":["../src/index.ts"],"sourcesContent":["import { useEffect } from 'react';\n\nimport ExpoKeepAwake from './ExpoKeepAwake';\n\nconst ExpoKeepAwakeTag = 'ExpoKeepAwakeDefaultTag';\n\n// @needsAudit\n/**\n * A React hook to keep the screen awake for as long as the owner component is mounted.\n * The optionally provided `tag` argument is used when activating and deactivating the keep-awake\n * feature. If unspecified, the default `tag` is used. See the documentation for `activateKeepAwake`\n * below to learn more about the `tag` argument.\n * @param tag *Optional*\n */\nexport function useKeepAwake(tag: string = ExpoKeepAwakeTag): void {\n  useEffect(() => {\n    activateKeepAwake(tag);\n    return () => deactivateKeepAwake(tag);\n  }, [tag]);\n}\n\n// @needsAudit\n/**\n * Prevents the screen from sleeping until `deactivateKeepAwake` is called with the same `tag` value.\n *\n * If the `tag` argument is specified, the screen will not sleep until you call `deactivateKeepAwake`\n * with the same `tag` argument. When using multiple `tags` for activation you'll have to deactivate\n * each one in order to re-enable screen sleep. If tag is unspecified, the default `tag` is used.\n * @param tag *Optional* - Tag to lock screen sleep prevention. If not provided, the default tag is used.\n */\n\nexport function activateKeepAwake(tag: string = ExpoKeepAwakeTag): void {\n  if (ExpoKeepAwake.activate) ExpoKeepAwake.activate(tag);\n}\n\n// @needsAudit\n/**\n * Releases the lock on screen-sleep prevention associated with the given `tag` value. If `tag`\n * is unspecified, it defaults to the same default tag that `activateKeepAwake` uses.\n * @param tag *Optional* - Tag to release the lock on screen sleep prevention. If not provided,\n * the default tag is used.\n */\nexport function deactivateKeepAwake(tag: string = ExpoKeepAwakeTag): void {\n  if (ExpoKeepAwake.deactivate) ExpoKeepAwake.deactivate(tag);\n}\n"]},"metadata":{},"sourceType":"module"}