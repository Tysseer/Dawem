{"ast":null,"code":"import { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport ScreenWelcome from \"../../js/screens/ScreenWelcome\";\nimport ScreenLanguage from \"../../js/screens/ScreenLanguage\";\nimport reduxStore from \"../../js/redux/reduxStore\";\nimport BottomNav from \"../BottomTabs\";\nimport Header from \"../../components/Header\";\nimport { useSelector } from 'react-redux';\nimport StringsManager from \"../../js/helpers/StringsManager\";\nimport * as strings from \"../../js/helpers/StringsManager\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nexport default function RootNavigator() {\n  var stringsManager = new StringsManager();\n  var strLang = useSelector(function (state) {\n    return state.strLang;\n  });\n  stringsManager.setLanguage(strLang);\n  return _jsxs(Stack.Navigator, {\n    screenOptions: {\n      headerShown: false\n    },\n    children: [reduxStore.getState().bIsFirstRun ? _jsx(Stack.Screen, {\n      name: \"ScrLang\",\n      component: ScreenLanguage,\n      options: {\n        headerShown: true,\n        header: function header() {\n          return _jsx(Header, {\n            empty: true\n          });\n        }\n      }\n    }) : null, reduxStore.getState().bSkipWelcome == false ? _jsx(Stack.Screen, {\n      name: \"ScrWelcome\",\n      component: ScreenWelcome,\n      options: {\n        headerShown: true,\n        header: function header() {\n          return _jsx(Header, {\n            lang: {\n              strLang: strLang\n            },\n            title: stringsManager.getStr(strings.STR_WELCOME),\n            showIcon: false\n          });\n        }\n      }\n    }) : null, _jsx(Stack.Screen, {\n      name: \"Home\",\n      component: BottomNav\n    })]\n  });\n}","map":{"version":3,"names":["createNativeStackNavigator","ScreenWelcome","ScreenLanguage","reduxStore","BottomNav","Header","useSelector","StringsManager","strings","Stack","RootNavigator","stringsManager","strLang","state","setLanguage","headerShown","getState","bIsFirstRun","header","bSkipWelcome","getStr","STR_WELCOME"],"sources":["C:/Users/Tysseer Harak/Desktop/Data/Code/React Native/Dawem/app/navigation/Stack/index.js"],"sourcesContent":["import { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport ScreenWelcome from 'app/js/screens/ScreenWelcome';\r\nimport ScreenLanguage from 'app/js/screens/ScreenLanguage';\r\nimport reduxStore from 'app/js/redux/reduxStore';\r\nimport BottomNav from '../BottomTabs';\r\nimport Header from 'app/components/Header';\r\nimport { useSelector } from 'react-redux';\r\nimport StringsManager from 'js/helpers/StringsManager';\r\nimport * as strings from 'js/helpers/StringsManager';\r\n\r\nconst Stack = createNativeStackNavigator();\r\n\r\nexport default function RootNavigator() {\r\n  let stringsManager = new StringsManager();\r\n  const strLang = useSelector((state) => state.strLang);\r\n  stringsManager.setLanguage(strLang);\r\n  return (\r\n    <Stack.Navigator\r\n      screenOptions={{\r\n        headerShown: false,\r\n      }}\r\n    >\r\n      {reduxStore.getState().bIsFirstRun ? (\r\n        <Stack.Screen\r\n          name=\"ScrLang\"\r\n          component={ScreenLanguage}\r\n          options={{\r\n            headerShown: true,\r\n            header: () => <Header empty={true} />,\r\n          }}\r\n        />\r\n      ) : null}\r\n      {reduxStore.getState().bSkipWelcome == false ? (\r\n        <Stack.Screen\r\n          name=\"ScrWelcome\"\r\n          component={ScreenWelcome}\r\n          options={{\r\n            headerShown: true,\r\n            header: () => (\r\n              <Header\r\n                lang={{ strLang }}\r\n                title={stringsManager.getStr(strings.STR_WELCOME)}\r\n                showIcon={false}\r\n              />\r\n            ),\r\n          }}\r\n        />\r\n      ) : null}\r\n      <Stack.Screen name=\"Home\" component={BottomNav} />\r\n    </Stack.Navigator>\r\n  );\r\n}\r\n"],"mappings":"AAAA,SAASA,0BAA0B,QAAQ,gCAAgC;AAC3E,OAAOC,aAAa;AACpB,OAAOC,cAAc;AACrB,OAAOC,UAAU;AACjB,OAAOC,SAAS;AAChB,OAAOC,MAAM;AACb,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,cAAc;AACrB,OAAO,KAAKC,OAAO;AAAkC;AAAA;AAErD,IAAMC,KAAK,GAAGT,0BAA0B,EAAE;AAE1C,eAAe,SAASU,aAAa,GAAG;EACtC,IAAIC,cAAc,GAAG,IAAIJ,cAAc,EAAE;EACzC,IAAMK,OAAO,GAAGN,WAAW,CAAC,UAACO,KAAK;IAAA,OAAKA,KAAK,CAACD,OAAO;EAAA,EAAC;EACrDD,cAAc,CAACG,WAAW,CAACF,OAAO,CAAC;EACnC,OACE,MAAC,KAAK,CAAC,SAAS;IACd,aAAa,EAAE;MACbG,WAAW,EAAE;IACf,CAAE;IAAA,WAEDZ,UAAU,CAACa,QAAQ,EAAE,CAACC,WAAW,GAChC,KAAC,KAAK,CAAC,MAAM;MACX,IAAI,EAAC,SAAS;MACd,SAAS,EAAEf,cAAe;MAC1B,OAAO,EAAE;QACPa,WAAW,EAAE,IAAI;QACjBG,MAAM,EAAE;UAAA,OAAM,KAAC,MAAM;YAAC,KAAK,EAAE;UAAK,EAAG;QAAA;MACvC;IAAE,EACF,GACA,IAAI,EACPf,UAAU,CAACa,QAAQ,EAAE,CAACG,YAAY,IAAI,KAAK,GAC1C,KAAC,KAAK,CAAC,MAAM;MACX,IAAI,EAAC,YAAY;MACjB,SAAS,EAAElB,aAAc;MACzB,OAAO,EAAE;QACPc,WAAW,EAAE,IAAI;QACjBG,MAAM,EAAE;UAAA,OACN,KAAC,MAAM;YACL,IAAI,EAAE;cAAEN,OAAO,EAAPA;YAAQ,CAAE;YAClB,KAAK,EAAED,cAAc,CAACS,MAAM,CAACZ,OAAO,CAACa,WAAW,CAAE;YAClD,QAAQ,EAAE;UAAM,EAChB;QAAA;MAEN;IAAE,EACF,GACA,IAAI,EACR,KAAC,KAAK,CAAC,MAAM;MAAC,IAAI,EAAC,MAAM;MAAC,SAAS,EAAEjB;IAAU,EAAG;EAAA,EAClC;AAEtB"},"metadata":{},"sourceType":"module"}