{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport React, { Component } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport RevisionsList from \"../subComponents/RevisionsList\";\nimport RevisionsManager from \"../helpers/RevisionsManager\";\nimport SVGLoader from \"../helpers/SVGLoader\";\nimport BadgesBar from \"../subComponents/BadgesBar\";\nimport { useFocusEffect } from \"@react-navigation/native\";\nimport { connect } from \"react-redux\";\nimport { reduxActionSetCurRevision, reduxActionUpdateRevision, reduxActionDelRevision } from \"../redux/reduxActions\";\nimport * as strings from \"../helpers/StringsManager\";\nimport StringsManager from \"../helpers/StringsManager\";\nimport Center from \"../../components/Center\";\nimport { getSubTitleFontBasicStyle } from \"../helpers/scripts\";\nimport ActionBtn from \"../../components/ActionBtn\";\nimport bgImage from \"../../assets/images/mainBg.png\";\nimport dayBadgeImg from \"../../assets/images/dayBadge.png\";\nimport monthBadgeImg from \"../../assets/images/monthBadge.png\";\nimport weekBadgeImg from \"../../assets/images/weekBadge.png\";\nimport twoBadgesImg from \"../../assets/images/prize1.png\";\nimport threeBadgesImg from \"../../assets/images/prize2.png\";\nimport allBadgesDoneImg from \"../../assets/images/prize3.png\";\nimport allRevsDoneImg from \"../../assets/images/prize4.png\";\nimport Screen from \"../../components/Screen\";\nimport ModalCongrats from \"../modals/ModalCongrats\";\nimport ModalPlayback from \"../modals/ModalPlayback\";\nimport QuranIndexer from \"../helpers/QuranIndexer\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get(\"window\"),\n  height = _Dimensions$get.height,\n  width = _Dimensions$get.width;\nfunction RefreshBadgesOnFocus(_ref) {\n  var onUpdate = _ref.onUpdate;\n  useFocusEffect(React.useCallback(function () {\n    onUpdate();\n    return function () {};\n  }, []));\n  return null;\n}\nvar ScreenRevisions = function (_Component) {\n  _inherits(ScreenRevisions, _Component);\n  var _super = _createSuper(ScreenRevisions);\n  function ScreenRevisions(props) {\n    var _this;\n    _classCallCheck(this, ScreenRevisions);\n    _this = _super.call(this, props);\n    _this.height = Dimensions.get(\"window\").height;\n    _this.width = Dimensions.get(\"window\").width;\n    _this.stringsManager = new StringsManager();\n    _this.stringsManager.setLanguage(_this.props.strLang);\n    _this.quranInfo = new QuranIndexer();\n    _this.svgLoader = new SVGLoader();\n    _this.revisionsManager = new RevisionsManager();\n    _this.revisionsManager.m_loadedRevisions = _this.props.revisions;\n    _this.revisionsManager.sortRevisions();\n    var res = _this.revisionsManager.getBadgesStates();\n    _this.state = {\n      isBadgeDay: res[0],\n      isBadgeMonth: res[1],\n      isBadgeWeek: res[2],\n      bShowCongrats: false,\n      bShowPlayBack: false,\n      nNumDoneRevs: _this.revisionsManager.getNumDoneRevisions()\n    };\n    _this.congratsMsgs = [];\n    return _this;\n  }\n  _createClass(ScreenRevisions, [{\n    key: \"onFocus\",\n    value: function onFocus() {\n      this.refresh();\n    }\n  }, {\n    key: \"showHideCongrats\",\n    value: function showHideCongrats(bShow) {\n      if (bShow == false) this.congratsMsgs.pop();\n      this.setState({\n        bShowCongrats: this.congratsMsgs.length\n      });\n    }\n  }, {\n    key: \"getCongratsModal\",\n    value: function getCongratsModal() {\n      if (this.state.bShowCongrats == false || this.congratsMsgs.length == 0) return _jsx(_Fragment, {});\n      var msgImg = this.congratsMsgs[this.congratsMsgs.length - 1].msgImg;\n      var msgTxtIndx = this.congratsMsgs[this.congratsMsgs.length - 1].msgTxtIndx;\n      return _jsx(ModalCongrats, {\n        strLang: this.props.strLang,\n        badgeImg: msgImg,\n        badgeMsg: msgTxtIndx,\n        setModalVisible: this.showHideCongrats.bind(this)\n      });\n    }\n  }, {\n    key: \"showHidePlayBack\",\n    value: function showHidePlayBack(bShow) {\n      this.setState({\n        bShowPlayBack: bShow\n      });\n    }\n  }, {\n    key: \"getListenModal\",\n    value: function getListenModal() {\n      if (this.state.bShowPlayBack == false || this.props.curRevision == null) return _jsx(_Fragment, {});\n      return _jsx(ModalPlayback, {\n        strLang: this.props.strLang,\n        quranInfo: this.quranInfo,\n        setModalVisible: this.showHidePlayBack.bind(this)\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.stringsManager.setLanguage(this.props.strLang);\n      this.revisionsManager.m_loadedRevisions = this.props.revisions;\n      var pressHandlers = this.getBadgesOnPressHandlers();\n      var longPressHandlers = this.getBadgesOnLongPressHandlers();\n      return _jsxs(Screen, {\n        style: {\n          paddingTop: 0\n        },\n        children: [_jsx(RefreshBadgesOnFocus, {\n          onUpdate: this.onFocus.bind(this)\n        }), this.getCongratsModal(), this.getListenModal(), _jsx(BadgesBar, {\n          svgLoader: this.svgLoader,\n          isBadgeDay: this.state.isBadgeDay == false,\n          isBadgeMonth: this.state.isBadgeMonth == false,\n          isBadgeWeek: this.state.isBadgeWeek == false,\n          onPresses: pressHandlers,\n          onLongPresses: longPressHandlers,\n          strLang: this.props.strLang,\n          title: this.stringsManager.getStr(strings.STR_MY_GOALS)\n        }), _jsx(ScrollView, {\n          showsVerticalScrollIndicator: false,\n          children: _jsx(View, {\n            style: styles.listContainer,\n            children: this.revisionsManager.m_loadedRevisions.length == 0 ? _jsx(_Fragment, {\n              children: this.getInitialPrompt()\n            }) : _jsx(RevisionsList, {\n              revisionsManager: this.revisionsManager,\n              stringsManager: this.stringsManager,\n              navigation: this.props.navigation,\n              refreshFn: this.refresh.bind(this),\n              updateRevFn: this.onEditRevision.bind(this),\n              deleteRevFn: this.onDeleteRevision.bind(this),\n              onAddRevision: this.onAddRevision.bind(this),\n              readRevFn: this.onReadRevision.bind(this),\n              listenRevFn: this.onListenRevision.bind(this),\n              strLang: this.props.strLang\n            })\n          })\n        }), _jsx(ActionBtn, {\n          text: this.stringsManager.getStr(strings.STR_REV_TITLE),\n          handler: this.onAddRevision.bind(this),\n          icon: true,\n          lang: this.props.strLang,\n          fullWidth: true,\n          style: {\n            height: this.height / 12.5,\n            marginTop: height / 46\n          }\n        })]\n      });\n    }\n  }, {\n    key: \"getBadgesOnPressHandlers\",\n    value: function getBadgesOnPressHandlers() {\n      var pressHandlers = new Map();\n      pressHandlers.set(\"day\", this.onDayBadgePressed.bind(this));\n      pressHandlers.set(\"month\", this.onMonthBadgePressed.bind(this));\n      pressHandlers.set(\"week\", this.onWeekBadgePressed.bind(this));\n      return pressHandlers;\n    }\n  }, {\n    key: \"getBadgesOnLongPressHandlers\",\n    value: function getBadgesOnLongPressHandlers() {\n      var longPressHandlers = new Map();\n      longPressHandlers.set(\"day\", this.onBadgeLongPress.bind(this));\n      longPressHandlers.set(\"month\", this.onBadgeLongPress.bind(this));\n      longPressHandlers.set(\"week\", this.onBadgeLongPress.bind(this));\n      return longPressHandlers;\n    }\n  }, {\n    key: \"onDayBadgePressed\",\n    value: function onDayBadgePressed() {\n      this.props.navigation.navigate(\"ScrDayBadge\");\n    }\n  }, {\n    key: \"onMonthBadgePressed\",\n    value: function onMonthBadgePressed() {\n      this.props.navigation.navigate(\"ScrMonthBadge\");\n    }\n  }, {\n    key: \"onWeekBadgePressed\",\n    value: function onWeekBadgePressed() {\n      this.props.navigation.navigate(\"ScrWeekBadge\");\n    }\n  }, {\n    key: \"onBadgeLongPress\",\n    value: function onBadgeLongPress() {}\n  }, {\n    key: \"onAddRevision\",\n    value: function onAddRevision() {\n      this.props.reduxActionSetCurRevision(null);\n      this.props.navigation.navigate(\"ScrRev\");\n    }\n  }, {\n    key: \"onSettings\",\n    value: function onSettings() {\n      this.props.navigation.navigate(\"ScrSettings\");\n    }\n  }, {\n    key: \"onDonate\",\n    value: function onDonate() {}\n  }, {\n    key: \"onReadRevision\",\n    value: function onReadRevision(revision) {\n      this.props.reduxActionSetCurRevision(revision);\n      this.props.navigation.navigate(\"Mushaf\", {\n        ayahIndex: revision.getProgressAyah(),\n        bIsAr: this.props.strLang == \"ar\"\n      });\n    }\n  }, {\n    key: \"onListenRevision\",\n    value: function onListenRevision(revision) {\n      this.props.reduxActionSetCurRevision(null);\n      this.props.reduxActionSetCurRevision(revision);\n      this.setState({\n        bShowPlayBack: true\n      });\n    }\n  }, {\n    key: \"onRevProgress\",\n    value: function onRevProgress(iAyah) {\n      this.props.curRevision.updateProgress(iAyah);\n      if (this.props.curRevision.progress >= 100) {\n        this.props.curRevision.makeRevisionDateNow();\n      }\n      this.props.reduxActionUpdateRevision(this.props.curRevision);\n    }\n  }, {\n    key: \"onEditRevision\",\n    value: function onEditRevision(revision) {\n      this.props.reduxActionSetCurRevision(revision);\n      this.props.navigation.navigate(\"ScrRev\");\n    }\n  }, {\n    key: \"onDeleteRevision\",\n    value: function onDeleteRevision(revision) {\n      this.props.reduxActionDelRevision(revision);\n      this.revisionsManager.removeByID(revision.id);\n      this.refresh();\n    }\n  }, {\n    key: \"goToAssistant\",\n    value: function goToAssistant() {\n      this.props.reduxActionSetCurRevision(null);\n      this.props.navigation.navigate(\"ScrQuranAssist\");\n    }\n  }, {\n    key: \"getInitialPrompt\",\n    value: function getInitialPrompt() {\n      var _this2 = this;\n      return _jsxs(ImageBackground, {\n        source: bgImage,\n        style: styles.bgImage,\n        children: [_jsx(Image, {\n          source: require(\"../../assets/icon_trans.png\"),\n          style: styles.bgIcon\n        }), _jsx(Center, {\n          style: {\n            height: \"100%\"\n          },\n          children: _jsxs(View, {\n            children: [_jsx(Text, {\n              style: _objectSpread(_objectSpread({}, styles.text), getSubTitleFontBasicStyle(this.props.strLang)),\n              children: this.stringsManager.getStr(strings.STR_REVS_PROMPT)\n            }), _jsx(TouchableHighlight, {\n              activeOpacity: 0.6,\n              underlayColor: \"#DDDDDD\",\n              onPress: function onPress() {\n                return _this2.goToAssistant();\n              },\n              children: _jsx(Text, {\n                style: _objectSpread(_objectSpread(_objectSpread({}, styles.text), getSubTitleFontBasicStyle(this.props.strLang)), {\n                  textDecorationLine: \"underline\",\n                  fontWeight: \"bold\"\n                }),\n                children: this.stringsManager.getStr(strings.STR_REVS_PROMPT_ASSISTANT)\n              })\n            })]\n          })\n        })]\n      });\n    }\n  }, {\n    key: \"updateBadgesStates\",\n    value: function updateBadgesStates() {\n      var oldState = [this.state.isBadgeDay, this.state.isBadgeMonth, this.state.isBadgeWeek];\n      var nNumDone = this.revisionsManager.getNumDoneRevisions();\n      var res = this.revisionsManager.getBadgesStates();\n      var strImgPath = [dayBadgeImg, monthBadgeImg, weekBadgeImg];\n      var nNumActivated = 0,\n        nNumActiveNow = 0;\n      for (var i = 0; i < 3; i++) {\n        if (res[i] == true) nNumActiveNow++;\n        if (oldState[i] == false && res[i] == true) {\n          this.congratsMsgs.push({\n            msgImg: strImgPath[i],\n            msgTxtIndx: strings.STR_DAYBADGE_CONGRATS + i\n          });\n          nNumActivated++;\n        }\n      }\n      if (nNumActivated == 2) {\n        this.congratsMsgs.push({\n          msgImg: twoBadgesImg,\n          msgTxtIndx: strings.STR_TWOBADGES_CONGRATS\n        });\n      }\n      if (nNumActivated == 3) {\n        this.congratsMsgs.push({\n          msgImg: threeBadgesImg,\n          msgTxtIndx: strings.STR_THREEBADGES_CONGRATS\n        });\n      }\n      if (nNumActivated > 0 && nNumActiveNow == 3) {\n        this.congratsMsgs.push({\n          msgImg: allBadgesDoneImg,\n          msgTxtIndx: strings.STR_ALLBADGES_DONE_CONGRATS\n        });\n      }\n      if (nNumDone > this.state.nNumDoneRevs && nNumDone == this.revisionsManager.getNumRevisions()) {\n        this.congratsMsgs.push({\n          msgImg: allRevsDoneImg,\n          msgTxtIndx: strings.STR_ALLREVS_DONE_CONGRATS\n        });\n      }\n      this.congratsMsgs.reverse();\n      this.setState({\n        isBadgeDay: res[0],\n        isBadgeMonth: res[1],\n        isBadgeWeek: res[2],\n        bShowCongrats: this.congratsMsgs.length > 0,\n        nNumDoneRevs: nNumDone\n      });\n    }\n  }, {\n    key: \"refresh\",\n    value: function refresh() {\n      this.updateBadgesStates();\n    }\n  }]);\n  return ScreenRevisions;\n}(Component);\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    revisions: state.revisions,\n    curRevision: state.curRevision,\n    strLang: state.strLang\n  };\n};\nvar mapDispatchToProps = function mapDispatchToProps() {\n  return {\n    reduxActionSetCurRevision: reduxActionSetCurRevision,\n    reduxActionDelRevision: reduxActionDelRevision,\n    reduxActionUpdateRevision: reduxActionUpdateRevision\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps())(ScreenRevisions);\nvar styles = StyleSheet.create({\n  listContainer: {\n    width: \"100%\",\n    flex: 1\n  },\n  bgImage: {\n    width: \"100%\",\n    height: 0.42 * height,\n    position: \"relative\",\n    overflow: \"hidden\",\n    borderRadius: 12\n  },\n  bgIcon: {\n    width: \"90%\",\n    height: \"90%\",\n    resizeMode: \"contain\",\n    position: \"absolute\",\n    bottom: -(height / 7),\n    left: -(height / 19),\n    opacity: 0.1\n  },\n  text: {\n    textAlign: \"center\",\n    color: \"#fff\",\n    paddingHorizontal: 10\n  }\n});","map":{"version":3,"names":["React","Component","RevisionsList","RevisionsManager","SVGLoader","BadgesBar","useFocusEffect","connect","reduxActionSetCurRevision","reduxActionUpdateRevision","reduxActionDelRevision","strings","StringsManager","Center","getSubTitleFontBasicStyle","ActionBtn","bgImage","dayBadgeImg","monthBadgeImg","weekBadgeImg","twoBadgesImg","threeBadgesImg","allBadgesDoneImg","allRevsDoneImg","Screen","ModalCongrats","ModalPlayback","QuranIndexer","Dimensions","get","height","width","RefreshBadgesOnFocus","onUpdate","useCallback","ScreenRevisions","props","stringsManager","setLanguage","strLang","quranInfo","svgLoader","revisionsManager","m_loadedRevisions","revisions","sortRevisions","res","getBadgesStates","state","isBadgeDay","isBadgeMonth","isBadgeWeek","bShowCongrats","bShowPlayBack","nNumDoneRevs","getNumDoneRevisions","congratsMsgs","refresh","bShow","pop","setState","length","msgImg","msgTxtIndx","showHideCongrats","bind","curRevision","showHidePlayBack","pressHandlers","getBadgesOnPressHandlers","longPressHandlers","getBadgesOnLongPressHandlers","paddingTop","onFocus","getCongratsModal","getListenModal","getStr","STR_MY_GOALS","styles","listContainer","getInitialPrompt","navigation","onEditRevision","onDeleteRevision","onAddRevision","onReadRevision","onListenRevision","STR_REV_TITLE","marginTop","Map","set","onDayBadgePressed","onMonthBadgePressed","onWeekBadgePressed","onBadgeLongPress","navigate","revision","ayahIndex","getProgressAyah","bIsAr","iAyah","updateProgress","progress","makeRevisionDateNow","removeByID","id","require","bgIcon","text","STR_REVS_PROMPT","goToAssistant","textDecorationLine","fontWeight","STR_REVS_PROMPT_ASSISTANT","oldState","nNumDone","strImgPath","nNumActivated","nNumActiveNow","i","push","STR_DAYBADGE_CONGRATS","STR_TWOBADGES_CONGRATS","STR_THREEBADGES_CONGRATS","STR_ALLBADGES_DONE_CONGRATS","getNumRevisions","STR_ALLREVS_DONE_CONGRATS","reverse","updateBadgesStates","mapStateToProps","mapDispatchToProps","StyleSheet","create","flex","position","overflow","borderRadius","resizeMode","bottom","left","opacity","textAlign","color","paddingHorizontal"],"sources":["C:/Users/Tysseer Harak/Desktop/Data/Code/React Native/Dawem/app/js/screens/ScreenRevisions.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  View,\r\n  ImageBackground,\r\n  Image,\r\n  Text,\r\n  Dimensions,\r\n  ScrollView,\r\n  TouchableHighlight,\r\n} from \"react-native\";\r\n\r\nimport RevisionsList from \"../subComponents/RevisionsList\";\r\nimport RevisionsManager from \"../helpers/RevisionsManager\";\r\nimport SVGLoader from \"../helpers/SVGLoader\";\r\nimport BadgesBar from \"../subComponents/BadgesBar\";\r\nimport { useFocusEffect } from \"@react-navigation/native\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  reduxActionSetCurRevision,\r\n  reduxActionUpdateRevision,\r\n  reduxActionDelRevision,\r\n} from \"../redux/reduxActions\";\r\nimport * as strings from \"../helpers/StringsManager\";\r\nimport StringsManager from \"../helpers/StringsManager\";\r\nimport Center from \"app/components/Center\";\r\nimport { getSubTitleFontBasicStyle } from \"../helpers/scripts\";\r\nimport ActionBtn from \"app/components/ActionBtn\";\r\n// import bgImage from 'assets/backgroundPNG/green_background.png';\r\nimport bgImage from \"assets/images/mainBg.png\";\r\nimport dayBadgeImg from \"assets/images/dayBadge.png\";\r\nimport monthBadgeImg from \"assets/images/monthBadge.png\";\r\nimport weekBadgeImg from \"assets/images/weekBadge.png\";\r\nimport twoBadgesImg from \"assets/images/prize1.png\";\r\nimport threeBadgesImg from \"assets/images/prize2.png\";\r\nimport allBadgesDoneImg from \"assets/images/prize3.png\";\r\nimport allRevsDoneImg from \"assets/images/prize4.png\";\r\nimport Screen from \"app/components/Screen\";\r\nimport ModalCongrats from \"../modals/ModalCongrats\";\r\nimport ModalPlayback from \"../modals/ModalPlayback\";\r\nimport QuranIndexer from \"../helpers/QuranIndexer\";\r\nconst { height, width } = Dimensions.get(\"window\");\r\n\r\nfunction RefreshBadgesOnFocus({ onUpdate }) {\r\n  useFocusEffect(\r\n    React.useCallback(() => {\r\n      // Do something when the screen is focused\r\n      onUpdate();\r\n      return () => {\r\n        // Do something when the screen is unfocused\r\n        // Useful for cleanup functions\r\n      };\r\n    }, [])\r\n  );\r\n  return null;\r\n}\r\n\r\nclass ScreenRevisions extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.height = Dimensions.get(\"window\").height;\r\n    this.width = Dimensions.get(\"window\").width;\r\n    this.stringsManager = new StringsManager();\r\n    this.stringsManager.setLanguage(this.props.strLang);\r\n    this.quranInfo = new QuranIndexer();\r\n    this.svgLoader = new SVGLoader();\r\n    this.revisionsManager = new RevisionsManager();\r\n    this.revisionsManager.m_loadedRevisions = this.props.revisions;\r\n    this.revisionsManager.sortRevisions();\r\n    //this.revisionsManager.loadTestRevisions(this.props.strLang);\r\n    var res = this.revisionsManager.getBadgesStates();\r\n\r\n    this.state = {\r\n      isBadgeDay: res[0],\r\n      isBadgeMonth: res[1],\r\n      isBadgeWeek: res[2],\r\n      bShowCongrats: false,\r\n      bShowPlayBack: false,\r\n      nNumDoneRevs: this.revisionsManager.getNumDoneRevisions(),\r\n    };\r\n    this.congratsMsgs = [];\r\n  }\r\n  onFocus() {\r\n    this.refresh();\r\n  }\r\n\r\n  showHideCongrats(bShow) {\r\n    if (bShow == false) this.congratsMsgs.pop();\r\n    this.setState({\r\n      bShowCongrats: this.congratsMsgs.length, //bShow,\r\n    });\r\n  }\r\n  getCongratsModal() {\r\n    if (this.state.bShowCongrats == false || this.congratsMsgs.length == 0)\r\n      return <></>;\r\n    var msgImg = this.congratsMsgs[this.congratsMsgs.length - 1].msgImg;\r\n    var msgTxtIndx = this.congratsMsgs[this.congratsMsgs.length - 1].msgTxtIndx;\r\n    return (\r\n      <ModalCongrats\r\n        strLang={this.props.strLang}\r\n        badgeImg={msgImg}\r\n        badgeMsg={msgTxtIndx}\r\n        setModalVisible={this.showHideCongrats.bind(this)}\r\n      />\r\n    );\r\n  }\r\n  showHidePlayBack(bShow) {\r\n    this.setState({\r\n      bShowPlayBack: bShow, //bShow,\r\n    });\r\n  }\r\n  getListenModal() {\r\n    if (this.state.bShowPlayBack == false || this.props.curRevision == null)\r\n      return <></>;\r\n    return (\r\n      <ModalPlayback\r\n        strLang={this.props.strLang}\r\n        quranInfo={this.quranInfo}\r\n        setModalVisible={this.showHidePlayBack.bind(this)}\r\n      />\r\n    );\r\n  }\r\n  render() {\r\n    this.stringsManager.setLanguage(this.props.strLang);\r\n    this.revisionsManager.m_loadedRevisions = this.props.revisions;\r\n    var pressHandlers = this.getBadgesOnPressHandlers();\r\n    var longPressHandlers = this.getBadgesOnLongPressHandlers();\r\n\r\n    return (\r\n      <Screen style={{ paddingTop: 0 }}>\r\n        <RefreshBadgesOnFocus onUpdate={this.onFocus.bind(this)} />\r\n        {this.getCongratsModal()}\r\n        {this.getListenModal()}\r\n        <BadgesBar\r\n          svgLoader={this.svgLoader}\r\n          isBadgeDay={this.state.isBadgeDay == false}\r\n          isBadgeMonth={this.state.isBadgeMonth == false}\r\n          isBadgeWeek={this.state.isBadgeWeek == false}\r\n          onPresses={pressHandlers}\r\n          onLongPresses={longPressHandlers}\r\n          strLang={this.props.strLang}\r\n          title={this.stringsManager.getStr(strings.STR_MY_GOALS)}\r\n        />\r\n        <ScrollView showsVerticalScrollIndicator={false}>\r\n          <View style={styles.listContainer}>\r\n            {this.revisionsManager.m_loadedRevisions.length == 0 ? (\r\n              <>{this.getInitialPrompt()}</>\r\n            ) : (\r\n              <RevisionsList\r\n                revisionsManager={this.revisionsManager}\r\n                stringsManager={this.stringsManager}\r\n                navigation={this.props.navigation}\r\n                refreshFn={this.refresh.bind(this)}\r\n                updateRevFn={this.onEditRevision.bind(this)}\r\n                deleteRevFn={this.onDeleteRevision.bind(this)}\r\n                onAddRevision={this.onAddRevision.bind(this)}\r\n                readRevFn={this.onReadRevision.bind(this)}\r\n                listenRevFn={this.onListenRevision.bind(this)}\r\n                strLang={this.props.strLang}\r\n              />\r\n            )}\r\n          </View>\r\n        </ScrollView>\r\n        <ActionBtn\r\n          text={this.stringsManager.getStr(strings.STR_REV_TITLE)}\r\n          handler={this.onAddRevision.bind(this)}\r\n          icon={true}\r\n          lang={this.props.strLang}\r\n          fullWidth={true}\r\n          style={{ height: this.height / 12.5, marginTop: height / 46 }}\r\n        />\r\n      </Screen>\r\n    );\r\n  }\r\n\r\n  getBadgesOnPressHandlers() {\r\n    var pressHandlers = new Map();\r\n    pressHandlers.set(\"day\", this.onDayBadgePressed.bind(this));\r\n    pressHandlers.set(\"month\", this.onMonthBadgePressed.bind(this));\r\n    pressHandlers.set(\"week\", this.onWeekBadgePressed.bind(this));\r\n\r\n    return pressHandlers;\r\n  }\r\n  getBadgesOnLongPressHandlers() {\r\n    var longPressHandlers = new Map();\r\n    longPressHandlers.set(\"day\", this.onBadgeLongPress.bind(this));\r\n    longPressHandlers.set(\"month\", this.onBadgeLongPress.bind(this));\r\n    longPressHandlers.set(\"week\", this.onBadgeLongPress.bind(this));\r\n    return longPressHandlers;\r\n  }\r\n\r\n  onDayBadgePressed() {\r\n    this.props.navigation.navigate(\"ScrDayBadge\");\r\n  }\r\n  onMonthBadgePressed() {\r\n    this.props.navigation.navigate(\"ScrMonthBadge\");\r\n  }\r\n  onWeekBadgePressed() {\r\n    this.props.navigation.navigate(\"ScrWeekBadge\");\r\n  }\r\n  onBadgeLongPress() {\r\n    // todo: explain badges\r\n  }\r\n  onAddRevision() {\r\n    this.props.reduxActionSetCurRevision(null);\r\n    this.props.navigation.navigate(\"ScrRev\");\r\n  }\r\n\r\n  onSettings() {\r\n    this.props.navigation.navigate(\"ScrSettings\");\r\n  }\r\n  onDonate() {}\r\n\r\n  onReadRevision(revision) {\r\n    this.props.reduxActionSetCurRevision(revision);\r\n    this.props.navigation.navigate(\"Mushaf\", {\r\n      ayahIndex: revision.getProgressAyah(),\r\n      bIsAr: this.props.strLang == \"ar\",\r\n      // longPressHandler: this.onRevProgress.bind(this),\r\n    });\r\n  }\r\n  onListenRevision(revision) {\r\n    this.props.reduxActionSetCurRevision(null);\r\n    this.props.reduxActionSetCurRevision(revision);\r\n    this.setState({\r\n      bShowPlayBack: true, //bShow,\r\n    });\r\n  }\r\n  onRevProgress(iAyah) {\r\n    this.props.curRevision.updateProgress(iAyah);\r\n    if (this.props.curRevision.progress >= 100) {\r\n      this.props.curRevision.makeRevisionDateNow();\r\n      //this.props.revisionsManager.sortRevisions();\r\n    }\r\n    this.props.reduxActionUpdateRevision(this.props.curRevision);\r\n\r\n    //this.refresh();\r\n  }\r\n  onEditRevision(revision) {\r\n    this.props.reduxActionSetCurRevision(revision);\r\n    this.props.navigation.navigate(\"ScrRev\");\r\n  }\r\n\r\n  onDeleteRevision(revision) {\r\n    this.props.reduxActionDelRevision(revision);\r\n\r\n    this.revisionsManager.removeByID(revision.id);\r\n\r\n    this.refresh();\r\n  }\r\n  goToAssistant() {\r\n    this.props.reduxActionSetCurRevision(null);\r\n    this.props.navigation.navigate(\"ScrQuranAssist\");\r\n  }\r\n  getInitialPrompt() {\r\n    return (\r\n      <ImageBackground source={bgImage} style={styles.bgImage}>\r\n        <Image\r\n          source={require(\"assets/icon_trans.png\")}\r\n          style={styles.bgIcon}\r\n        />\r\n        <Center style={{ height: \"100%\" }}>\r\n          <View>\r\n            <Text\r\n              style={{\r\n                ...styles.text,\r\n                ...getSubTitleFontBasicStyle(this.props.strLang),\r\n              }}\r\n            >\r\n              {this.stringsManager.getStr(strings.STR_REVS_PROMPT)}\r\n            </Text>\r\n            <TouchableHighlight\r\n              activeOpacity={0.6}\r\n              underlayColor=\"#DDDDDD\"\r\n              onPress={() => this.goToAssistant()}\r\n            >\r\n              <Text\r\n                style={{\r\n                  ...styles.text,\r\n                  ...getSubTitleFontBasicStyle(this.props.strLang),\r\n                  ...{ textDecorationLine: \"underline\", fontWeight: \"bold\" },\r\n                }}\r\n              >\r\n                {this.stringsManager.getStr(strings.STR_REVS_PROMPT_ASSISTANT)}\r\n              </Text>\r\n            </TouchableHighlight>\r\n          </View>\r\n        </Center>\r\n      </ImageBackground>\r\n    );\r\n  }\r\n\r\n  updateBadgesStates() {\r\n    var oldState = [\r\n      this.state.isBadgeDay,\r\n      this.state.isBadgeMonth,\r\n      this.state.isBadgeWeek,\r\n    ];\r\n    var nNumDone = this.revisionsManager.getNumDoneRevisions();\r\n    var res = this.revisionsManager.getBadgesStates();\r\n    var strImgPath = [dayBadgeImg, monthBadgeImg, weekBadgeImg];\r\n    var nNumActivated = 0,\r\n      nNumActiveNow = 0;\r\n    for (var i = 0; i < 3; i++) {\r\n      if (res[i] == true) nNumActiveNow++;\r\n      if (oldState[i] == false && res[i] == true) {\r\n        this.congratsMsgs.push({\r\n          msgImg: strImgPath[i],\r\n          msgTxtIndx: strings.STR_DAYBADGE_CONGRATS + i,\r\n        });\r\n        nNumActivated++;\r\n      }\r\n    }\r\n    if (nNumActivated == 2) {\r\n      this.congratsMsgs.push({\r\n        msgImg: twoBadgesImg,\r\n        msgTxtIndx: strings.STR_TWOBADGES_CONGRATS,\r\n      });\r\n    }\r\n    if (nNumActivated == 3) {\r\n      this.congratsMsgs.push({\r\n        msgImg: threeBadgesImg,\r\n        msgTxtIndx: strings.STR_THREEBADGES_CONGRATS,\r\n      });\r\n    }\r\n    if (nNumActivated > 0 && nNumActiveNow == 3) {\r\n      this.congratsMsgs.push({\r\n        msgImg: allBadgesDoneImg,\r\n        msgTxtIndx: strings.STR_ALLBADGES_DONE_CONGRATS,\r\n      });\r\n    }\r\n    if (\r\n      nNumDone > this.state.nNumDoneRevs &&\r\n      nNumDone == this.revisionsManager.getNumRevisions()\r\n    ) {\r\n      // finished all revisions\r\n      this.congratsMsgs.push({\r\n        msgImg: allRevsDoneImg,\r\n        msgTxtIndx: strings.STR_ALLREVS_DONE_CONGRATS,\r\n      });\r\n    }\r\n    this.congratsMsgs.reverse();\r\n\r\n    this.setState({\r\n      isBadgeDay: res[0],\r\n      isBadgeMonth: res[1],\r\n      isBadgeWeek: res[2],\r\n      bShowCongrats: this.congratsMsgs.length > 0,\r\n      nNumDoneRevs: nNumDone,\r\n    });\r\n  }\r\n  refresh() {\r\n    this.updateBadgesStates();\r\n  }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  revisions: state.revisions,\r\n  curRevision: state.curRevision,\r\n  strLang: state.strLang,\r\n});\r\nconst mapDispatchToProps = () => {\r\n  return {\r\n    reduxActionSetCurRevision,\r\n    reduxActionDelRevision,\r\n    reduxActionUpdateRevision,\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps())(ScreenRevisions);\r\nconst styles = StyleSheet.create({\r\n  // container: {\r\n  //   flex: 1,\r\n  //   backgroundColor: \"#EEE\",\r\n  //   padding: 20,\r\n  //   // paddingHorizontal: 20,\r\n  //   // paddingBottom: 20,\r\n  //   // justifyContent: 'center',\r\n  // },\r\n\r\n  // toolBar: {\r\n  //   width: \"100%\",\r\n  //   height: 40,\r\n  //   alignSelf: \"flex-end\",\r\n  //   borderTopColor: \"yellow\",\r\n  //   borderTopWidth: 1,\r\n  //   paddingHorizontal: 6,\r\n  //   flexDirection: \"row\",\r\n  //   alignItems: \"center\",\r\n  //   justifyContent: \"space-around\",\r\n  // },\r\n  // toolButton: {\r\n  //   width: 38,\r\n  //   height: 38,\r\n  //   marginHorizontal: 2,\r\n  // },\r\n  listContainer: {\r\n    width: \"100%\",\r\n    flex: 1,\r\n  },\r\n  bgImage: {\r\n    width: \"100%\",\r\n    height: 0.42 * height,\r\n    position: \"relative\",\r\n    overflow: \"hidden\",\r\n    borderRadius: 12,\r\n  },\r\n  bgIcon: {\r\n    width: \"90%\",\r\n    height: \"90%\",\r\n    resizeMode: \"contain\",\r\n    position: \"absolute\",\r\n    // bottom: -120,\r\n    bottom: -(height / 7),\r\n    // left: -50,\r\n    left: -(height / 19),\r\n    opacity: 0.1,\r\n  },\r\n  text: {\r\n    textAlign: \"center\",\r\n    color: \"#fff\",\r\n    paddingHorizontal: 10,\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}