{"ast":null,"code":"import Animated from \"react-native-reanimated\";\nvar Value = Animated.Value,\n  cond = Animated.cond,\n  eq = Animated.eq,\n  or = Animated.or;\nexport var get = function get(array, index) {\n  var notFound = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Value();\n  return array.reduce(function (acc, v, i) {\n    return cond(eq(i, index), v, acc);\n  }, notFound);\n};\nexport var contains = function contains(values, value) {\n  return values.reduce(function (acc, v) {\n    return or(acc, eq(value, v));\n  }, new Value(0));\n};\nexport var find = function find(values, fn) {\n  var notFound = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Value();\n  return values.reduce(function (acc, v) {\n    return cond(fn(v), v, acc);\n  }, notFound);\n};","map":{"version":3,"mappings":"AAAA,OAAOA,QAAP,MAAqB,yBAArB;IAEQC,K,GAAwBD,Q,CAAxBC,K;EAAOC,I,GAAiBF,Q,CAAjBE,I;EAAMC,E,GAAWH,Q,CAAXG,E;EAAIC,E,GAAOJ,Q,CAAPI,E;AAEzB,OAAO,IAAMC,GAAG,GAAG,SAANA,GAAM,CACjBC,KADiB,EAEjBC,KAFiB;EAAA,IAGjBC,QAHiB,uEAGiB,IAAIP,KAAJ,EAHjB;EAAA,OAKjBK,KAAK,CAACG,MAAN,CACE,UAACC,GAAD,EAAMC,CAAN,EAASC,CAAT;IAAA,OAAeV,IAAI,CAACC,EAAE,CAACS,CAAD,EAAIL,KAAJ,CAAH,EAAeI,CAAf,EAAkBD,GAAlB,CAAnB;EAAA,CADF,EAEEF,QAFF,CALiB;AAAA,CAAZ;AAUP,OAAO,IAAMK,QAAQ,GAAG,SAAXA,QAAW,CACtBC,MADsB,EAEtBC,KAFsB;EAAA,OAItBD,MAAM,CAACL,MAAP,CACE,UAACC,GAAD,EAAMC,CAAN;IAAA,OAAYP,EAAE,CAACM,GAAD,EAAMP,EAAE,CAACY,KAAD,EAAQJ,CAAR,CAAR,CAAd;EAAA,CADF,EAEE,IAAIV,KAAJ,CAAU,CAAV,CAFF,CAJsB;AAAA,CAAjB;AASP,OAAO,IAAMe,IAAI,GAAG,SAAPA,IAAO,CAClBF,MADkB,EAElBG,EAFkB;EAAA,IAGlBT,QAHkB,uEAGgB,IAAIP,KAAJ,EAHhB;EAAA,OAIfa,MAAM,CAACL,MAAP,CAAc,UAACC,GAAD,EAAMC,CAAN;IAAA,OAAYT,IAAI,CAACe,EAAE,CAACN,CAAD,CAAH,EAAQA,CAAR,EAAWD,GAAX,CAAhB;EAAA,CAAd,EAA+CF,QAA/C,CAJe;AAAA,CAAb","names":["Animated","Value","cond","eq","or","get","array","index","notFound","reduce","acc","v","i","contains","values","value","find","fn"],"sources":["Array.ts"],"sourcesContent":["import Animated from \"react-native-reanimated\";\n\nconst { Value, cond, eq, or } = Animated;\n\nexport const get = (\n  array: Animated.Adaptable<number>[],\n  index: Animated.Adaptable<number>,\n  notFound: Animated.Node<number> = new Value()\n): Animated.Node<number> =>\n  array.reduce(\n    (acc, v, i) => cond(eq(i, index), v, acc),\n    notFound\n  ) as Animated.Node<number>;\n\nexport const contains = (\n  values: Animated.Adaptable<number>[],\n  value: Animated.Adaptable<number>\n): Animated.Node<0 | 1> =>\n  values.reduce(\n    (acc, v) => or(acc, eq(value, v)),\n    new Value(0)\n  ) as Animated.Node<0 | 1>;\n\nexport const find = (\n  values: Animated.Node<number>[],\n  fn: (v: Animated.Node<number>) => Animated.Node<number>,\n  notFound: Animated.Node<number> = new Value()\n) => values.reduce((acc, v) => cond(fn(v), v, acc), notFound);\n"]},"metadata":{},"sourceType":"module"}