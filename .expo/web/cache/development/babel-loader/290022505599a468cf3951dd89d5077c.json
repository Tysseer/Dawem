{"ast":null,"code":"import Animated from \"react-native-reanimated\";\nimport { find } from \"../Array\";\nimport { approximates } from \"../Math\";\nvar Value = Animated.Value,\n  and = Animated.and,\n  cond = Animated.cond,\n  divide = Animated.divide,\n  add = Animated.add,\n  multiply = Animated.multiply,\n  block = Animated.block,\n  greaterThan = Animated.greaterThan,\n  eq = Animated.eq,\n  lessThan = Animated.lessThan,\n  pow = Animated.pow,\n  sqrt = Animated.sqrt,\n  set = Animated.set,\n  sub = Animated.sub,\n  cos = Animated.cos,\n  not = Animated.not,\n  acos = Animated.acos;\nvar isRootValidForCubicBezier = function isRootValidForCubicBezier(root) {\n  return and(greaterThan(root, 0), lessThan(root, 1));\n};\nvar cuberoot = function cuberoot(v) {\n  return cond(lessThan(v, 0), multiply(pow(multiply(v, -1), 1 / 3), -1), pow(v, 1 / 3));\n};\nvar cubicBezierSolve = function cubicBezierSolve(pa, pb, pc, pd) {\n  var a = new Value();\n  var b = new Value();\n  var c = new Value();\n  var d = new Value();\n  var root1 = new Value();\n  var root2 = new Value();\n  var root3 = new Value();\n  var q = new Value();\n  var q2 = new Value();\n  var p = new Value();\n  var p3 = new Value();\n  var discriminant = new Value();\n  var mp3 = new Value();\n  var mp33 = new Value();\n  var r = new Value();\n  var t = new Value();\n  var cosphi = new Value();\n  var phi = new Value();\n  var crtr = new Value();\n  var t1 = new Value();\n  var u1 = new Value();\n  var sd = new Value();\n  var v1 = new Value();\n  var sq = new Value();\n  return block([set(a, add(multiply(3, pa), multiply(-6, pb), multiply(3, pc))), set(b, add(multiply(-3, pa), multiply(3, pb))), set(c, pa), set(d, add(multiply(-1, pa), multiply(3, pb), multiply(-3, pc), pd)), cond(approximates(d, 0, 0.001), cond(approximates(d, 0, 0.001), cond(not(approximates(b, 0, 0.001)), set(root1, divide(multiply(-1, c), b)), [set(q, sqrt(sub(pow(b, 2), multiply(4, a, c)))), set(root1, divide(sub(q, b), multiply(2, a))), set(root2, divide(sub(multiply(b, -1), q), multiply(2, a)))])), [set(a, divide(a, d)), set(b, divide(b, d)), set(c, divide(c, d)), set(p, divide(sub(multiply(3, b), multiply(a, a)), 3)), set(p3, divide(p, 3)), set(q, divide(add(multiply(2, a, a, a), multiply(-9, a, b), multiply(27, c)), 27)), set(q2, divide(q, 2)), set(discriminant, add(multiply(q2, q2), multiply(p3, p3, p3))), cond(lessThan(discriminant, 0), [set(mp3, divide(multiply(p, -1), 3)), set(mp33, multiply(mp3, mp3, mp3)), set(r, sqrt(mp33)), set(t, divide(multiply(q, -1), multiply(2, r))), set(cosphi, cond(lessThan(t, -1), -1, cond(greaterThan(t, 1), 1, t))), set(phi, acos(cosphi)), set(crtr, cuberoot(r)), set(t1, multiply(2, crtr)), set(root1, sub(multiply(t1, cos(divide(phi, 3))), divide(a, 3))), set(root2, sub(multiply(t1, cos(divide(add(phi, 2 * Math.PI), 3))), divide(a, 3))), set(root3, sub(multiply(t1, cos(divide(add(phi, 4 * Math.PI), 3))), divide(a, 3)))], cond(eq(discriminant, 0), [set(u1, cond(lessThan(q2, 0), cuberoot(multiply(q2, -1)), multiply(cuberoot(q2), -1))), set(root1, sub(multiply(2, u1), divide(a, 3))), set(root2, sub(multiply(-1, u1), divide(a, 3)))], [set(sd, sqrt(discriminant)), set(u1, cuberoot(sub(sq, q2))), set(v1, cuberoot(add(sq, q2))), set(root1, sub(u1, v1, divide(a, 3)))]))]), find([root1, root2, root3], isRootValidForCubicBezier)]);\n};\nexport default cubicBezierSolve;","map":{"version":3,"mappings":"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","names":["Animated","find","approximates","Value","and","cond","divide","add","multiply","block","greaterThan","eq","lessThan","pow","sqrt","set","sub","cos","not","acos","isRootValidForCubicBezier","root","cuberoot","v","cubicBezierSolve","pa","pb","pc","pd","a","b","c","d","root1","root2","root3","q","q2","p","p3","discriminant","mp3","mp33","r","t","cosphi","phi","crtr","t1","u1","sd","v1","sq","Math","PI"],"sources":["CubicBezierSolve.ts"],"sourcesContent":["import Animated from \"react-native-reanimated\";\n\nimport { find } from \"../Array\";\nimport { approximates } from \"../Math\";\n\nconst {\n  Value,\n  and,\n  cond,\n  divide,\n  add,\n  multiply,\n  block,\n  greaterThan,\n  eq,\n  lessThan,\n  pow,\n  sqrt,\n  set,\n  sub,\n  cos,\n  not,\n  acos,\n} = Animated;\n\nconst isRootValidForCubicBezier = (root: Animated.Node<number>) =>\n  and(greaterThan(root, 0), lessThan(root, 1));\n\n// pomax.github.io/bezierinfo/#extremities\nconst cuberoot = (v: Animated.Adaptable<number>) =>\n  cond(\n    lessThan(v, 0),\n    multiply(pow(multiply(v, -1), 1 / 3), -1),\n    pow(v, 1 / 3)\n  );\n\nconst cubicBezierSolve = (\n  pa: Animated.Adaptable<number>,\n  pb: Animated.Adaptable<number>,\n  pc: Animated.Adaptable<number>,\n  pd: Animated.Adaptable<number>\n): Animated.Node<number> => {\n  const a: Animated.Value<number> = new Value();\n  const b: Animated.Value<number> = new Value();\n  const c: Animated.Value<number> = new Value();\n  const d: Animated.Value<number> = new Value();\n  const root1: Animated.Value<number> = new Value();\n  const root2: Animated.Value<number> = new Value();\n  const root3: Animated.Value<number> = new Value();\n\n  const q: Animated.Value<number> = new Value();\n  const q2: Animated.Value<number> = new Value();\n  const p: Animated.Value<number> = new Value();\n  const p3: Animated.Value<number> = new Value();\n  const discriminant: Animated.Value<number> = new Value();\n\n  const mp3: Animated.Value<number> = new Value();\n  const mp33: Animated.Value<number> = new Value();\n  const r: Animated.Value<number> = new Value();\n  const t: Animated.Value<number> = new Value();\n  const cosphi: Animated.Value<number> = new Value();\n  const phi: Animated.Value<number> = new Value();\n  const crtr: Animated.Value<number> = new Value();\n  const t1: Animated.Value<number> = new Value();\n\n  const u1: Animated.Value<number> = new Value();\n\n  const sd: Animated.Value<number> = new Value();\n  const v1: Animated.Value<number> = new Value();\n  const sq: Animated.Value<number> = new Value();\n\n  return block([\n    set(a, add(multiply(3, pa), multiply(-6, pb), multiply(3, pc))),\n    set(b, add(multiply(-3, pa), multiply(3, pb))),\n    set(c, pa),\n    set(d, add(multiply(-1, pa), multiply(3, pb), multiply(-3, pc), pd)),\n    cond(\n      approximates(d, 0, 0.001),\n      cond(\n        approximates(d, 0, 0.001),\n        cond(\n          not(approximates(b, 0, 0.001)),\n          set(root1, divide(multiply(-1, c), b)),\n          [\n            set(q, sqrt(sub(pow(b, 2), multiply(4, a, c)))),\n            set(root1, divide(sub(q, b), multiply(2, a))),\n            set(root2, divide(sub(multiply(b, -1), q), multiply(2, a))),\n          ]\n        )\n      ),\n      [\n        set(a, divide(a, d)),\n        set(b, divide(b, d)),\n        set(c, divide(c, d)),\n        set(p, divide(sub(multiply(3, b), multiply(a, a)), 3)),\n        set(p3, divide(p, 3)),\n        set(\n          q,\n          divide(\n            add(multiply(2, a, a, a), multiply(-9, a, b), multiply(27, c)),\n            27\n          )\n        ),\n        set(q2, divide(q, 2)),\n        set(discriminant, add(multiply(q2, q2), multiply(p3, p3, p3))),\n        cond(\n          lessThan(discriminant, 0),\n          [\n            set(mp3, divide(multiply(p, -1), 3)),\n            set(mp33, multiply(mp3, mp3, mp3)),\n            set(r, sqrt(mp33)),\n            set(t, divide(multiply(q, -1), multiply(2, r))),\n            set(\n              cosphi,\n              cond(lessThan(t, -1), -1, cond(greaterThan(t, 1), 1, t))\n            ),\n            set(phi, acos(cosphi)),\n            set(crtr, cuberoot(r)),\n            set(t1, multiply(2, crtr)),\n            set(root1, sub(multiply(t1, cos(divide(phi, 3))), divide(a, 3))),\n            set(\n              root2,\n              sub(\n                multiply(t1, cos(divide(add(phi, 2 * Math.PI), 3))),\n                divide(a, 3)\n              )\n            ),\n            set(\n              root3,\n              sub(\n                multiply(t1, cos(divide(add(phi, 4 * Math.PI), 3))),\n                divide(a, 3)\n              )\n            ),\n          ],\n          cond(\n            eq(discriminant, 0),\n            [\n              set(\n                u1,\n                cond(\n                  lessThan(q2, 0),\n                  cuberoot(multiply(q2, -1)),\n                  multiply(cuberoot(q2), -1)\n                )\n              ),\n              set(root1, sub(multiply(2, u1), divide(a, 3))),\n              set(root2, sub(multiply(-1, u1), divide(a, 3))),\n            ],\n            [\n              set(sd, sqrt(discriminant)),\n              set(u1, cuberoot(sub(sq, q2))),\n              set(v1, cuberoot(add(sq, q2))),\n              set(root1, sub(u1, v1, divide(a, 3))),\n            ]\n          )\n        ),\n      ]\n    ),\n    find([root1, root2, root3], isRootValidForCubicBezier),\n  ]);\n};\n\nexport default cubicBezierSolve;\n"]},"metadata":{},"sourceType":"module"}