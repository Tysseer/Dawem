{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { reduxActionSetLanguage, reduxActionSetNotifFlag } from \"../redux/reduxActions\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport * as strings from \"../helpers/StringsManager\";\nimport StringsManager from \"../helpers/StringsManager\";\nimport ActionBtn from \"../../components/ActionBtn\";\nimport * as Updates from \"expo-updates\";\nimport { useFocusEffect } from \"@react-navigation/native\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport { colors } from \"../../constants\";\nimport EnFlag from \"../../assets/images/lang_en.png\";\nimport ArFlag from \"../../assets/images/lang_ar.png\";\nimport { getFontBasicStyle } from \"../helpers/scripts\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport * as Notifications from \"expo-notifications\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar addDailyNotification = function addDailyNotification(strMgr) {\n  var identifier;\n  return _regeneratorRuntime.async(function addDailyNotification$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Notifications.scheduleNotificationAsync({\n            content: {\n              title: strMgr.getStr(strings.DAILY_NOTIFICATION_TITLE),\n              body: strMgr.getStr(strings.DAILY_NOTIFICATION_BODY)\n            },\n            trigger: {\n              hour: 12,\n              minute: 10,\n              repeats: true\n            }\n          }));\n        case 2:\n          identifier = _context.sent;\n          return _context.abrupt(\"return\", identifier);\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nfunction cancelNotifications(identifier) {\n  return _regeneratorRuntime.async(function cancelNotifications$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(Notifications.cancelScheduledNotificationAsync(identifier));\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction cancelAllNotifications() {\n  return _regeneratorRuntime.async(function cancelAllNotifications$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(Notifications.cancelAllScheduledNotificationsAsync());\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nvar langs = [{\n  key: \"en\",\n  title: \"English\"\n}, {\n  key: \"ar\",\n  title: \"العربية\"\n}];\nfunction RefreshBadgesOnFocus(_ref) {\n  var onUpdate = _ref.onUpdate;\n  useFocusEffect(React.useCallback(function () {\n    onUpdate();\n    return function () {};\n  }, []));\n  return null;\n}\nvar ApplyAndRestartApp = function ApplyAndRestartApp(fnreduxActionSetLanguage, newLang) {\n  return _regeneratorRuntime.async(function ApplyAndRestartApp$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(fnreduxActionSetLanguage(newLang));\n        case 3:\n          setTimeout(function () {\n            I18nManager.forceRTL(newLang == \"ar\");\n            Updates.reloadAsync();\n          }, 600);\n          _context4.next = 9;\n          break;\n        case 6:\n          _context4.prev = 6;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.log(_context4.t0);\n        case 9:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n};\nvar ScreenSettings = function (_Component) {\n  _inherits(ScreenSettings, _Component);\n  var _super = _createSuper(ScreenSettings);\n  function ScreenSettings(props) {\n    var _this;\n    _classCallCheck(this, ScreenSettings);\n    _this = _super.call(this, props);\n    _this.height = Dimensions.get(\"window\").height;\n    _this.width = Dimensions.get(\"window\").width;\n    _this.stringsManager = new StringsManager();\n    _this.stringsManager.setLanguage(_this.props.strLang);\n    _this.originalLang = _this.props.strLang;\n    _this.state = {\n      selectedLang: _this.props.strLang,\n      buttonTxt: _this.stringsManager.getStr(strings.STR_SEL_LANGUAGE),\n      bNotifFlag: _this.props.bDailyNotification\n    };\n    return _this;\n  }\n  _createClass(ScreenSettings, [{\n    key: \"languageHandler\",\n    value: function languageHandler(lang) {\n      this.stringsManager.setLanguage(lang);\n      this.setState({\n        selectedLang: lang,\n        buttonTxt: this.stringsManager.getStr(strings.STR_SEL_LANGUAGE)\n      });\n    }\n  }, {\n    key: \"okButtonPressed\",\n    value: function okButtonPressed() {\n      var newLang;\n      return _regeneratorRuntime.async(function okButtonPressed$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              newLang = this.state.selectedLang;\n              _context5.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"strLang\", newLang));\n            case 3:\n              this.stringsManager.setLanguage(newLang);\n              ApplyAndRestartApp(this.props.reduxActionSetLanguage, newLang);\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus() {\n      this.stringsManager.setLanguage(this.props.strLang);\n      this.originalLang = this.props.strLang;\n      this.state = {\n        selectedLang: this.props.strLang,\n        buttonTxt: this.stringsManager.getStr(strings.STR_SEL_LANGUAGE)\n      };\n    }\n  }, {\n    key: \"renderLanguageItem\",\n    value: function renderLanguageItem(lang) {\n      var _this2 = this;\n      return _jsxs(TouchableOpacity, {\n        activeOpacity: 0.7,\n        onPress: function onPress() {\n          return _this2.languageHandler(lang.key);\n        },\n        style: styles.langContainer,\n        children: [_jsxs(View, {\n          style: {\n            flexDirection: \"row\"\n          },\n          children: [_jsx(Image, {\n            source: lang.key == \"en\" ? EnFlag : ArFlag,\n            style: {\n              width: this.width / 10,\n              height: this.width / 10,\n              marginRight: this.width / 28\n            }\n          }), _jsx(Text, {\n            style: this.getlangLabelTextStyle(lang.key),\n            children: lang.title\n          })]\n        }), this.state.selectedLang == lang.key ? _jsx(MaterialCommunityIcons, {\n          name: \"check\",\n          size: 24,\n          color: colors.primary\n        }) : _jsx(View, {})]\n      }, lang.key);\n    }\n  }, {\n    key: \"onToggleNotif\",\n    value: function onToggleNotif() {\n      var bNewDailyNotification = !this.state.bNotifFlag;\n      reduxActionSetNotifFlag(bNewDailyNotification);\n      cancelAllNotifications();\n      if (bNewDailyNotification) addDailyNotification(this.stringsManager);\n      this.setState({\n        bNotifFlag: bNewDailyNotification\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.stringsManager.setLanguage(this.props.strLang);\n      return _jsxs(View, {\n        style: styles.mainContainer,\n        children: [_jsx(RefreshBadgesOnFocus, {\n          onUpdate: this.onFocus.bind(this)\n        }), _jsx(View, {\n          style: styles.quranLogoContainer,\n          children: _jsx(Image, {\n            source: require(\"../../assets/images/Quran_logo.png\"),\n            style: {\n              resizeMode: \"contain\"\n            }\n          })\n        }), _jsx(View, {\n          style: styles.separator\n        }), _jsx(View, {\n          style: styles.notifSettingBar,\n          children: _jsxs(View, {\n            style: {\n              flexDirection: \"row\"\n            },\n            children: [_jsx(Switch, {\n              trackColor: {\n                false: colors.primary_disabled,\n                true: colors.primary\n              },\n              thumbColor: this.state.bNotifFlag ? \"#ddd\" : \"#aaa\",\n              ios_backgroundColor: \"#3e3e3e\",\n              onValueChange: this.onToggleNotif.bind(this),\n              value: this.state.bNotifFlag,\n              style: {\n                marginVertical: 15\n              }\n            }), _jsx(Text, {\n              style: this.getlangLabelTextStyle(this.originalLang),\n              children: this.stringsManager.getStr(strings.STR_DAILY_REMINDER)\n            })]\n          })\n        }), _jsx(View, {\n          style: styles.separator\n        }), _jsxs(View, {\n          style: styles.allLangsContainer,\n          children: [this.renderLanguageItem(langs[0]), _jsx(View, {\n            style: styles.separator\n          }), this.renderLanguageItem(langs[1])]\n        }), _jsx(ActionBtn, {\n          text: this.state.buttonTxt,\n          handler: this.okButtonPressed.bind(this),\n          lang: this.state.selectedLang,\n          style: {\n            height: this.height / 12.5,\n            width: \"90%\",\n            marginTop: this.height / 46,\n            marginBottom: this.height / 37.5\n          }\n        })]\n      });\n    }\n  }, {\n    key: \"getlangLabelTextStyle\",\n    value: function getlangLabelTextStyle(strLang) {\n      return [{\n        lineHeight: 35,\n        alignSelf: \"center\",\n        color: \"#0C3D11\"\n      }, getFontBasicStyle(strLang, false)];\n    }\n  }]);\n  return ScreenSettings;\n}(Component);\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    strLang: state.strLang,\n    bDailyNotification: state.bDailyNotification\n  };\n};\nvar mapDispatchToProps = function mapDispatchToProps() {\n  return {\n    reduxActionSetLanguage: reduxActionSetLanguage,\n    reduxActionSetNotifFlag: reduxActionSetNotifFlag\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps())(ScreenSettings);\nvar styles = StyleSheet.create({\n  mainContainer: {\n    flex: 1,\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    backgroundColor: \"#EEEEEE\"\n  },\n  notifSettingBar: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    width: \"93%\",\n    height: 30\n  },\n  quranLogoContainer: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    height: \"42%\",\n    width: \"100%\"\n  },\n  allLangsContainer: {\n    width: \"100%\",\n    height: 200,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  langContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    width: \"93%\",\n    height: 70,\n    borderColor: \"#0B721EFF\"\n  },\n  separator: {\n    borderColor: \"#88888859\",\n    borderWidth: 1,\n    borderTopLeftRadius: 10,\n    borderTopRightRadius: 10,\n    borderBottomLeftRadius: 10,\n    borderBottomRightRadius: 10,\n    height: 2,\n    width: \"93%\",\n    marginVertical: 15\n  }\n});","map":{"version":3,"names":["React","Component","connect","reduxActionSetLanguage","reduxActionSetNotifFlag","strings","StringsManager","ActionBtn","Updates","useFocusEffect","MaterialCommunityIcons","colors","EnFlag","ArFlag","getFontBasicStyle","AsyncStorage","Notifications","addDailyNotification","strMgr","scheduleNotificationAsync","content","title","getStr","DAILY_NOTIFICATION_TITLE","body","DAILY_NOTIFICATION_BODY","trigger","hour","minute","repeats","identifier","cancelNotifications","cancelScheduledNotificationAsync","cancelAllNotifications","cancelAllScheduledNotificationsAsync","langs","key","RefreshBadgesOnFocus","onUpdate","useCallback","ApplyAndRestartApp","fnreduxActionSetLanguage","newLang","setTimeout","I18nManager","forceRTL","reloadAsync","console","log","ScreenSettings","props","height","Dimensions","get","width","stringsManager","setLanguage","strLang","originalLang","state","selectedLang","buttonTxt","STR_SEL_LANGUAGE","bNotifFlag","bDailyNotification","lang","setState","setItem","languageHandler","styles","langContainer","flexDirection","marginRight","getlangLabelTextStyle","primary","bNewDailyNotification","mainContainer","onFocus","bind","quranLogoContainer","require","resizeMode","separator","notifSettingBar","false","primary_disabled","true","onToggleNotif","marginVertical","STR_DAILY_REMINDER","allLangsContainer","renderLanguageItem","okButtonPressed","marginTop","marginBottom","lineHeight","alignSelf","color","mapStateToProps","mapDispatchToProps","StyleSheet","create","flex","justifyContent","alignItems","backgroundColor","borderColor","borderWidth","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius"],"sources":["C:/Users/Tysseer Harak/Desktop/Data/Code/React Native/Dawem/app/js/screens/ScreenSettings.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  reduxActionSetLanguage,\r\n  reduxActionSetNotifFlag,\r\n} from \"../redux/reduxActions\";\r\nimport {\r\n  Text,\r\n  StyleSheet,\r\n  View,\r\n  Image,\r\n  Dimensions,\r\n  I18nManager,\r\n  TouchableOpacity,\r\n  Switch,\r\n} from \"react-native\";\r\nimport * as strings from \"js/helpers/StringsManager\";\r\nimport StringsManager from \"js/helpers/StringsManager\";\r\nimport ActionBtn from \"app/components/ActionBtn\";\r\nimport * as Updates from \"expo-updates\";\r\nimport { useFocusEffect } from \"@react-navigation/native\";\r\n\r\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\r\nimport { colors } from \"../../constants\";\r\nimport EnFlag from \"assets/images/lang_en.png\";\r\nimport ArFlag from \"assets/images/lang_ar.png\";\r\nimport { getFontBasicStyle } from \"../helpers/scripts\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport * as Notifications from \"expo-notifications\";\r\n\r\nconst addDailyNotification = async (strMgr) => {\r\n  // const identifier1 = await Notifications.scheduleNotificationAsync({\r\n  //   content: {\r\n  //     title: strMgr.getStr(strings.DAILY_NOTIFICATION_TITLE),\r\n  //     body: strMgr.getStr(strings.DAILY_NOTIFICATION_BODY),\r\n  //     //  data: { data: \"goes here\" },\r\n  //   },\r\n  //   trigger: { seconds: 2, repeats: true },\r\n  // });\r\n\r\n  const identifier = await Notifications.scheduleNotificationAsync({\r\n    content: {\r\n      title: strMgr.getStr(strings.DAILY_NOTIFICATION_TITLE),\r\n      body: strMgr.getStr(strings.DAILY_NOTIFICATION_BODY),\r\n      //  data: { data: \"goes here\" },\r\n    },\r\n    trigger: { hour: 12, minute: 10, repeats: true },\r\n  });\r\n  return identifier;\r\n};\r\nasync function cancelNotifications(identifier) {\r\n  await Notifications.cancelScheduledNotificationAsync(identifier);\r\n}\r\nasync function cancelAllNotifications() {\r\n  await Notifications.cancelAllScheduledNotificationsAsync();\r\n}\r\n//  this.localNotificationId = triggerNotifications();\r\n//  cancelAllNotifications();\r\nconst langs = [\r\n  {\r\n    key: \"en\",\r\n    title: \"English\",\r\n  },\r\n  {\r\n    key: \"ar\",\r\n    title: \"العربية\",\r\n  },\r\n];\r\n\r\nfunction RefreshBadgesOnFocus({ onUpdate }) {\r\n  useFocusEffect(\r\n    React.useCallback(() => {\r\n      // Do something when the screen is focused\r\n      onUpdate();\r\n      return () => {\r\n        // Do something when the screen is unfocused\r\n        // Useful for cleanup functions\r\n      };\r\n    }, [])\r\n  );\r\n  return null;\r\n}\r\n\r\nconst ApplyAndRestartApp = async (fnreduxActionSetLanguage, newLang) => {\r\n  try {\r\n    await fnreduxActionSetLanguage(newLang);\r\n\r\n    setTimeout(function () {\r\n      I18nManager.forceRTL(newLang == \"ar\");\r\n      Updates.reloadAsync();\r\n    }, 600);\r\n\r\n    // let strMgr = new StringsManager();\r\n    // strMgr.setLanguage(newLang);\r\n    // alert(strMgr.getStr(strings.STR_RESTART_PROMPT));\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\nclass ScreenSettings extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.height = Dimensions.get(\"window\").height;\r\n    this.width = Dimensions.get(\"window\").width;\r\n    this.stringsManager = new StringsManager();\r\n    this.stringsManager.setLanguage(this.props.strLang);\r\n    this.originalLang = this.props.strLang;\r\n    this.state = {\r\n      selectedLang: this.props.strLang,\r\n      buttonTxt: this.stringsManager.getStr(strings.STR_SEL_LANGUAGE),\r\n      bNotifFlag: this.props.bDailyNotification,\r\n    };\r\n  }\r\n\r\n  languageHandler(lang) {\r\n    this.stringsManager.setLanguage(lang);\r\n    this.setState({\r\n      selectedLang: lang,\r\n      buttonTxt: this.stringsManager.getStr(strings.STR_SEL_LANGUAGE),\r\n    });\r\n  }\r\n  async okButtonPressed() {\r\n    let newLang = this.state.selectedLang;\r\n    await AsyncStorage.setItem(\"strLang\", newLang);\r\n    this.stringsManager.setLanguage(newLang);\r\n    // alert(this.stringsManager.getStr(strings.STR_RESTART_PROMPT));\r\n    ApplyAndRestartApp(this.props.reduxActionSetLanguage, newLang);\r\n  }\r\n  onFocus() {\r\n    this.stringsManager.setLanguage(this.props.strLang);\r\n    this.originalLang = this.props.strLang;\r\n    this.state = {\r\n      selectedLang: this.props.strLang,\r\n      buttonTxt: this.stringsManager.getStr(strings.STR_SEL_LANGUAGE),\r\n    };\r\n  }\r\n  renderLanguageItem(lang) {\r\n    return (\r\n      <TouchableOpacity\r\n        key={lang.key}\r\n        activeOpacity={0.7}\r\n        onPress={() => this.languageHandler(lang.key)}\r\n        style={styles.langContainer}\r\n      >\r\n        <View style={{ flexDirection: \"row\" }}>\r\n          <Image\r\n            source={lang.key == \"en\" ? EnFlag : ArFlag}\r\n            style={{\r\n              width: this.width / 10,\r\n              height: this.width / 10,\r\n              marginRight: this.width / 28,\r\n            }}\r\n          />\r\n          <Text style={this.getlangLabelTextStyle(lang.key)}>{lang.title}</Text>\r\n        </View>\r\n        {/* this.props.strLang */}\r\n        {this.state.selectedLang == lang.key ? (\r\n          <MaterialCommunityIcons\r\n            name=\"check\"\r\n            size={24}\r\n            color={colors.primary}\r\n          />\r\n        ) : (\r\n          <View />\r\n        )}\r\n      </TouchableOpacity>\r\n    );\r\n  }\r\n  onToggleNotif() {\r\n    let bNewDailyNotification = !this.state.bNotifFlag;\r\n    reduxActionSetNotifFlag(bNewDailyNotification);\r\n    cancelAllNotifications();\r\n    if (bNewDailyNotification) addDailyNotification(this.stringsManager);\r\n    this.setState({\r\n      bNotifFlag: bNewDailyNotification,\r\n    });\r\n  }\r\n  render() {\r\n    this.stringsManager.setLanguage(this.props.strLang);\r\n    return (\r\n      <View style={styles.mainContainer}>\r\n        <RefreshBadgesOnFocus onUpdate={this.onFocus.bind(this)} />\r\n        <View style={styles.quranLogoContainer}>\r\n          <Image\r\n            source={require(\"assets/images/Quran_logo.png\")}\r\n            style={{ resizeMode: \"contain\" }}\r\n          />\r\n        </View>\r\n        <View style={styles.separator} />\r\n\r\n        <View style={styles.notifSettingBar}>\r\n          <View style={{ flexDirection: \"row\" }}>\r\n            <Switch\r\n              trackColor={{\r\n                false: colors.primary_disabled,\r\n                true: colors.primary,\r\n              }}\r\n              thumbColor={this.state.bNotifFlag ? \"#ddd\" : \"#aaa\"}\r\n              ios_backgroundColor=\"#3e3e3e\"\r\n              onValueChange={this.onToggleNotif.bind(this)}\r\n              value={this.state.bNotifFlag}\r\n              style={{ marginVertical: 15 }}\r\n            />\r\n            <Text style={this.getlangLabelTextStyle(this.originalLang)}>\r\n              {this.stringsManager.getStr(strings.STR_DAILY_REMINDER)}\r\n            </Text>\r\n          </View>\r\n        </View>\r\n        <View style={styles.separator} />\r\n        <View style={styles.allLangsContainer}>\r\n          {this.renderLanguageItem(langs[0])}\r\n          <View style={styles.separator} />\r\n          {this.renderLanguageItem(langs[1])}\r\n        </View>\r\n\r\n        <ActionBtn\r\n          text={this.state.buttonTxt}\r\n          handler={this.okButtonPressed.bind(this)}\r\n          lang={this.state.selectedLang}\r\n          style={{\r\n            height: this.height / 12.5,\r\n            width: \"90%\",\r\n            marginTop: this.height / 46,\r\n            marginBottom: this.height / 37.5,\r\n          }}\r\n        />\r\n      </View>\r\n    );\r\n  }\r\n  getlangLabelTextStyle(strLang) {\r\n    return [\r\n      {\r\n        lineHeight: 35,\r\n        alignSelf: \"center\",\r\n        color: \"#0C3D11\",\r\n      },\r\n      getFontBasicStyle(strLang, false),\r\n    ];\r\n  }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  strLang: state.strLang,\r\n  bDailyNotification: state.bDailyNotification,\r\n});\r\nconst mapDispatchToProps = () => {\r\n  return {\r\n    reduxActionSetLanguage,\r\n    reduxActionSetNotifFlag,\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps())(ScreenSettings);\r\nconst styles = StyleSheet.create({\r\n  mainContainer: {\r\n    flex: 1,\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    backgroundColor: \"#EEEEEE\",\r\n  },\r\n  notifSettingBar: {\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-between\",\r\n    width: \"93%\",\r\n    height: 30,\r\n  },\r\n  quranLogoContainer: {\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n\r\n    height: \"42%\",\r\n    width: \"100%\",\r\n  },\r\n  allLangsContainer: {\r\n    width: \"100%\",\r\n    height: 200,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  langContainer: {\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-between\",\r\n    width: \"93%\",\r\n    height: 70,\r\n    // borderTopLeftRadius: 10,\r\n    // borderTopRightRadius: 10,\r\n    // borderBottomLeftRadius: 10,\r\n    // borderBottomRightRadius: 10,\r\n    // borderWidth: 2,\r\n\r\n    borderColor: \"#0B721EFF\",\r\n  },\r\n\r\n  separator: {\r\n    borderColor: \"#88888859\",\r\n    borderWidth: 1,\r\n    borderTopLeftRadius: 10,\r\n    borderTopRightRadius: 10,\r\n    borderBottomLeftRadius: 10,\r\n    borderBottomRightRadius: 10,\r\n    height: 2,\r\n    width: \"93%\",\r\n    marginVertical: 15,\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}