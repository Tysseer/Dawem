{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { EventEmitter, Platform, UnavailabilityError } from 'expo-modules-core';\nimport { PlaybackMixin, assertStatusValuesInBounds, getNativeSourceAndFullInitialStatusForLoadAsync, getUnloadedStatus } from \"../AV\";\nimport ExponentAV from \"../ExponentAV\";\nimport { throwIfAudioIsDisabled } from \"./AudioAvailability\";\nexport var Sound = function () {\n  function Sound() {\n    var _this = this;\n    _classCallCheck(this, Sound);\n    this._loaded = false;\n    this._loading = false;\n    this._key = null;\n    this._lastStatusUpdate = null;\n    this._lastStatusUpdateTime = null;\n    this._subscriptions = [];\n    this._eventEmitter = new EventEmitter(ExponentAV);\n    this._coalesceStatusUpdatesInMillis = 100;\n    this._onPlaybackStatusUpdate = null;\n    this._onMetadataUpdate = null;\n    this._onAudioSampleReceived = null;\n    this._internalStatusUpdateCallback = function (_ref) {\n      var key = _ref.key,\n        status = _ref.status;\n      if (_this._key === key) {\n        _this._callOnPlaybackStatusUpdateForNewStatus(status);\n      }\n    };\n    this._internalMetadataUpdateCallback = function (_ref2) {\n      var key = _ref2.key,\n        metadata = _ref2.metadata;\n      if (_this._key === key) {\n        _this._onMetadataUpdate == null ? void 0 : _this._onMetadataUpdate(metadata);\n      }\n    };\n    this._internalErrorCallback = function (_ref3) {\n      var key = _ref3.key,\n        error = _ref3.error;\n      if (_this._key === key) {\n        _this._errorCallback(error);\n      }\n    };\n    this._errorCallback = function (error) {\n      _this._clearSubscriptions();\n      _this._loaded = false;\n      _this._key = null;\n      _this._callOnPlaybackStatusUpdateForNewStatus(getUnloadedStatus(error));\n    };\n    this.getStatusAsync = function _callee() {\n      var status;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!_this._loaded) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function () {\n                return ExponentAV.getStatusForSound(_this._key);\n              }));\n            case 2:\n              status = getUnloadedStatus();\n              _this._callOnPlaybackStatusUpdateForNewStatus(status);\n              return _context.abrupt(\"return\", status);\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  }\n  _createClass(Sound, [{\n    key: \"_callOnPlaybackStatusUpdateForNewStatus\",\n    value: function _callOnPlaybackStatusUpdateForNewStatus(status) {\n      var shouldDismissBasedOnCoalescing = this._lastStatusUpdateTime && JSON.stringify(status) === this._lastStatusUpdate && Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;\n      if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {\n        this._onPlaybackStatusUpdate(status);\n        this._lastStatusUpdateTime = new Date();\n        this._lastStatusUpdate = JSON.stringify(status);\n      }\n    }\n  }, {\n    key: \"_performOperationAndHandleStatusAsync\",\n    value: function _performOperationAndHandleStatusAsync(operation) {\n      var status;\n      return _regeneratorRuntime.async(function _performOperationAndHandleStatusAsync$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              throwIfAudioIsDisabled();\n              if (!this._loaded) {\n                _context2.next = 9;\n                break;\n              }\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(operation());\n            case 4:\n              status = _context2.sent;\n              this._callOnPlaybackStatusUpdateForNewStatus(status);\n              return _context2.abrupt(\"return\", status);\n            case 9:\n              throw new Error('Cannot complete operation because sound is not loaded.');\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"_updateAudioSampleReceivedCallback\",\n    value: function _updateAudioSampleReceivedCallback() {\n      if (global.__EXAV_setOnAudioSampleReceivedCallback == null) {\n        if (Platform.OS === 'ios') {\n          throw new Error('Failed to set Audio Sample Buffer callback! The JSI function seems to not be installed correctly.');\n        } else {\n          throw new UnavailabilityError('expo-av', 'setOnAudioSampleReceived');\n        }\n      }\n      if (this._key == null) {\n        throw new Error('Cannot set Audio Sample Buffer callback when the Sound instance has not been successfully loaded/initialized!');\n      }\n      if (typeof this._key !== 'number') {\n        throw new Error(\"Cannot set Audio Sample Buffer callback when Sound instance key is of type \" + typeof this._key + \"! (expected: number)\");\n      }\n      global.__EXAV_setOnAudioSampleReceivedCallback(this._key, this._onAudioSampleReceived);\n    }\n  }, {\n    key: \"_subscribeToNativeEvents\",\n    value: function _subscribeToNativeEvents() {\n      if (this._loaded) {\n        this._subscriptions.push(this._eventEmitter.addListener('didUpdatePlaybackStatus', this._internalStatusUpdateCallback), this._eventEmitter.addListener('didUpdateMetadata', this._internalMetadataUpdateCallback));\n        this._subscriptions.push(this._eventEmitter.addListener('ExponentAV.onError', this._internalErrorCallback));\n      }\n    }\n  }, {\n    key: \"_clearSubscriptions\",\n    value: function _clearSubscriptions() {\n      this._subscriptions.forEach(function (e) {\n        return e.remove();\n      });\n      this._subscriptions = [];\n    }\n  }, {\n    key: \"setOnPlaybackStatusUpdate\",\n    value: function setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n      this.getStatusAsync();\n    }\n  }, {\n    key: \"setOnMetadataUpdate\",\n    value: function setOnMetadataUpdate(onMetadataUpdate) {\n      this._onMetadataUpdate = onMetadataUpdate;\n    }\n  }, {\n    key: \"setOnAudioSampleReceived\",\n    value: function setOnAudioSampleReceived(callback) {\n      this._onAudioSampleReceived = callback;\n      if (this._key != null) {\n        this._updateAudioSampleReceivedCallback();\n      }\n    }\n  }, {\n    key: \"loadAsync\",\n    value: function loadAsync(source) {\n      var _this2 = this;\n      var initialStatus,\n        downloadFirst,\n        _await$getNativeSourc,\n        nativeSource,\n        fullInitialStatus,\n        _args3 = arguments;\n      return _regeneratorRuntime.async(function loadAsync$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              initialStatus = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n              downloadFirst = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : true;\n              throwIfAudioIsDisabled();\n              if (!this._loading) {\n                _context3.next = 5;\n                break;\n              }\n              throw new Error('The Sound is already loading.');\n            case 5:\n              if (this._loaded) {\n                _context3.next = 15;\n                break;\n              }\n              this._loading = true;\n              _context3.next = 9;\n              return _regeneratorRuntime.awrap(getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst));\n            case 9:\n              _await$getNativeSourc = _context3.sent;\n              nativeSource = _await$getNativeSourc.nativeSource;\n              fullInitialStatus = _await$getNativeSourc.fullInitialStatus;\n              return _context3.abrupt(\"return\", new Promise(function (resolve, reject) {\n                var loadSuccess = function loadSuccess(result) {\n                  var _result = _slicedToArray(result, 2),\n                    key = _result[0],\n                    status = _result[1];\n                  _this2._key = key;\n                  _this2._loaded = true;\n                  _this2._loading = false;\n                  _this2._subscribeToNativeEvents();\n                  _this2._callOnPlaybackStatusUpdateForNewStatus(status);\n                  resolve(status);\n                };\n                var loadError = function loadError(error) {\n                  _this2._loading = false;\n                  reject(error);\n                };\n                ExponentAV.loadForSound(nativeSource, fullInitialStatus).then(loadSuccess).catch(loadError);\n              }));\n            case 15:\n              throw new Error('The Sound is already loaded.');\n            case 16:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"unloadAsync\",\n    value: function unloadAsync() {\n      var key, status;\n      return _regeneratorRuntime.async(function unloadAsync$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!this._loaded) {\n                _context4.next = 12;\n                break;\n              }\n              this._loaded = false;\n              key = this._key;\n              this._key = null;\n              _context4.next = 6;\n              return _regeneratorRuntime.awrap(ExponentAV.unloadForSound(key));\n            case 6:\n              status = _context4.sent;\n              this._callOnPlaybackStatusUpdateForNewStatus(status);\n              this._clearSubscriptions();\n              return _context4.abrupt(\"return\", status);\n            case 12:\n              return _context4.abrupt(\"return\", this.getStatusAsync());\n            case 13:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"setStatusAsync\",\n    value: function setStatusAsync(status) {\n      var _this3 = this;\n      return _regeneratorRuntime.async(function setStatusAsync$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              assertStatusValuesInBounds(status);\n              return _context5.abrupt(\"return\", this._performOperationAndHandleStatusAsync(function () {\n                return ExponentAV.setStatusForSound(_this3._key, status);\n              }));\n            case 2:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"replayAsync\",\n    value: function replayAsync() {\n      var _this4 = this;\n      var status,\n        _args6 = arguments;\n      return _regeneratorRuntime.async(function replayAsync$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              status = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {};\n              if (!(status.positionMillis && status.positionMillis !== 0)) {\n                _context6.next = 3;\n                break;\n              }\n              throw new Error('Requested position after replay has to be 0.');\n            case 3:\n              return _context6.abrupt(\"return\", this._performOperationAndHandleStatusAsync(function () {\n                return ExponentAV.replaySound(_this4._key, _objectSpread(_objectSpread({}, status), {}, {\n                  positionMillis: 0,\n                  shouldPlay: true\n                }));\n              }));\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n  return Sound;\n}();\nSound.create = function _callee2(source) {\n  var initialStatus,\n    onPlaybackStatusUpdate,\n    downloadFirst,\n    _args7 = arguments;\n  return _regeneratorRuntime.async(function _callee2$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          initialStatus = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};\n          onPlaybackStatusUpdate = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : null;\n          downloadFirst = _args7.length > 3 && _args7[3] !== undefined ? _args7[3] : true;\n          console.warn(\"Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name\");\n          return _context7.abrupt(\"return\", Sound.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst));\n        case 5:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nSound.createAsync = function _callee3(source) {\n  var initialStatus,\n    onPlaybackStatusUpdate,\n    downloadFirst,\n    sound,\n    status,\n    _args8 = arguments;\n  return _regeneratorRuntime.async(function _callee3$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          initialStatus = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};\n          onPlaybackStatusUpdate = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : null;\n          downloadFirst = _args8.length > 3 && _args8[3] !== undefined ? _args8[3] : true;\n          sound = new Sound();\n          sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n          _context8.next = 7;\n          return _regeneratorRuntime.awrap(sound.loadAsync(source, initialStatus, downloadFirst));\n        case 7:\n          status = _context8.sent;\n          return _context8.abrupt(\"return\", {\n            sound: sound,\n            status: status\n          });\n        case 9:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n_extends(Sound.prototype, PlaybackMixin);","map":{"version":3,"mappings":"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","names":["EventEmitter","Platform","UnavailabilityError","PlaybackMixin","assertStatusValuesInBounds","getNativeSourceAndFullInitialStatusForLoadAsync","getUnloadedStatus","ExponentAV","throwIfAudioIsDisabled","Sound","_loaded","_loading","_key","_lastStatusUpdate","_lastStatusUpdateTime","_subscriptions","_eventEmitter","_coalesceStatusUpdatesInMillis","_onPlaybackStatusUpdate","_onMetadataUpdate","_onAudioSampleReceived","_internalStatusUpdateCallback","key","status","_callOnPlaybackStatusUpdateForNewStatus","_internalMetadataUpdateCallback","metadata","_internalErrorCallback","error","_errorCallback","_clearSubscriptions","getStatusAsync","_performOperationAndHandleStatusAsync","getStatusForSound","shouldDismissBasedOnCoalescing","JSON","stringify","Date","now","getTime","operation","Error","global","__EXAV_setOnAudioSampleReceivedCallback","OS","push","addListener","forEach","e","remove","onPlaybackStatusUpdate","onMetadataUpdate","callback","_updateAudioSampleReceivedCallback","source","initialStatus","downloadFirst","nativeSource","fullInitialStatus","Promise","resolve","reject","loadSuccess","result","_subscribeToNativeEvents","loadError","loadForSound","then","catch","unloadForSound","setStatusForSound","positionMillis","replaySound","shouldPlay","create","console","warn","createAsync","sound","setOnPlaybackStatusUpdate","loadAsync","prototype"],"sourceRoot":"","sources":["../../src/Audio/Sound.ts"],"sourcesContent":["import { EventEmitter, Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport {\n  Playback,\n  PlaybackMixin,\n  AVPlaybackSource,\n  AVMetadata,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getUnloadedStatus,\n} from '../AV';\nimport { PitchCorrectionQuality } from '../Audio';\nimport ExponentAV from '../ExponentAV';\nimport { throwIfAudioIsDisabled } from './AudioAvailability';\n\nexport type AudioChannel = {\n  /**\n   * All samples for this specific Audio Channel in PCM Buffer format (-1 to 1).\n   */\n  frames: number[];\n};\n\n/**\n * A single sample from an audio source. The sample contains all frames (PCM Buffer values) for each channel of the audio,\n * so if the audio is _stereo_ (interleaved), there will be two channels, one for left and one for right audio.\n */\nexport type AudioSample = {\n  /**\n   * Data from each Channel in PCM Buffer format.\n   */\n  channels: AudioChannel[];\n  /**\n   * The timestamp of this sample, relative to the Audio Track's timeline in seconds.\n   */\n  timestamp: number;\n};\n\ntype AudioInstance = number | HTMLMediaElement | null;\ntype AudioSampleCallback = ((sample: AudioSample) => void) | null;\n\ndeclare global {\n  interface Global {\n    __EXAV_setOnAudioSampleReceivedCallback:\n      | ((key: number, callback: AudioSampleCallback) => void)\n      | undefined;\n  }\n}\n\nexport class Sound implements Playback {\n  _loaded: boolean = false;\n  _loading: boolean = false;\n  _key: AudioInstance = null;\n  _lastStatusUpdate: string | null = null;\n  _lastStatusUpdateTime: Date | null = null;\n  _subscriptions: { remove: () => void }[] = [];\n  _eventEmitter: EventEmitter = new EventEmitter(ExponentAV);\n  _coalesceStatusUpdatesInMillis: number = 100;\n  _onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null;\n  _onMetadataUpdate: ((metadata: AVMetadata) => void) | null = null;\n  _onAudioSampleReceived: AudioSampleCallback = null;\n\n  /** @deprecated Use `Sound.createAsync()` instead */\n  static create = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null,\n    downloadFirst: boolean = true\n  ): Promise<{ sound: Sound; status: AVPlaybackStatus }> => {\n    console.warn(\n      `Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name`\n    );\n    return Sound.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst);\n  };\n\n  static createAsync = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null,\n    downloadFirst: boolean = true\n  ): Promise<{ sound: Sound; status: AVPlaybackStatus }> => {\n    const sound: Sound = new Sound();\n    sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n    const status: AVPlaybackStatus = await sound.loadAsync(source, initialStatus, downloadFirst);\n    return { sound, status };\n  };\n\n  // Internal methods\n\n  _callOnPlaybackStatusUpdateForNewStatus(status: AVPlaybackStatus) {\n    const shouldDismissBasedOnCoalescing =\n      this._lastStatusUpdateTime &&\n      JSON.stringify(status) === this._lastStatusUpdate &&\n      Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;\n\n    if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {\n      this._onPlaybackStatusUpdate(status);\n      this._lastStatusUpdateTime = new Date();\n      this._lastStatusUpdate = JSON.stringify(status);\n    }\n  }\n\n  async _performOperationAndHandleStatusAsync(\n    operation: () => Promise<AVPlaybackStatus>\n  ): Promise<AVPlaybackStatus> {\n    throwIfAudioIsDisabled();\n    if (this._loaded) {\n      const status = await operation();\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n      return status;\n    } else {\n      throw new Error('Cannot complete operation because sound is not loaded.');\n    }\n  }\n\n  private _updateAudioSampleReceivedCallback() {\n    if (global.__EXAV_setOnAudioSampleReceivedCallback == null) {\n      if (Platform.OS === 'ios') {\n        throw new Error(\n          'Failed to set Audio Sample Buffer callback! The JSI function seems to not be installed correctly.'\n        );\n      } else {\n        throw new UnavailabilityError('expo-av', 'setOnAudioSampleReceived');\n      }\n    }\n    if (this._key == null) {\n      throw new Error(\n        'Cannot set Audio Sample Buffer callback when the Sound instance has not been successfully loaded/initialized!'\n      );\n    }\n    if (typeof this._key !== 'number') {\n      throw new Error(\n        `Cannot set Audio Sample Buffer callback when Sound instance key is of type ${typeof this\n          ._key}! (expected: number)`\n      );\n    }\n\n    global.__EXAV_setOnAudioSampleReceivedCallback(this._key, this._onAudioSampleReceived);\n  }\n\n  _internalStatusUpdateCallback = ({\n    key,\n    status,\n  }: {\n    key: AudioInstance;\n    status: AVPlaybackStatus;\n  }) => {\n    if (this._key === key) {\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n    }\n  };\n\n  _internalMetadataUpdateCallback = ({\n    key,\n    metadata,\n  }: {\n    key: AudioInstance;\n    metadata: AVMetadata;\n  }) => {\n    if (this._key === key) {\n      this._onMetadataUpdate?.(metadata);\n    }\n  };\n\n  _internalErrorCallback = ({ key, error }: { key: AudioInstance; error: string }) => {\n    if (this._key === key) {\n      this._errorCallback(error);\n    }\n  };\n\n  // TODO: We can optimize by only using time observer on native if (this._onPlaybackStatusUpdate).\n  _subscribeToNativeEvents() {\n    if (this._loaded) {\n      this._subscriptions.push(\n        this._eventEmitter.addListener(\n          'didUpdatePlaybackStatus',\n          this._internalStatusUpdateCallback\n        ),\n        this._eventEmitter.addListener('didUpdateMetadata', this._internalMetadataUpdateCallback)\n      );\n\n      this._subscriptions.push(\n        this._eventEmitter.addListener('ExponentAV.onError', this._internalErrorCallback)\n      );\n    }\n  }\n\n  _clearSubscriptions() {\n    this._subscriptions.forEach((e) => e.remove());\n    this._subscriptions = [];\n  }\n\n  _errorCallback = (error: string) => {\n    this._clearSubscriptions();\n    this._loaded = false;\n    this._key = null;\n    this._callOnPlaybackStatusUpdateForNewStatus(getUnloadedStatus(error));\n  };\n\n  // ### Unified playback API ### (consistent with Video.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  // Get status API\n\n  getStatusAsync = async (): Promise<AVPlaybackStatus> => {\n    if (this._loaded) {\n      return this._performOperationAndHandleStatusAsync(() =>\n        ExponentAV.getStatusForSound(this._key)\n      );\n    }\n    const status: AVPlaybackStatus = getUnloadedStatus();\n    this._callOnPlaybackStatusUpdateForNewStatus(status);\n    return status;\n  };\n\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n\n  setOnMetadataUpdate(onMetadataUpdate: (AVMetadata) => void) {\n    this._onMetadataUpdate = onMetadataUpdate;\n  }\n\n  /**\n   * Sets a function to be called during playback, receiving the audio sample as parameter.\n   * @param callback a function taking the {@link AudioSample} as parameter\n   */\n  setOnAudioSampleReceived(callback: AudioSampleCallback) {\n    this._onAudioSampleReceived = callback;\n    if (this._key != null) {\n      this._updateAudioSampleReceivedCallback();\n    }\n  }\n\n  // Loading / unloading API\n\n  async loadAsync(\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<AVPlaybackStatus> {\n    throwIfAudioIsDisabled();\n    if (this._loading) {\n      throw new Error('The Sound is already loading.');\n    }\n    if (!this._loaded) {\n      this._loading = true;\n\n      const { nativeSource, fullInitialStatus } =\n        await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n\n      // This is a workaround, since using load with resolve / reject seems to not work.\n      return new Promise<AVPlaybackStatus>((resolve, reject) => {\n        const loadSuccess = (result: [AudioInstance, AVPlaybackStatus]) => {\n          const [key, status] = result;\n          this._key = key;\n          this._loaded = true;\n          this._loading = false;\n          this._subscribeToNativeEvents();\n          this._callOnPlaybackStatusUpdateForNewStatus(status);\n          resolve(status);\n        };\n\n        const loadError = (error: Error) => {\n          this._loading = false;\n          reject(error);\n        };\n\n        ExponentAV.loadForSound(nativeSource, fullInitialStatus).then(loadSuccess).catch(loadError);\n      });\n    } else {\n      throw new Error('The Sound is already loaded.');\n    }\n  }\n\n  async unloadAsync(): Promise<AVPlaybackStatus> {\n    if (this._loaded) {\n      this._loaded = false;\n      const key = this._key;\n      this._key = null;\n      const status = await ExponentAV.unloadForSound(key);\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n      this._clearSubscriptions();\n      return status;\n    } else {\n      return this.getStatusAsync(); // Automatically calls onPlaybackStatusUpdate.\n    }\n  }\n\n  // Set status API (only available while isLoaded = true)\n\n  async setStatusAsync(status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus> {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync(() =>\n      ExponentAV.setStatusForSound(this._key, status)\n    );\n  }\n\n  async replayAsync(status: AVPlaybackStatusToSet = {}): Promise<AVPlaybackStatus> {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync(() =>\n      ExponentAV.replaySound(this._key, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  }\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<AVPlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ) => Promise<AVPlaybackStatus>;\n  pauseAsync!: () => Promise<AVPlaybackStatus>;\n  stopAsync!: () => Promise<AVPlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ) => Promise<AVPlaybackStatus>;\n  setRateAsync!: (\n    rate: number,\n    shouldCorrectPitch: boolean,\n    pitchCorrectionQuality?: PitchCorrectionQuality\n  ) => Promise<AVPlaybackStatus>;\n  setVolumeAsync!: (volume: number) => Promise<AVPlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<AVPlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<AVPlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<AVPlaybackStatus>;\n}\n\nObject.assign(Sound.prototype, PlaybackMixin);\n"]},"metadata":{},"sourceType":"module"}