{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport * as React from 'react';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { assertStatusValuesInBounds, getNativeSourceAndFullInitialStatusForLoadAsync, getNativeSourceFromSource, getUnloadedStatus, PlaybackMixin } from \"./AV\";\nimport ExpoVideoManager from \"./ExpoVideoManager\";\nimport ExponentAV from \"./ExponentAV\";\nimport ExponentVideo from \"./ExponentVideo\";\nimport { ResizeMode } from \"./Video.types\";\nexport { ResizeMode };\nexport var FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = 0;\nexport var FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = 1;\nexport var FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = 2;\nexport var FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = 3;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\nvar _STYLES = StyleSheet.create({\n  base: {\n    overflow: 'hidden'\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain'\n  },\n  video: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0\n  }\n});\nvar ExpoVideoManagerConstants = ExpoVideoManager;\nvar ExpoVideoViewManager = ExpoVideoManager;\nvar Video = function (_React$Component) {\n  _inherits(Video, _React$Component);\n  var _super = _createSuper(Video);\n  function Video(props) {\n    var _this;\n    _classCallCheck(this, Video);\n    _this = _super.call(this, props);\n    _this._nativeRef = React.createRef();\n    _this._onPlaybackStatusUpdate = null;\n    _this._handleNewStatus = function (status) {\n      if (_this.state.showPoster && status.isLoaded && (status.isPlaying || status.positionMillis !== 0)) {\n        _this.setState({\n          showPoster: false\n        });\n      }\n      if (_this.props.onPlaybackStatusUpdate) {\n        _this.props.onPlaybackStatusUpdate(status);\n      }\n      if (_this._onPlaybackStatusUpdate) {\n        _this._onPlaybackStatusUpdate(status);\n      }\n    };\n    _this._performOperationAndHandleStatusAsync = function _callee(operation) {\n      var video, handle, status;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              video = _this._nativeRef.current;\n              if (video) {\n                _context.next = 3;\n                break;\n              }\n              throw new Error(\"Cannot complete operation because the Video component has not yet loaded\");\n            case 3:\n              handle = findNodeHandle(_this._nativeRef.current);\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(operation(handle));\n            case 6:\n              status = _context.sent;\n              _this._handleNewStatus(status);\n              return _context.abrupt(\"return\", status);\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n    _this._setFullscreen = function _callee2(value) {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n                return ExpoVideoViewManager.setFullscreen(tag, value);\n              }));\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n    _this.presentFullscreenPlayer = function _callee3() {\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", _this._setFullscreen(true));\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n    _this.presentIOSFullscreenPlayer = function () {\n      console.warn(\"You're using `presentIOSFullscreenPlayer`. Please migrate your code to use `presentFullscreenPlayer` instead.\");\n      return _this.presentFullscreenPlayer();\n    };\n    _this.presentFullscreenPlayerAsync = function _callee4() {\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(_this.presentFullscreenPlayer());\n            case 2:\n              return _context4.abrupt(\"return\", _context4.sent);\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n    _this.dismissFullscreenPlayer = function _callee5() {\n      return _regeneratorRuntime.async(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              return _context5.abrupt(\"return\", _this._setFullscreen(false));\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n    _this.dismissIOSFullscreenPlayer = function () {\n      console.warn(\"You're using `dismissIOSFullscreenPlayer`. Please migrate your code to use `dismissFullscreenPlayer` instead.\");\n      _this.dismissFullscreenPlayer();\n    };\n    _this.getStatusAsync = function _callee6() {\n      return _regeneratorRuntime.async(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              return _context6.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n                return ExponentAV.getStatusForVideo(tag);\n              }));\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n    _this.loadAsync = function _callee7(source) {\n      var initialStatus,\n        downloadFirst,\n        _await$getNativeSourc,\n        nativeSource,\n        fullInitialStatus,\n        _args7 = arguments;\n      return _regeneratorRuntime.async(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              initialStatus = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};\n              downloadFirst = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : true;\n              _context7.next = 4;\n              return _regeneratorRuntime.awrap(getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst));\n            case 4:\n              _await$getNativeSourc = _context7.sent;\n              nativeSource = _await$getNativeSourc.nativeSource;\n              fullInitialStatus = _await$getNativeSourc.fullInitialStatus;\n              return _context7.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n                return ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus);\n              }));\n            case 8:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n    _this.unloadAsync = function _callee8() {\n      return _regeneratorRuntime.async(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              return _context8.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n                return ExponentAV.unloadForVideo(tag);\n              }));\n            case 1:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n    _this.setStatusAsync = function _callee9(status) {\n      return _regeneratorRuntime.async(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              assertStatusValuesInBounds(status);\n              return _context9.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n                return ExponentAV.setStatusForVideo(tag, status);\n              }));\n            case 2:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n    _this.replayAsync = function _callee10() {\n      var status,\n        _args10 = arguments;\n      return _regeneratorRuntime.async(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              status = _args10.length > 0 && _args10[0] !== undefined ? _args10[0] : {};\n              if (!(status.positionMillis && status.positionMillis !== 0)) {\n                _context10.next = 3;\n                break;\n              }\n              throw new Error('Requested position after replay has to be 0.');\n            case 3:\n              return _context10.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n                return ExponentAV.replayVideo(tag, _objectSpread(_objectSpread({}, status), {}, {\n                  positionMillis: 0,\n                  shouldPlay: true\n                }));\n              }));\n            case 4:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n    _this._nativeOnPlaybackStatusUpdate = function (event) {\n      _this._handleNewStatus(event.nativeEvent);\n    };\n    _this._nativeOnLoadStart = function () {\n      if (_this.props.onLoadStart) {\n        _this.props.onLoadStart();\n      }\n    };\n    _this._nativeOnLoad = function (event) {\n      if (_this.props.onLoad) {\n        _this.props.onLoad(event.nativeEvent);\n      }\n      _this._handleNewStatus(event.nativeEvent);\n    };\n    _this._nativeOnError = function (event) {\n      var error = event.nativeEvent.error;\n      if (_this.props.onError) {\n        _this.props.onError(error);\n      }\n      _this._handleNewStatus(getUnloadedStatus(error));\n    };\n    _this._nativeOnReadyForDisplay = function (event) {\n      if (_this.props.onReadyForDisplay) {\n        _this.props.onReadyForDisplay(event.nativeEvent);\n      }\n    };\n    _this._nativeOnFullscreenUpdate = function (event) {\n      if (_this.props.onIOSFullscreenUpdate && _this.props.onFullscreenUpdate) {\n        console.warn(\"You've supplied both `onIOSFullscreenUpdate` and `onFullscreenUpdate`. You're going to receive updates on both the callbacks.\");\n      } else if (_this.props.onIOSFullscreenUpdate) {\n        console.warn(\"You're using `onIOSFullscreenUpdate`. Please migrate your code to use `onFullscreenUpdate` instead.\");\n      }\n      if (_this.props.onIOSFullscreenUpdate) {\n        _this.props.onIOSFullscreenUpdate(event.nativeEvent);\n      }\n      if (_this.props.onFullscreenUpdate) {\n        _this.props.onFullscreenUpdate(event.nativeEvent);\n      }\n    };\n    _this._renderPoster = function () {\n      return _this.props.usePoster && _this.state.showPoster ? React.createElement(Image, {\n        style: [_STYLES.poster, _this.props.posterStyle],\n        source: _this.props.posterSource\n      }) : null;\n    };\n    _this.state = {\n      showPoster: !!props.usePoster\n    };\n    return _this;\n  }\n  _createClass(Video, [{\n    key: \"setNativeProps\",\n    value: function setNativeProps(nativeProps) {\n      var nativeVideo = this._nativeRef.current;\n      if (!nativeVideo) throw new Error(\"native video reference is not defined.\");\n      nativeVideo.setNativeProps(nativeProps);\n    }\n  }, {\n    key: \"setOnPlaybackStatusUpdate\",\n    value: function setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n      this.getStatusAsync();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var source = getNativeSourceFromSource(this.props.source) || undefined;\n      var nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;\n      if (this.props.resizeMode) {\n        var resizeMode = this.props.resizeMode;\n        if (resizeMode === ResizeMode.STRETCH) {\n          nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;\n        } else if (resizeMode === ResizeMode.CONTAIN) {\n          nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;\n        } else if (resizeMode === ResizeMode.COVER) {\n          nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;\n        }\n      }\n      var status = _objectSpread({}, this.props.status);\n      ['progressUpdateIntervalMillis', 'positionMillis', 'shouldPlay', 'rate', 'shouldCorrectPitch', 'volume', 'isMuted', 'isLooping'].forEach(function (prop) {\n        if (prop in _this2.props) {\n          status[prop] = _this2.props[prop];\n        }\n      });\n      var nativeProps = _objectSpread(_objectSpread({}, omit(this.props, ['source', 'onPlaybackStatusUpdate', 'usePoster', 'posterSource', 'posterStyle'].concat(_toConsumableArray(Object.keys(status))))), {}, {\n        style: StyleSheet.flatten([_STYLES.base, this.props.style]),\n        source: source,\n        resizeMode: nativeResizeMode,\n        status: status,\n        onStatusUpdate: this._nativeOnPlaybackStatusUpdate,\n        onLoadStart: this._nativeOnLoadStart,\n        onLoad: this._nativeOnLoad,\n        onError: this._nativeOnError,\n        onReadyForDisplay: this._nativeOnReadyForDisplay,\n        onFullscreenUpdate: this._nativeOnFullscreenUpdate\n      });\n      return React.createElement(View, {\n        style: nativeProps.style,\n        pointerEvents: \"box-none\"\n      }, React.createElement(ExponentVideo, _objectSpread(_objectSpread({\n        ref: this._nativeRef\n      }, nativeProps), {}, {\n        style: _STYLES.video\n      })), this._renderPoster());\n    }\n  }]);\n  return Video;\n}(React.Component);\nVideo.RESIZE_MODE_CONTAIN = ResizeMode.CONTAIN;\nVideo.RESIZE_MODE_COVER = ResizeMode.COVER;\nVideo.RESIZE_MODE_STRETCH = ResizeMode.STRETCH;\nVideo.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nVideo.IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nVideo.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nVideo.IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\nVideo.FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nVideo.FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nVideo.FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nVideo.FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\nexport { Video as default };\nfunction omit(props, propNames) {\n  var copied = _objectSpread({}, props);\n  for (var _iterator = _createForOfIteratorHelperLoose(propNames), _step; !(_step = _iterator()).done;) {\n    var propName = _step.value;\n    delete copied[propName];\n  }\n  return copied;\n}\n_extends(Video.prototype, PlaybackMixin);","map":{"version":3,"mappings":"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","names":["React","assertStatusValuesInBounds","getNativeSourceAndFullInitialStatusForLoadAsync","getNativeSourceFromSource","getUnloadedStatus","PlaybackMixin","ExpoVideoManager","ExponentAV","ExponentVideo","ResizeMode","FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT","FULLSCREEN_UPDATE_PLAYER_DID_PRESENT","FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS","FULLSCREEN_UPDATE_PLAYER_DID_DISMISS","IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT","IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT","IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS","IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS","_STYLES","StyleSheet","create","base","overflow","poster","position","left","top","right","bottom","resizeMode","video","ExpoVideoManagerConstants","ExpoVideoViewManager","Video","props","_nativeRef","createRef","_onPlaybackStatusUpdate","_handleNewStatus","status","state","showPoster","isLoaded","isPlaying","positionMillis","setState","onPlaybackStatusUpdate","_performOperationAndHandleStatusAsync","operation","current","Error","handle","findNodeHandle","_setFullscreen","value","tag","setFullscreen","presentFullscreenPlayer","presentIOSFullscreenPlayer","console","warn","presentFullscreenPlayerAsync","dismissFullscreenPlayer","dismissIOSFullscreenPlayer","getStatusAsync","getStatusForVideo","loadAsync","source","initialStatus","downloadFirst","nativeSource","fullInitialStatus","loadForVideo","unloadAsync","unloadForVideo","setStatusAsync","setStatusForVideo","replayAsync","replayVideo","shouldPlay","_nativeOnPlaybackStatusUpdate","event","nativeEvent","_nativeOnLoadStart","onLoadStart","_nativeOnLoad","onLoad","_nativeOnError","error","onError","_nativeOnReadyForDisplay","onReadyForDisplay","_nativeOnFullscreenUpdate","onIOSFullscreenUpdate","onFullscreenUpdate","_renderPoster","usePoster","Image","style","posterStyle","posterSource","nativeProps","nativeVideo","setNativeProps","undefined","nativeResizeMode","ScaleNone","STRETCH","ScaleToFill","CONTAIN","ScaleAspectFit","COVER","ScaleAspectFill","forEach","prop","omit","Object","keys","flatten","onStatusUpdate","View","pointerEvents","ref","Component","RESIZE_MODE_CONTAIN","RESIZE_MODE_COVER","RESIZE_MODE_STRETCH","propNames","copied","propName","prototype"],"sourceRoot":"","sources":["../src/Video.tsx"],"sourcesContent":["import * as React from 'react';\nimport { findNodeHandle, Image, NativeMethods, StyleSheet, View } from 'react-native';\n\nimport {\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getNativeSourceFromSource,\n  getUnloadedStatus,\n  Playback,\n  PlaybackMixin,\n  AVPlaybackSource,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  AVPlaybackNativeSource,\n} from './AV';\nimport ExpoVideoManager from './ExpoVideoManager';\nimport ExponentAV from './ExponentAV';\nimport ExponentVideo from './ExponentVideo';\nimport {\n  ExponentVideoComponent,\n  VideoFullscreenUpdateEvent,\n  VideoNativeProps,\n  VideoNaturalSize,\n  VideoProps,\n  VideoReadyForDisplayEvent,\n  ResizeMode,\n  VideoState,\n} from './Video.types';\n\nexport {\n  ExponentVideoComponent,\n  VideoFullscreenUpdateEvent,\n  VideoNativeProps,\n  VideoNaturalSize,\n  VideoProps,\n  VideoReadyForDisplayEvent,\n  ResizeMode,\n  VideoState,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  AVPlaybackNativeSource,\n};\n\nexport const FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = 0;\nexport const FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = 1;\nexport const FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = 2;\nexport const FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = 3;\n\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\nconst _STYLES = StyleSheet.create({\n  base: {\n    overflow: 'hidden',\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain',\n  },\n  video: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n\n// On a real device UIManager should be present, however when running offline tests with jest-expo\n// we have to use the provided native module mock to access constants\nconst ExpoVideoManagerConstants = ExpoVideoManager;\nconst ExpoVideoViewManager = ExpoVideoManager;\n\nexport default class Video extends React.Component<VideoProps, VideoState> implements Playback {\n  static RESIZE_MODE_CONTAIN = ResizeMode.CONTAIN;\n  static RESIZE_MODE_COVER = ResizeMode.COVER;\n  static RESIZE_MODE_STRETCH = ResizeMode.STRETCH;\n\n  static IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\n  static IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\n  static IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\n  static IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\n  static FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\n  static FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\n  static FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\n  static FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\n  _nativeRef = React.createRef<InstanceType<ExponentVideoComponent> & NativeMethods>();\n  _onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null;\n\n  // componentOrHandle: null | number | React.Component<any, any> | React.ComponentClass<any>\n\n  constructor(props: VideoProps) {\n    super(props);\n    this.state = {\n      showPoster: !!props.usePoster,\n    };\n  }\n\n  setNativeProps(nativeProps: VideoNativeProps) {\n    const nativeVideo = this._nativeRef.current;\n    if (!nativeVideo) throw new Error(`native video reference is not defined.`);\n    nativeVideo.setNativeProps(nativeProps);\n  }\n\n  // Internal methods\n\n  _handleNewStatus = (status: AVPlaybackStatus) => {\n    if (\n      this.state.showPoster &&\n      status.isLoaded &&\n      (status.isPlaying || status.positionMillis !== 0)\n    ) {\n      this.setState({ showPoster: false });\n    }\n\n    if (this.props.onPlaybackStatusUpdate) {\n      this.props.onPlaybackStatusUpdate(status);\n    }\n    if (this._onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate(status);\n    }\n  };\n\n  _performOperationAndHandleStatusAsync = async (\n    operation: (tag: number) => Promise<AVPlaybackStatus>\n  ): Promise<AVPlaybackStatus> => {\n    const video = this._nativeRef.current;\n    if (!video) {\n      throw new Error(`Cannot complete operation because the Video component has not yet loaded`);\n    }\n\n    const handle = findNodeHandle(this._nativeRef.current)!;\n    const status: AVPlaybackStatus = await operation(handle);\n    this._handleNewStatus(status);\n    return status;\n  };\n\n  // ### iOS Fullscreening API ###\n\n  _setFullscreen = async (value: boolean) => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExpoVideoViewManager.setFullscreen(tag, value)\n    );\n  };\n\n  presentFullscreenPlayer = async () => {\n    return this._setFullscreen(true);\n  };\n\n  presentIOSFullscreenPlayer = () => {\n    console.warn(\n      \"You're using `presentIOSFullscreenPlayer`. Please migrate your code to use `presentFullscreenPlayer` instead.\"\n    );\n    return this.presentFullscreenPlayer();\n  };\n\n  presentFullscreenPlayerAsync = async () => {\n    return await this.presentFullscreenPlayer();\n  };\n\n  dismissFullscreenPlayer = async () => {\n    return this._setFullscreen(false);\n  };\n\n  dismissIOSFullscreenPlayer = () => {\n    console.warn(\n      \"You're using `dismissIOSFullscreenPlayer`. Please migrate your code to use `dismissFullscreenPlayer` instead.\"\n    );\n    this.dismissFullscreenPlayer();\n  };\n\n  // ### Unified playback API ### (consistent with Audio.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  // Get status API\n\n  getStatusAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.getStatusForVideo(tag)\n    );\n  };\n\n  // Loading / unloading API\n\n  loadAsync = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<AVPlaybackStatus> => {\n    const { nativeSource, fullInitialStatus } =\n      await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus)\n    );\n  };\n\n  // Equivalent to setting URI to null.\n  unloadAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.unloadForVideo(tag)\n    );\n  };\n\n  // Set status API (only available while isLoaded = true)\n\n  setStatusAsync = async (status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus> => {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.setStatusForVideo(tag, status)\n    );\n  };\n\n  replayAsync = async (status: AVPlaybackStatusToSet = {}): Promise<AVPlaybackStatus> => {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.replayVideo(tag, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  };\n\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<AVPlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ) => Promise<AVPlaybackStatus>;\n  pauseAsync!: () => Promise<AVPlaybackStatus>;\n  stopAsync!: () => Promise<AVPlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ) => Promise<AVPlaybackStatus>;\n  setRateAsync!: (rate: number, shouldCorrectPitch: boolean) => Promise<AVPlaybackStatus>;\n  setVolumeAsync!: (volume: number) => Promise<AVPlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<AVPlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<AVPlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<AVPlaybackStatus>;\n\n  // ### Callback wrappers ###\n\n  _nativeOnPlaybackStatusUpdate = (event: { nativeEvent: AVPlaybackStatus }) => {\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  // TODO make sure we are passing the right stuff\n  _nativeOnLoadStart = () => {\n    if (this.props.onLoadStart) {\n      this.props.onLoadStart();\n    }\n  };\n\n  _nativeOnLoad = (event: { nativeEvent: AVPlaybackStatus }) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(event.nativeEvent);\n    }\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  _nativeOnError = (event: { nativeEvent: { error: string } }) => {\n    const error: string = event.nativeEvent.error;\n    if (this.props.onError) {\n      this.props.onError(error);\n    }\n    this._handleNewStatus(getUnloadedStatus(error));\n  };\n\n  _nativeOnReadyForDisplay = (event: { nativeEvent: VideoReadyForDisplayEvent }) => {\n    if (this.props.onReadyForDisplay) {\n      this.props.onReadyForDisplay(event.nativeEvent);\n    }\n  };\n\n  _nativeOnFullscreenUpdate = (event: { nativeEvent: VideoFullscreenUpdateEvent }) => {\n    if (this.props.onIOSFullscreenUpdate && this.props.onFullscreenUpdate) {\n      console.warn(\n        \"You've supplied both `onIOSFullscreenUpdate` and `onFullscreenUpdate`. You're going to receive updates on both the callbacks.\"\n      );\n    } else if (this.props.onIOSFullscreenUpdate) {\n      console.warn(\n        \"You're using `onIOSFullscreenUpdate`. Please migrate your code to use `onFullscreenUpdate` instead.\"\n      );\n    }\n\n    if (this.props.onIOSFullscreenUpdate) {\n      this.props.onIOSFullscreenUpdate(event.nativeEvent);\n    }\n\n    if (this.props.onFullscreenUpdate) {\n      this.props.onFullscreenUpdate(event.nativeEvent);\n    }\n  };\n\n  _renderPoster = () =>\n    this.props.usePoster && this.state.showPoster ? (\n      <Image style={[_STYLES.poster, this.props.posterStyle]} source={this.props.posterSource!} />\n    ) : null;\n\n  render() {\n    const source = getNativeSourceFromSource(this.props.source) || undefined;\n\n    let nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;\n    if (this.props.resizeMode) {\n      const resizeMode = this.props.resizeMode;\n      if (resizeMode === ResizeMode.STRETCH) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;\n      } else if (resizeMode === ResizeMode.CONTAIN) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;\n      } else if (resizeMode === ResizeMode.COVER) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;\n      }\n    }\n\n    // Set status via individual props\n    const status: AVPlaybackStatusToSet = { ...this.props.status };\n    [\n      'progressUpdateIntervalMillis',\n      'positionMillis',\n      'shouldPlay',\n      'rate',\n      'shouldCorrectPitch',\n      'volume',\n      'isMuted',\n      'isLooping',\n    ].forEach((prop) => {\n      if (prop in this.props) {\n        status[prop] = this.props[prop];\n      }\n    });\n\n    // Replace selected native props\n    const nativeProps: VideoNativeProps = {\n      ...omit(this.props, [\n        'source',\n        'onPlaybackStatusUpdate',\n        'usePoster',\n        'posterSource',\n        'posterStyle',\n        ...Object.keys(status),\n      ]),\n      style: StyleSheet.flatten([_STYLES.base, this.props.style]),\n      source,\n      resizeMode: nativeResizeMode,\n      status,\n      onStatusUpdate: this._nativeOnPlaybackStatusUpdate,\n      onLoadStart: this._nativeOnLoadStart,\n      onLoad: this._nativeOnLoad,\n      onError: this._nativeOnError,\n      onReadyForDisplay: this._nativeOnReadyForDisplay,\n      onFullscreenUpdate: this._nativeOnFullscreenUpdate,\n    };\n\n    return (\n      <View style={nativeProps.style} pointerEvents=\"box-none\">\n        <ExponentVideo ref={this._nativeRef} {...nativeProps} style={_STYLES.video} />\n        {this._renderPoster()}\n      </View>\n    );\n  }\n}\n\nfunction omit(props: Record<string, any>, propNames: string[]) {\n  const copied = { ...props };\n  for (const propName of propNames) {\n    delete copied[propName];\n  }\n  return copied;\n}\n\nObject.assign(Video.prototype, PlaybackMixin);\n"]},"metadata":{},"sourceType":"module"}