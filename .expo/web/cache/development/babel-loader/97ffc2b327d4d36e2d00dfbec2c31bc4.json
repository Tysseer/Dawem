{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Tysseer Harak\\\\Desktop\\\\Data\\\\Code\\\\React Native\\\\Dawem\\\\app\\\\js\\\\screens\\\\ScreenRevisions.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport RevisionsList from \"../subComponents/RevisionsList\";\nimport RevisionsManager from \"../helpers/RevisionsManager\";\nimport SVGLoader from \"../helpers/SVGLoader\";\nimport BadgesBar from \"../subComponents/BadgesBar\";\nimport ModalBadgeDay from \"../modals/ModalBadgeDay.js\";\nimport ModalBadgeMonth from \"../modals/ModalBadgeMonth.js\";\nimport ModalBadgeWeek from \"../modals/ModalBadgeWeek.js\";\nimport { connect } from \"react-redux\";\nimport { reduxActionSetCurRevision, reduxActionDelRevision } from \"../redux/reduxActions\";\nimport * as strings from \"../helpers/StringsManager\";\nimport StringsManager from \"../helpers/StringsManager\";\n\nvar ScreenRevisions = function (_Component) {\n  _inherits(ScreenRevisions, _Component);\n\n  var _super = _createSuper(ScreenRevisions);\n\n  function ScreenRevisions(props) {\n    var _this;\n\n    _classCallCheck(this, ScreenRevisions);\n\n    _this = _super.call(this, props);\n    _this.stringsManager = new StringsManager();\n\n    _this.stringsManager.setLanguage(_this.props.strLang);\n\n    _this.svgLoader = new SVGLoader();\n    _this.revisionsManager = new RevisionsManager();\n    _this.revisionsManager.m_loadedRevisions = _this.props.revisions;\n\n    var res = _this.getBadgesStates();\n\n    _this.state = {\n      isBadgeDay: res[0],\n      isBadgeMonth: res[1],\n      isBadgeWeek: res[2],\n      bShowModalBadgeDay: false,\n      bShowModalBadgeMonth: false,\n      bShowModalBadgeWeek: false\n    };\n    return _this;\n  }\n\n  _createClass(ScreenRevisions, [{\n    key: \"render\",\n    value: function render() {\n      this.stringsManager.setLanguage(this.props.strLang);\n      this.revisionsManager.m_loadedRevisions = this.props.revisions;\n      var pressHandlers = this.getBadgesOnPressHandlers();\n      var longPressHandlers = this.getBadgesOnLongPressHandlers();\n      var modalContent = this.getModal();\n      var bottomToolBar = this.getBottomToolBar();\n      return React.createElement(ImageBackground, {\n        style: styles.background,\n        source: require(\"../../assets/backgroundPNG/sunset_bk.png\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 7\n        }\n      }, React.createElement(BadgesBar, {\n        svgLoader: this.svgLoader,\n        isBadgeDay: this.state.isBadgeDay,\n        isBadgeMonth: this.state.isBadgeMonth,\n        isBadgeWeek: this.state.isBadgeWeek,\n        onPresses: pressHandlers,\n        onLongPresses: longPressHandlers,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }\n      }), React.createElement(View, {\n        style: styles.listContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }\n      }, modalContent, this.revisionsManager.m_loadedRevisions.length == 0 ? this.getInitialPrompt() : React.createElement(RevisionsList, {\n        revisionsManager: this.revisionsManager,\n        stringsManager: this.stringsManager,\n        navigation: this.props.navigation,\n        refreshFn: this.refresh.bind(this),\n        updateRevFn: this.onEditRevision.bind(this),\n        deleteRevFn: this.onDeleteRevision.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }\n      })), bottomToolBar);\n    }\n  }, {\n    key: \"getBadgesOnPressHandlers\",\n    value: function getBadgesOnPressHandlers() {\n      var pressHandlers = new Map();\n      pressHandlers.set(\"day\", this.onDayBadgePressed.bind(this));\n      pressHandlers.set(\"month\", this.onMonthBadgePressed.bind(this));\n      pressHandlers.set(\"week\", this.onWeekBadgePressed.bind(this));\n      return pressHandlers;\n    }\n  }, {\n    key: \"getBadgesOnLongPressHandlers\",\n    value: function getBadgesOnLongPressHandlers() {\n      var longPressHandlers = new Map();\n      longPressHandlers.set(\"day\", this.onBadgeLongPress.bind(this));\n      longPressHandlers.set(\"month\", this.onBadgeLongPress.bind(this));\n      longPressHandlers.set(\"week\", this.onBadgeLongPress.bind(this));\n      return longPressHandlers;\n    }\n  }, {\n    key: \"onDayBadgePressed\",\n    value: function onDayBadgePressed() {\n      var newval = this.state.bShowModalBadgeDay == false;\n      this.setState({\n        bShowModalBadgeDay: newval\n      });\n    }\n  }, {\n    key: \"onMonthBadgePressed\",\n    value: function onMonthBadgePressed() {\n      var newval = this.state.bShowModalBadgeMonth == false;\n      this.setState({\n        bShowModalBadgeMonth: newval\n      });\n    }\n  }, {\n    key: \"onWeekBadgePressed\",\n    value: function onWeekBadgePressed() {\n      var newval = this.state.bShowModalBadgeWeek == false;\n      this.setState({\n        bShowModalBadgeWeek: newval\n      });\n    }\n  }, {\n    key: \"onBadgeLongPress\",\n    value: function onBadgeLongPress() {}\n  }, {\n    key: \"onAddRevision\",\n    value: function onAddRevision() {\n      this.props.reduxActionSetCurRevision(null);\n      this.props.navigation.navigate(\"ScrRev\");\n    }\n  }, {\n    key: \"onSettings\",\n    value: function onSettings() {\n      this.props.navigation.navigate(\"ScrSettings\");\n    }\n  }, {\n    key: \"onDonate\",\n    value: function onDonate() {}\n  }, {\n    key: \"onEditRevision\",\n    value: function onEditRevision(revision) {\n      this.props.reduxActionSetCurRevision(revision);\n      this.props.navigation.navigate(\"ScrRev\");\n    }\n  }, {\n    key: \"onDeleteRevision\",\n    value: function onDeleteRevision(revision) {\n      this.props.reduxActionDelRevision(revision);\n      this.refresh();\n    }\n  }, {\n    key: \"getInitialPrompt\",\n    value: function getInitialPrompt() {\n      return React.createElement(View, {\n        style: styles.textContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        style: styles.textPrompt,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 9\n        }\n      }, this.stringsManager.getStr(strings.STR_REVS_PROMPT)), React.createElement(TouchableWithoutFeedback, {\n        onPress: this.onAddRevision.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 9\n        }\n      }, React.createElement(Image, {\n        style: {\n          width: 160,\n          height: 160,\n          marginHorizontal: 2\n        },\n        source: require(\"../../assets/icons/add.png\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }\n      })));\n    }\n  }, {\n    key: \"getBottomToolBar\",\n    value: function getBottomToolBar() {\n      return React.createElement(View, {\n        style: styles.toolBar,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: styles.toolButton,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 9\n        }\n      }, React.createElement(TouchableWithoutFeedback, {\n        onPress: this.onAddRevision.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }\n      }, React.createElement(Image, {\n        source: require(\"../../assets/icons/add.png\"),\n        style: {\n          width: \"100%\",\n          height: \"100%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }\n      }))), React.createElement(View, {\n        style: styles.toolButton,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 9\n        }\n      }, React.createElement(TouchableWithoutFeedback, {\n        onPress: this.onSettings.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }\n      }, React.createElement(Image, {\n        source: require(\"../../assets/icons/settings.png\"),\n        style: {\n          width: \"100%\",\n          height: \"100%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }\n      }))), React.createElement(View, {\n        style: styles.toolButton,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 9\n        }\n      }, React.createElement(TouchableWithoutFeedback, {\n        onPress: this.onDonate.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }\n      }, React.createElement(Image, {\n        source: require(\"../../assets/icons/donate.png\"),\n        style: {\n          width: \"100%\",\n          height: \"100%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }\n      }))));\n    }\n  }, {\n    key: \"getModal\",\n    value: function getModal() {\n      var modal = this.getBadgesModal();\n      if (modal != null) return modal;\n      return null;\n    }\n  }, {\n    key: \"getBadgesModal\",\n    value: function getBadgesModal() {\n      if (this.state.bShowModalBadgeDay) {\n        var modalDay = new ModalBadgeDay(this).getModal(this.state.isBadgeDay == false);\n        return React.createElement(View, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 14\n          }\n        }, modalDay);\n      }\n\n      if (this.state.bShowModalBadgeMonth) {\n        var modalMonth = new ModalBadgeMonth(this).getModal(this.state.isBadgeMonth == false);\n        return React.createElement(View, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 14\n          }\n        }, modalMonth);\n      }\n\n      if (this.state.bShowModalBadgeWeek) {\n        var modalWeek = new ModalBadgeWeek(this).getModal(this.state.isBadgeWeek == false);\n        return React.createElement(View, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 14\n          }\n        }, modalWeek);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getBadgesStates\",\n    value: function getBadgesStates() {\n      if (this.revisionsManager.m_loadedRevisions.length == 0) return [false, false, false];\n      var bIsToday = false;\n      var maxDays = 0;\n\n      for (var i = 0; i < this.revisionsManager.m_loadedRevisions.length; i++) {\n        this.revisionsManager.m_loadedRevisions[i].updateNumDays();\n        if (this.revisionsManager.m_loadedRevisions[i].numDays > maxDays) maxDays = this.revisionsManager.m_loadedRevisions[i].numDays;\n        if (this.revisionsManager.m_loadedRevisions[i].numDays == 0) bIsToday = true;\n      }\n\n      var bIsWeek = maxDays <= 7;\n      var bIsMonth = maxDays <= 30;\n      bIsToday = bIsToday && this.revisionsManager.m_loadedRevisions.length >= 5;\n      bIsWeek = bIsWeek && this.revisionsManager.m_loadedRevisions.length >= 7;\n      bIsMonth = bIsMonth && this.revisionsManager.m_loadedRevisions.length >= 10;\n      return [bIsToday, bIsMonth, bIsWeek];\n    }\n  }, {\n    key: \"updateBadgesStates\",\n    value: function updateBadgesStates() {\n      var res = this.getBadgesStates();\n      this.setState({\n        isBadgeDay: res[0],\n        isBadgeMonth: res[1],\n        isBadgeWeek: res[2]\n      });\n    }\n  }, {\n    key: \"refresh\",\n    value: function refresh() {\n      this.updateBadgesStates();\n    }\n  }]);\n\n  return ScreenRevisions;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    revisions: state.revisions,\n    strLang: state.strLang\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps() {\n  return {\n    reduxActionSetCurRevision: reduxActionSetCurRevision,\n    reduxActionDelRevision: reduxActionDelRevision\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps())(ScreenRevisions);\nvar styles = StyleSheet.create({\n  background: {\n    flex: 1,\n    justifyContent: \"space-evenly\",\n    alignItems: \"center\",\n    backgroundColor: \"white\"\n  },\n  toolBar: {\n    width: \"100%\",\n    height: 40,\n    alignSelf: \"flex-end\",\n    borderTopColor: \"yellow\",\n    borderTopWidth: 1,\n    paddingHorizontal: 6,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-around\"\n  },\n  toolButton: {\n    width: 38,\n    height: 38,\n    marginHorizontal: 2\n  },\n  listContainer: {\n    width: \"100%\",\n    flex: 1\n  },\n  textContainer: {\n    backgroundColor: \"#FFFFFF4D\",\n    borderTopLeftRadius: 20,\n    borderTopRightRadius: 20,\n    borderBottomLeftRadius: 20,\n    borderBottomRightRadius: 20,\n    padding: 5,\n    margin: 5,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  textPrompt: {\n    fontSize: 30,\n    fontFamily: \"sans-serif\",\n    textAlign: \"center\",\n    color: \"#FFBB66\"\n  }\n});","map":{"version":3,"sources":["C:/Users/Tysseer Harak/Desktop/Data/Code/React Native/Dawem/app/js/screens/ScreenRevisions.js"],"names":["React","Component","RevisionsList","RevisionsManager","SVGLoader","BadgesBar","ModalBadgeDay","ModalBadgeMonth","ModalBadgeWeek","connect","reduxActionSetCurRevision","reduxActionDelRevision","strings","StringsManager","ScreenRevisions","props","stringsManager","setLanguage","strLang","svgLoader","revisionsManager","m_loadedRevisions","revisions","res","getBadgesStates","state","isBadgeDay","isBadgeMonth","isBadgeWeek","bShowModalBadgeDay","bShowModalBadgeMonth","bShowModalBadgeWeek","pressHandlers","getBadgesOnPressHandlers","longPressHandlers","getBadgesOnLongPressHandlers","modalContent","getModal","bottomToolBar","getBottomToolBar","styles","background","require","listContainer","length","getInitialPrompt","navigation","refresh","bind","onEditRevision","onDeleteRevision","Map","set","onDayBadgePressed","onMonthBadgePressed","onWeekBadgePressed","onBadgeLongPress","newval","setState","navigate","revision","textContainer","textPrompt","getStr","STR_REVS_PROMPT","onAddRevision","width","height","marginHorizontal","toolBar","toolButton","onSettings","onDonate","modal","getBadgesModal","modalDay","modalMonth","modalWeek","bIsToday","maxDays","i","updateNumDays","numDays","bIsWeek","bIsMonth","updateBadgesStates","mapStateToProps","mapDispatchToProps","StyleSheet","create","flex","justifyContent","alignItems","backgroundColor","alignSelf","borderTopColor","borderTopWidth","paddingHorizontal","flexDirection","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","padding","margin","fontSize","fontFamily","textAlign","color"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  View,\r\n  ImageBackground,\r\n  TouchableWithoutFeedback,\r\n  Image,\r\n  Text,\r\n} from \"react-native\";\r\nimport RevisionsList from \"../subComponents/RevisionsList\";\r\nimport RevisionsManager from \"../helpers/RevisionsManager\";\r\nimport SVGLoader from \"../helpers/SVGLoader\";\r\nimport BadgesBar from \"../subComponents/BadgesBar\";\r\nimport ModalBadgeDay from \"../modals/ModalBadgeDay.js\";\r\nimport ModalBadgeMonth from \"../modals/ModalBadgeMonth.js\";\r\nimport ModalBadgeWeek from \"../modals/ModalBadgeWeek.js\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  reduxActionSetCurRevision,\r\n  reduxActionDelRevision,\r\n} from \"../redux/reduxActions\";\r\nimport * as strings from \"../helpers/StringsManager\";\r\nimport StringsManager from \"../helpers/StringsManager\";\r\nclass ScreenRevisions extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.stringsManager = new StringsManager();\r\n    this.stringsManager.setLanguage(this.props.strLang);\r\n    this.svgLoader = new SVGLoader();\r\n    this.revisionsManager = new RevisionsManager();\r\n    this.revisionsManager.m_loadedRevisions = this.props.revisions;\r\n    var res = this.getBadgesStates();\r\n\r\n    this.state = {\r\n      isBadgeDay: res[0],\r\n      isBadgeMonth: res[1],\r\n      isBadgeWeek: res[2],\r\n      bShowModalBadgeDay: false,\r\n      bShowModalBadgeMonth: false,\r\n      bShowModalBadgeWeek: false,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    this.stringsManager.setLanguage(this.props.strLang);\r\n    this.revisionsManager.m_loadedRevisions = this.props.revisions;\r\n    var pressHandlers = this.getBadgesOnPressHandlers();\r\n    var longPressHandlers = this.getBadgesOnLongPressHandlers();\r\n    var modalContent = this.getModal();\r\n    var bottomToolBar = this.getBottomToolBar();\r\n    return (\r\n      <ImageBackground\r\n        style={styles.background}\r\n        source={require(\"../../assets/backgroundPNG/sunset_bk.png\")}\r\n      >\r\n        <BadgesBar\r\n          svgLoader={this.svgLoader}\r\n          isBadgeDay={this.state.isBadgeDay}\r\n          isBadgeMonth={this.state.isBadgeMonth}\r\n          isBadgeWeek={this.state.isBadgeWeek}\r\n          onPresses={pressHandlers}\r\n          onLongPresses={longPressHandlers}\r\n        />\r\n\r\n        <View style={styles.listContainer}>\r\n          {modalContent}\r\n          {this.revisionsManager.m_loadedRevisions.length == 0 ? (\r\n            this.getInitialPrompt()\r\n          ) : (\r\n            <RevisionsList\r\n              revisionsManager={this.revisionsManager}\r\n              stringsManager={this.stringsManager}\r\n              navigation={this.props.navigation}\r\n              refreshFn={this.refresh.bind(this)}\r\n              updateRevFn={this.onEditRevision.bind(this)}\r\n              deleteRevFn={this.onDeleteRevision.bind(this)}\r\n            />\r\n          )}\r\n        </View>\r\n        {bottomToolBar}\r\n      </ImageBackground>\r\n    );\r\n  }\r\n\r\n  getBadgesOnPressHandlers() {\r\n    var pressHandlers = new Map();\r\n    pressHandlers.set(\"day\", this.onDayBadgePressed.bind(this));\r\n    pressHandlers.set(\"month\", this.onMonthBadgePressed.bind(this));\r\n    pressHandlers.set(\"week\", this.onWeekBadgePressed.bind(this));\r\n\r\n    return pressHandlers;\r\n  }\r\n  getBadgesOnLongPressHandlers() {\r\n    var longPressHandlers = new Map();\r\n    longPressHandlers.set(\"day\", this.onBadgeLongPress.bind(this));\r\n    longPressHandlers.set(\"month\", this.onBadgeLongPress.bind(this));\r\n    longPressHandlers.set(\"week\", this.onBadgeLongPress.bind(this));\r\n    return longPressHandlers;\r\n  }\r\n\r\n  onDayBadgePressed() {\r\n    let newval = this.state.bShowModalBadgeDay == false;\r\n    this.setState({ bShowModalBadgeDay: newval });\r\n  }\r\n  onMonthBadgePressed() {\r\n    let newval = this.state.bShowModalBadgeMonth == false;\r\n    this.setState({ bShowModalBadgeMonth: newval });\r\n  }\r\n  onWeekBadgePressed() {\r\n    let newval = this.state.bShowModalBadgeWeek == false;\r\n    this.setState({ bShowModalBadgeWeek: newval });\r\n  }\r\n  onBadgeLongPress() {\r\n    // todo: explain badges\r\n  }\r\n  onAddRevision() {\r\n    this.props.reduxActionSetCurRevision(null);\r\n    this.props.navigation.navigate(\"ScrRev\");\r\n  }\r\n\r\n  onSettings() {\r\n    this.props.navigation.navigate(\"ScrSettings\");\r\n  }\r\n  onDonate() {}\r\n\r\n  onEditRevision(revision) {\r\n    this.props.reduxActionSetCurRevision(revision);\r\n    this.props.navigation.navigate(\"ScrRev\");\r\n  }\r\n  onDeleteRevision(revision) {\r\n    this.props.reduxActionDelRevision(revision);\r\n    this.refresh();\r\n  }\r\n  getInitialPrompt() {\r\n    return (\r\n      <View style={styles.textContainer}>\r\n        <Text style={styles.textPrompt}>\r\n          {this.stringsManager.getStr(strings.STR_REVS_PROMPT)}\r\n        </Text>\r\n\r\n        <TouchableWithoutFeedback onPress={this.onAddRevision.bind(this)}>\r\n          <Image\r\n            style={{\r\n              width: 160,\r\n              height: 160,\r\n              marginHorizontal: 2,\r\n            }}\r\n            source={require(\"../../assets/icons/add.png\")}\r\n          />\r\n        </TouchableWithoutFeedback>\r\n      </View>\r\n    );\r\n  }\r\n  getBottomToolBar() {\r\n    return (\r\n      <View style={styles.toolBar}>\r\n        <View style={styles.toolButton}>\r\n          <TouchableWithoutFeedback onPress={this.onAddRevision.bind(this)}>\r\n            <Image\r\n              source={require(\"../../assets/icons/add.png\")}\r\n              style={{ width: \"100%\", height: \"100%\" }}\r\n            />\r\n          </TouchableWithoutFeedback>\r\n        </View>\r\n        <View style={styles.toolButton}>\r\n          <TouchableWithoutFeedback onPress={this.onSettings.bind(this)}>\r\n            <Image\r\n              source={require(\"../../assets/icons/settings.png\")}\r\n              style={{ width: \"100%\", height: \"100%\" }}\r\n            />\r\n          </TouchableWithoutFeedback>\r\n        </View>\r\n        <View style={styles.toolButton}>\r\n          <TouchableWithoutFeedback onPress={this.onDonate.bind(this)}>\r\n            <Image\r\n              source={require(\"../../assets/icons/donate.png\")}\r\n              style={{ width: \"100%\", height: \"100%\" }}\r\n            />\r\n          </TouchableWithoutFeedback>\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  getModal() {\r\n    var modal = this.getBadgesModal();\r\n    if (modal != null) return modal;\r\n    return null;\r\n  }\r\n\r\n  getBadgesModal() {\r\n    if (this.state.bShowModalBadgeDay) {\r\n      var modalDay = new ModalBadgeDay(this).getModal(\r\n        this.state.isBadgeDay == false\r\n      );\r\n      return <View>{modalDay}</View>;\r\n    }\r\n    if (this.state.bShowModalBadgeMonth) {\r\n      var modalMonth = new ModalBadgeMonth(this).getModal(\r\n        this.state.isBadgeMonth == false\r\n      );\r\n      return <View>{modalMonth}</View>;\r\n    }\r\n    if (this.state.bShowModalBadgeWeek) {\r\n      var modalWeek = new ModalBadgeWeek(this).getModal(\r\n        this.state.isBadgeWeek == false\r\n      );\r\n      return <View>{modalWeek}</View>;\r\n    }\r\n    return null;\r\n  }\r\n  getBadgesStates() {\r\n    if (this.revisionsManager.m_loadedRevisions.length == 0)\r\n      return [false, false, false];\r\n    var bIsToday = false;\r\n    var maxDays = 0;\r\n    for (var i = 0; i < this.revisionsManager.m_loadedRevisions.length; i++) {\r\n      this.revisionsManager.m_loadedRevisions[i].updateNumDays();\r\n      if (this.revisionsManager.m_loadedRevisions[i].numDays > maxDays)\r\n        maxDays = this.revisionsManager.m_loadedRevisions[i].numDays;\r\n      if (this.revisionsManager.m_loadedRevisions[i].numDays == 0)\r\n        bIsToday = true;\r\n    }\r\n\r\n    var bIsWeek = maxDays <= 7;\r\n    var bIsMonth = maxDays <= 30;\r\n\r\n    bIsToday = bIsToday && this.revisionsManager.m_loadedRevisions.length >= 5;\r\n    bIsWeek = bIsWeek && this.revisionsManager.m_loadedRevisions.length >= 7;\r\n    bIsMonth = bIsMonth && this.revisionsManager.m_loadedRevisions.length >= 10;\r\n    return [bIsToday, bIsMonth, bIsWeek];\r\n  }\r\n  updateBadgesStates() {\r\n    var res = this.getBadgesStates();\r\n\r\n    this.setState({\r\n      isBadgeDay: res[0],\r\n      isBadgeMonth: res[1],\r\n      isBadgeWeek: res[2],\r\n    });\r\n  }\r\n  refresh() {\r\n    this.updateBadgesStates();\r\n  }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  revisions: state.revisions,\r\n  strLang: state.strLang,\r\n});\r\nconst mapDispatchToProps = () => {\r\n  return {\r\n    reduxActionSetCurRevision,\r\n    reduxActionDelRevision,\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps())(ScreenRevisions);\r\nconst styles = StyleSheet.create({\r\n  background: {\r\n    flex: 1,\r\n    justifyContent: \"space-evenly\",\r\n    alignItems: \"center\",\r\n    backgroundColor: \"white\",\r\n  },\r\n\r\n  toolBar: {\r\n    width: \"100%\",\r\n    height: 40,\r\n    alignSelf: \"flex-end\",\r\n    borderTopColor: \"yellow\",\r\n    borderTopWidth: 1,\r\n    paddingHorizontal: 6,\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-around\",\r\n  },\r\n  toolButton: {\r\n    width: 38,\r\n    height: 38,\r\n    marginHorizontal: 2,\r\n  },\r\n  listContainer: {\r\n    width: \"100%\",\r\n    flex: 1,\r\n  },\r\n  textContainer: {\r\n    backgroundColor: \"#FFFFFF4D\",\r\n    borderTopLeftRadius: 20,\r\n    borderTopRightRadius: 20,\r\n    borderBottomLeftRadius: 20,\r\n    borderBottomRightRadius: 20,\r\n    padding: 5,\r\n    margin: 5,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  textPrompt: {\r\n    fontSize: 30,\r\n    fontFamily: \"sans-serif\",\r\n    textAlign: \"center\",\r\n    color: \"#FFBB66\",\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}