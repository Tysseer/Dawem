{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { Asset } from 'expo-asset';\nimport { Platform } from 'expo-modules-core';\nimport { PitchCorrectionQuality } from \"./AV.types\";\nexport var _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS = 500;\nexport var _DEFAULT_INITIAL_PLAYBACK_STATUS = {\n  positionMillis: 0,\n  progressUpdateIntervalMillis: _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS,\n  shouldPlay: false,\n  rate: 1.0,\n  shouldCorrectPitch: false,\n  volume: 1.0,\n  isMuted: false,\n  isLooping: false\n};\nexport function getNativeSourceFromSource(source) {\n  var uri = null;\n  var overridingExtension = null;\n  var headers;\n  if (typeof source === 'string' && Platform.OS === 'web') {\n    return {\n      uri: source,\n      overridingExtension: overridingExtension,\n      headers: headers\n    };\n  }\n  var asset = _getAssetFromPlaybackSource(source);\n  if (asset != null) {\n    uri = asset.localUri || asset.uri;\n  } else if (source != null && typeof source !== 'number' && 'uri' in source && typeof source.uri === 'string') {\n    uri = source.uri;\n  }\n  if (uri == null) {\n    return null;\n  }\n  if (source != null && typeof source !== 'number' && 'overrideFileExtensionAndroid' in source && typeof source.overrideFileExtensionAndroid === 'string') {\n    overridingExtension = source.overrideFileExtensionAndroid;\n  }\n  if (source != null && typeof source !== 'number' && 'headers' in source && typeof source.headers === 'object') {\n    headers = source.headers;\n  }\n  return {\n    uri: uri,\n    overridingExtension: overridingExtension,\n    headers: headers\n  };\n}\nfunction _getAssetFromPlaybackSource(source) {\n  if (source == null) {\n    return null;\n  }\n  var asset = null;\n  if (typeof source === 'number') {\n    asset = Asset.fromModule(source);\n  } else if (source instanceof Asset) {\n    asset = source;\n  }\n  return asset;\n}\nexport function assertStatusValuesInBounds(status) {\n  if (typeof status.rate === 'number' && (status.rate < 0 || status.rate > 32)) {\n    throw new RangeError('Rate value must be between 0.0 and 32.0');\n  }\n  if (typeof status.volume === 'number' && (status.volume < 0 || status.volume > 1)) {\n    throw new RangeError('Volume value must be between 0.0 and 1.0');\n  }\n}\nexport function getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst) {\n  var fullInitialStatus, asset, nativeSource;\n  return _regeneratorRuntime.async(function getNativeSourceAndFullInitialStatusForLoadAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          fullInitialStatus = initialStatus == null ? _DEFAULT_INITIAL_PLAYBACK_STATUS : _objectSpread(_objectSpread({}, _DEFAULT_INITIAL_PLAYBACK_STATUS), initialStatus);\n          assertStatusValuesInBounds(fullInitialStatus);\n          if (!(typeof source === 'string' && Platform.OS === 'web')) {\n            _context.next = 4;\n            break;\n          }\n          return _context.abrupt(\"return\", {\n            nativeSource: {\n              uri: source,\n              overridingExtension: null\n            },\n            fullInitialStatus: fullInitialStatus\n          });\n        case 4:\n          asset = _getAssetFromPlaybackSource(source);\n          if (!(downloadFirst && asset)) {\n            _context.next = 8;\n            break;\n          }\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(asset.downloadAsync());\n        case 8:\n          nativeSource = getNativeSourceFromSource(source);\n          if (!(nativeSource === null)) {\n            _context.next = 11;\n            break;\n          }\n          throw new Error(\"Cannot load an AV asset from a null playback source\");\n        case 11:\n          return _context.abrupt(\"return\", {\n            nativeSource: nativeSource,\n            fullInitialStatus: fullInitialStatus\n          });\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getUnloadedStatus() {\n  var error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  return _objectSpread({\n    isLoaded: false\n  }, error ? {\n    error: error\n  } : null);\n}\nexport var PlaybackMixin = {\n  playAsync: function playAsync() {\n    var _this = this;\n    return function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", _this.setStatusAsync({\n                shouldPlay: true\n              }));\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  playFromPositionAsync: function playFromPositionAsync(positionMillis) {\n    var _arguments = arguments,\n      _this2 = this;\n    return function _callee2() {\n      var tolerances;\n      return _regeneratorRuntime.async(function _callee2$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              tolerances = _arguments.length > 1 && _arguments[1] !== undefined ? _arguments[1] : {};\n              return _context3.abrupt(\"return\", _this2.setStatusAsync({\n                positionMillis: positionMillis,\n                shouldPlay: true,\n                seekMillisToleranceAfter: tolerances.toleranceMillisAfter,\n                seekMillisToleranceBefore: tolerances.toleranceMillisBefore\n              }));\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  pauseAsync: function pauseAsync() {\n    var _this3 = this;\n    return function _callee3() {\n      return _regeneratorRuntime.async(function _callee3$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.abrupt(\"return\", _this3.setStatusAsync({\n                shouldPlay: false\n              }));\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  stopAsync: function stopAsync() {\n    var _this4 = this;\n    return function _callee4() {\n      return _regeneratorRuntime.async(function _callee4$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              return _context5.abrupt(\"return\", _this4.setStatusAsync({\n                positionMillis: 0,\n                shouldPlay: false\n              }));\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  setPositionAsync: function setPositionAsync(positionMillis) {\n    var _arguments2 = arguments,\n      _this5 = this;\n    return function _callee5() {\n      var tolerances;\n      return _regeneratorRuntime.async(function _callee5$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              tolerances = _arguments2.length > 1 && _arguments2[1] !== undefined ? _arguments2[1] : {};\n              return _context6.abrupt(\"return\", _this5.setStatusAsync({\n                positionMillis: positionMillis,\n                seekMillisToleranceAfter: tolerances.toleranceMillisAfter,\n                seekMillisToleranceBefore: tolerances.toleranceMillisBefore\n              }));\n            case 2:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  setRateAsync: function setRateAsync(rate) {\n    var _arguments3 = arguments,\n      _this6 = this;\n    return function _callee6() {\n      var shouldCorrectPitch, pitchCorrectionQuality;\n      return _regeneratorRuntime.async(function _callee6$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              shouldCorrectPitch = _arguments3.length > 1 && _arguments3[1] !== undefined ? _arguments3[1] : false;\n              pitchCorrectionQuality = _arguments3.length > 2 && _arguments3[2] !== undefined ? _arguments3[2] : PitchCorrectionQuality.Low;\n              return _context7.abrupt(\"return\", _this6.setStatusAsync({\n                rate: rate,\n                shouldCorrectPitch: shouldCorrectPitch,\n                pitchCorrectionQuality: pitchCorrectionQuality\n              }));\n            case 3:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  setVolumeAsync: function setVolumeAsync(volume) {\n    var _this7 = this;\n    return function _callee7() {\n      return _regeneratorRuntime.async(function _callee7$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              return _context8.abrupt(\"return\", _this7.setStatusAsync({\n                volume: volume\n              }));\n            case 1:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  setIsMutedAsync: function setIsMutedAsync(isMuted) {\n    var _this8 = this;\n    return function _callee8() {\n      return _regeneratorRuntime.async(function _callee8$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              return _context9.abrupt(\"return\", _this8.setStatusAsync({\n                isMuted: isMuted\n              }));\n            case 1:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  setIsLoopingAsync: function setIsLoopingAsync(isLooping) {\n    var _this9 = this;\n    return function _callee9() {\n      return _regeneratorRuntime.async(function _callee9$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              return _context10.abrupt(\"return\", _this9.setStatusAsync({\n                isLooping: isLooping\n              }));\n            case 1:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  setProgressUpdateIntervalAsync: function setProgressUpdateIntervalAsync(progressUpdateIntervalMillis) {\n    var _this10 = this;\n    return function _callee10() {\n      return _regeneratorRuntime.async(function _callee10$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              return _context11.abrupt(\"return\", _this10.setStatusAsync({\n                progressUpdateIntervalMillis: progressUpdateIntervalMillis\n              }));\n            case 1:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  }\n};\nexport * from \"./AV.types\";","map":{"version":3,"mappings":"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","names":["Asset","Platform","PitchCorrectionQuality","_DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS","_DEFAULT_INITIAL_PLAYBACK_STATUS","positionMillis","progressUpdateIntervalMillis","shouldPlay","rate","shouldCorrectPitch","volume","isMuted","isLooping","getNativeSourceFromSource","source","uri","overridingExtension","headers","OS","asset","_getAssetFromPlaybackSource","localUri","overrideFileExtensionAndroid","fromModule","assertStatusValuesInBounds","status","RangeError","getNativeSourceAndFullInitialStatusForLoadAsync","initialStatus","downloadFirst","fullInitialStatus","nativeSource","downloadAsync","Error","getUnloadedStatus","error","isLoaded","PlaybackMixin","playAsync","setStatusAsync","playFromPositionAsync","tolerances","seekMillisToleranceAfter","toleranceMillisAfter","seekMillisToleranceBefore","toleranceMillisBefore","pauseAsync","stopAsync","setPositionAsync","setRateAsync","pitchCorrectionQuality","Low","setVolumeAsync","setIsMutedAsync","setIsLoopingAsync","setProgressUpdateIntervalAsync"],"sourceRoot":"","sources":["../src/AV.ts"],"sourcesContent":["import { Asset } from 'expo-asset';\nimport { Platform } from 'expo-modules-core';\n\nimport {\n  AVPlaybackSource,\n  AVPlaybackNativeSource,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  PitchCorrectionQuality,\n} from './AV.types';\n\n// TODO add:\n//  disableFocusOnAndroid\n//  audio routes (at least did become noisy on android)\n//  pan\n//  pitch\n//  API to explicitly request audio focus / session\n//  API to select stream type on Android\n//  subtitles API\n\nexport const _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS: number = 500;\nexport const _DEFAULT_INITIAL_PLAYBACK_STATUS: AVPlaybackStatusToSet = {\n  positionMillis: 0,\n  progressUpdateIntervalMillis: _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS,\n  shouldPlay: false,\n  rate: 1.0,\n  shouldCorrectPitch: false,\n  volume: 1.0,\n  isMuted: false,\n  isLooping: false,\n};\n\nexport function getNativeSourceFromSource(\n  source?: AVPlaybackSource | null\n): AVPlaybackNativeSource | null {\n  let uri: string | null = null;\n  let overridingExtension: string | null = null;\n  let headers: { [fieldName: string]: string } | undefined;\n\n  if (typeof source === 'string' && Platform.OS === 'web') {\n    return {\n      uri: source,\n      overridingExtension,\n      headers,\n    };\n  }\n\n  const asset: Asset | null = _getAssetFromPlaybackSource(source);\n  if (asset != null) {\n    uri = asset.localUri || asset.uri;\n  } else if (\n    source != null &&\n    typeof source !== 'number' &&\n    'uri' in source &&\n    typeof source.uri === 'string'\n  ) {\n    uri = source.uri;\n  }\n\n  if (uri == null) {\n    return null;\n  }\n\n  if (\n    source != null &&\n    typeof source !== 'number' &&\n    'overrideFileExtensionAndroid' in source &&\n    typeof source.overrideFileExtensionAndroid === 'string'\n  ) {\n    overridingExtension = source.overrideFileExtensionAndroid;\n  }\n\n  if (\n    source != null &&\n    typeof source !== 'number' &&\n    'headers' in source &&\n    typeof source.headers === 'object'\n  ) {\n    headers = source.headers;\n  }\n  return { uri, overridingExtension, headers };\n}\n\nfunction _getAssetFromPlaybackSource(source?: AVPlaybackSource | null): Asset | null {\n  if (source == null) {\n    return null;\n  }\n\n  let asset: Asset | null = null;\n  if (typeof source === 'number') {\n    asset = Asset.fromModule(source);\n  } else if (source instanceof Asset) {\n    asset = source;\n  }\n  return asset;\n}\n\nexport function assertStatusValuesInBounds(status: AVPlaybackStatusToSet): void {\n  if (typeof status.rate === 'number' && (status.rate < 0 || status.rate > 32)) {\n    throw new RangeError('Rate value must be between 0.0 and 32.0');\n  }\n  if (typeof status.volume === 'number' && (status.volume < 0 || status.volume > 1)) {\n    throw new RangeError('Volume value must be between 0.0 and 1.0');\n  }\n}\n\nexport async function getNativeSourceAndFullInitialStatusForLoadAsync(\n  source: AVPlaybackSource | null,\n  initialStatus: AVPlaybackStatusToSet | null,\n  downloadFirst: boolean\n): Promise<{\n  nativeSource: AVPlaybackNativeSource;\n  fullInitialStatus: AVPlaybackStatusToSet;\n}> {\n  // Get the full initial status\n  const fullInitialStatus: AVPlaybackStatusToSet =\n    initialStatus == null\n      ? _DEFAULT_INITIAL_PLAYBACK_STATUS\n      : {\n          ..._DEFAULT_INITIAL_PLAYBACK_STATUS,\n          ...initialStatus,\n        };\n  assertStatusValuesInBounds(fullInitialStatus);\n\n  if (typeof source === 'string' && Platform.OS === 'web') {\n    return {\n      nativeSource: {\n        uri: source,\n        overridingExtension: null,\n      },\n      fullInitialStatus,\n    };\n  }\n\n  // Download first if necessary.\n  const asset = _getAssetFromPlaybackSource(source);\n  if (downloadFirst && asset) {\n    // TODO we can download remote uri too once @nikki93 has integrated this into Asset\n    await asset.downloadAsync();\n  }\n\n  // Get the native source\n  const nativeSource: AVPlaybackNativeSource | null = getNativeSourceFromSource(source);\n\n  if (nativeSource === null) {\n    throw new Error(`Cannot load an AV asset from a null playback source`);\n  }\n\n  return { nativeSource, fullInitialStatus };\n}\n\nexport function getUnloadedStatus(error: string | null = null): AVPlaybackStatus {\n  return {\n    isLoaded: false,\n    ...(error ? { error } : null),\n  };\n}\n\nexport interface AV {\n  setStatusAsync(status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus>;\n  getStatusAsync(): Promise<AVPlaybackStatus>;\n}\n\nexport interface Playback extends AV {\n  playAsync(): Promise<AVPlaybackStatus>;\n  loadAsync(\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet,\n    downloadAsync: boolean\n  ): Promise<AVPlaybackStatus>;\n  unloadAsync(): Promise<AVPlaybackStatus>;\n  playFromPositionAsync(\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ): Promise<AVPlaybackStatus>;\n  pauseAsync(): Promise<AVPlaybackStatus>;\n  stopAsync(): Promise<AVPlaybackStatus>;\n  replayAsync(status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus>;\n  setPositionAsync(\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ): Promise<AVPlaybackStatus>;\n  setRateAsync(\n    rate: number,\n    shouldCorrectPitch: boolean,\n    pitchCorrectionQuality?: PitchCorrectionQuality\n  ): Promise<AVPlaybackStatus>;\n  setVolumeAsync(volume: number): Promise<AVPlaybackStatus>;\n  setIsMutedAsync(isMuted: boolean): Promise<AVPlaybackStatus>;\n  setIsLoopingAsync(isLooping: boolean): Promise<AVPlaybackStatus>;\n  setProgressUpdateIntervalAsync(progressUpdateIntervalMillis: number): Promise<AVPlaybackStatus>;\n}\n\n/**\n * A mixin that defines common playback methods for A/V classes so they implement the `Playback`\n * interface\n */\nexport const PlaybackMixin = {\n  async playAsync(): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ shouldPlay: true });\n  },\n\n  async playFromPositionAsync(\n    positionMillis: number,\n    tolerances: { toleranceMillisBefore?: number; toleranceMillisAfter?: number } = {}\n  ): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({\n      positionMillis,\n      shouldPlay: true,\n      seekMillisToleranceAfter: tolerances.toleranceMillisAfter,\n      seekMillisToleranceBefore: tolerances.toleranceMillisBefore,\n    });\n  },\n\n  async pauseAsync(): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ shouldPlay: false });\n  },\n\n  async stopAsync(): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ positionMillis: 0, shouldPlay: false });\n  },\n\n  async setPositionAsync(\n    positionMillis: number,\n    tolerances: { toleranceMillisBefore?: number; toleranceMillisAfter?: number } = {}\n  ): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({\n      positionMillis,\n      seekMillisToleranceAfter: tolerances.toleranceMillisAfter,\n      seekMillisToleranceBefore: tolerances.toleranceMillisBefore,\n    });\n  },\n\n  async setRateAsync(\n    rate: number,\n    shouldCorrectPitch: boolean = false,\n    pitchCorrectionQuality: PitchCorrectionQuality = PitchCorrectionQuality.Low\n  ): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({\n      rate,\n      shouldCorrectPitch,\n      pitchCorrectionQuality,\n    });\n  },\n\n  async setVolumeAsync(volume: number): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ volume });\n  },\n\n  async setIsMutedAsync(isMuted: boolean): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ isMuted });\n  },\n\n  async setIsLoopingAsync(isLooping: boolean): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ isLooping });\n  },\n\n  async setProgressUpdateIntervalAsync(\n    progressUpdateIntervalMillis: number\n  ): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ progressUpdateIntervalMillis });\n  },\n};\n\nexport * from './AV.types';\n"]},"metadata":{},"sourceType":"module"}