{"ast":null,"code":"import Animated from \"react-native-reanimated\";\nimport processColor from \"react-native-web/dist/exports/processColor\";\nimport { mix } from \"./Animations\";\nimport { clamp, fract } from \"./Math\";\nvar add = Animated.add,\n  multiply = Animated.multiply,\n  abs = Animated.abs,\n  round = Animated.round,\n  interpolate = Animated.interpolate,\n  sub = Animated.sub,\n  proc = Animated.proc,\n  color = Animated.color,\n  Extrapolate = Animated.Extrapolate,\n  greaterThan = Animated.greaterThan,\n  cond = Animated.cond;\nexport var opacity = function opacity(c) {\n  return (c >> 24 & 255) / 255;\n};\nexport var red = function red(c) {\n  return c >> 16 & 255;\n};\nexport var green = function green(c) {\n  return c >> 8 & 255;\n};\nexport var blue = function blue(c) {\n  return c & 255;\n};\nexport var hsv2rgb = function hsv2rgb(h, s, v) {\n  var K = {\n    x: 1,\n    y: 2 / 3,\n    z: 1 / 3,\n    w: 3\n  };\n  var p = {\n    x: abs(sub(multiply(fract(add(h, K.x)), 6), K.w)),\n    y: abs(sub(multiply(fract(add(h, K.y)), 6), K.w)),\n    z: abs(sub(multiply(fract(add(h, K.z)), 6), K.w))\n  };\n  var rgb = {\n    x: multiply(v, mix(s, K.x, clamp(sub(p.x, K.x), 0, 1))),\n    y: multiply(v, mix(s, K.x, clamp(sub(p.y, K.x), 0, 1))),\n    z: multiply(v, mix(s, K.x, clamp(sub(p.z, K.x), 0, 1)))\n  };\n  return {\n    r: round(multiply(rgb.x, 255)),\n    g: round(multiply(rgb.y, 255)),\n    b: round(multiply(rgb.z, 255))\n  };\n};\nexport var hsv2color = proc(function (h, s, v) {\n  var _hsv2rgb = hsv2rgb(h, s, v),\n    r = _hsv2rgb.r,\n    g = _hsv2rgb.g,\n    b = _hsv2rgb.b;\n  return color(r, g, b);\n});\nexport var colorForBackground = proc(function (r, g, b) {\n  var L = add(multiply(0.299, r), multiply(0.587, g), multiply(0.114, b));\n  return cond(greaterThan(L, 186), color(0, 0, 0), color(255, 255, 255));\n});\nvar rgbToHsv = function rgbToHsv(c) {\n  var r = red(c) / 255;\n  var g = green(c) / 255;\n  var b = blue(c) / 255;\n  var ma = Math.max(r, g, b);\n  var mi = Math.min(r, g, b);\n  var h = 0;\n  var v = ma;\n  var d = ma - mi;\n  var s = ma === 0 ? 0 : d / ma;\n  if (ma === mi) {\n    h = 0;\n  } else {\n    switch (ma) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n      default:\n    }\n    h /= 6;\n  }\n  return {\n    h: h,\n    s: s,\n    v: v\n  };\n};\nvar interpolateColorsHSV = function interpolateColorsHSV(animationValue, inputRange, colors) {\n  var colorsAsHSV = colors.map(function (c) {\n    return rgbToHsv(c);\n  });\n  var h = interpolate(animationValue, {\n    inputRange: inputRange,\n    outputRange: colorsAsHSV.map(function (c) {\n      return c.h;\n    }),\n    extrapolate: Extrapolate.CLAMP\n  });\n  var s = interpolate(animationValue, {\n    inputRange: inputRange,\n    outputRange: colorsAsHSV.map(function (c) {\n      return c.s;\n    }),\n    extrapolate: Extrapolate.CLAMP\n  });\n  var v = interpolate(animationValue, {\n    inputRange: inputRange,\n    outputRange: colorsAsHSV.map(function (c) {\n      return c.v;\n    }),\n    extrapolate: Extrapolate.CLAMP\n  });\n  return hsv2color(h, s, v);\n};\nvar interpolateColorsRGB = function interpolateColorsRGB(animationValue, inputRange, colors) {\n  var r = round(interpolate(animationValue, {\n    inputRange: inputRange,\n    outputRange: colors.map(function (c) {\n      return red(c);\n    }),\n    extrapolate: Extrapolate.CLAMP\n  }));\n  var g = round(interpolate(animationValue, {\n    inputRange: inputRange,\n    outputRange: colors.map(function (c) {\n      return green(c);\n    }),\n    extrapolate: Extrapolate.CLAMP\n  }));\n  var b = round(interpolate(animationValue, {\n    inputRange: inputRange,\n    outputRange: colors.map(function (c) {\n      return blue(c);\n    }),\n    extrapolate: Extrapolate.CLAMP\n  }));\n  var a = interpolate(animationValue, {\n    inputRange: inputRange,\n    outputRange: colors.map(function (c) {\n      return opacity(c);\n    }),\n    extrapolate: Extrapolate.CLAMP\n  });\n  return color(r, g, b, a);\n};\nexport var interpolateColor = function interpolateColor(value, config) {\n  var colorSpace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"rgb\";\n  var inputRange = config.inputRange;\n  var outputRange = config.outputRange.map(function (c) {\n    return typeof c === \"number\" ? c : processColor(c);\n  });\n  if (colorSpace === \"hsv\") {\n    return interpolateColorsHSV(value, inputRange, outputRange);\n  }\n  return interpolateColorsRGB(value, inputRange, outputRange);\n};\nexport var mixColor = function mixColor(value, color1, color2) {\n  var colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"rgb\";\n  return interpolateColor(value, {\n    inputRange: [0, 1],\n    outputRange: [color1, color2]\n  }, colorSpace);\n};","map":{"version":3,"mappings":"AAAA,OAAOA,QAAP,MAAqB,yBAArB;AACA;AAEA,SAASC,GAAT;AACA,SAASC,KAAT,EAAgBC,KAAhB;IAGEC,G,GAWEJ,Q,CAXFI,G;EACAC,Q,GAUEL,Q,CAVFK,Q;EACAC,G,GASEN,Q,CATFM,G;EACAC,K,GAQEP,Q,CARFO,K;EACAC,W,GAOER,Q,CAPFQ,W;EACAC,G,GAMET,Q,CANFS,G;EACAC,I,GAKEV,Q,CALFU,I;EACAC,K,GAIEX,Q,CAJFW,K;EACAC,W,GAGEZ,Q,CAHFY,W;EACAC,W,GAEEb,Q,CAFFa,W;EACAC,I,GACEd,Q,CADFc,I;AAKF,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,CAAD;EAAA,OAAe,CAAEA,CAAC,IAAI,EAAN,GAAY,GAAb,IAAoB,GAAnC;AAAA,CAAhB;AACP,OAAO,IAAMC,GAAG,GAAG,SAANA,GAAM,CAACD,CAAD;EAAA,OAAgBA,CAAC,IAAI,EAAN,GAAY,GAA3B;AAAA,CAAZ;AACP,OAAO,IAAME,KAAK,GAAG,SAARA,KAAQ,CAACF,CAAD;EAAA,OAAgBA,CAAC,IAAI,CAAN,GAAW,GAA1B;AAAA,CAAd;AACP,OAAO,IAAMG,IAAI,GAAG,SAAPA,IAAO,CAACH,CAAD;EAAA,OAAeA,CAAC,GAAG,GAAnB;AAAA,CAAb;AAEP,OAAO,IAAMI,OAAO,GAAG,SAAVA,OAAU,CACrBC,CADqB,EAErBC,CAFqB,EAGrBC,CAHqB,EAIlB;EAEH,IAAMC,CAAC,GAAG;IACRC,CAAC,EAAE,CADK;IAERC,CAAC,EAAE,IAAI,CAFC;IAGRC,CAAC,EAAE,IAAI,CAHC;IAIRC,CAAC,EAAE;EAJK,CAAV;EAOA,IAAMC,CAAC,GAAG;IACRJ,CAAC,EAAEnB,GAAG,CAACG,GAAG,CAACJ,QAAQ,CAACF,KAAK,CAACC,GAAG,CAACiB,CAAD,EAAIG,CAAC,CAACC,CAAN,CAAJ,CAAN,EAAqB,CAArB,CAAT,EAAkCD,CAAC,CAACI,CAApC,CAAJ,CADE;IAERF,CAAC,EAAEpB,GAAG,CAACG,GAAG,CAACJ,QAAQ,CAACF,KAAK,CAACC,GAAG,CAACiB,CAAD,EAAIG,CAAC,CAACE,CAAN,CAAJ,CAAN,EAAqB,CAArB,CAAT,EAAkCF,CAAC,CAACI,CAApC,CAAJ,CAFE;IAGRD,CAAC,EAAErB,GAAG,CAACG,GAAG,CAACJ,QAAQ,CAACF,KAAK,CAACC,GAAG,CAACiB,CAAD,EAAIG,CAAC,CAACG,CAAN,CAAJ,CAAN,EAAqB,CAArB,CAAT,EAAkCH,CAAC,CAACI,CAApC,CAAJ;EAHE,CAAV;EAMA,IAAME,GAAG,GAAG;IACVL,CAAC,EAAEpB,QAAQ,CAACkB,CAAD,EAAItB,GAAG,CAACqB,CAAD,EAAIE,CAAC,CAACC,CAAN,EAASvB,KAAK,CAACO,GAAG,CAACoB,CAAC,CAACJ,CAAH,EAAMD,CAAC,CAACC,CAAR,CAAJ,EAAgB,CAAhB,EAAmB,CAAnB,CAAd,CAAP,CADD;IAEVC,CAAC,EAAErB,QAAQ,CAACkB,CAAD,EAAItB,GAAG,CAACqB,CAAD,EAAIE,CAAC,CAACC,CAAN,EAASvB,KAAK,CAACO,GAAG,CAACoB,CAAC,CAACH,CAAH,EAAMF,CAAC,CAACC,CAAR,CAAJ,EAAgB,CAAhB,EAAmB,CAAnB,CAAd,CAAP,CAFD;IAGVE,CAAC,EAAEtB,QAAQ,CAACkB,CAAD,EAAItB,GAAG,CAACqB,CAAD,EAAIE,CAAC,CAACC,CAAN,EAASvB,KAAK,CAACO,GAAG,CAACoB,CAAC,CAACF,CAAH,EAAMH,CAAC,CAACC,CAAR,CAAJ,EAAgB,CAAhB,EAAmB,CAAnB,CAAd,CAAP;EAHD,CAAZ;EAKA,OAAO;IACLM,CAAC,EAAExB,KAAK,CAACF,QAAQ,CAACyB,GAAG,CAACL,CAAL,EAAQ,GAAR,CAAT,CADH;IAELO,CAAC,EAAEzB,KAAK,CAACF,QAAQ,CAACyB,GAAG,CAACJ,CAAL,EAAQ,GAAR,CAAT,CAFH;IAGLO,CAAC,EAAE1B,KAAK,CAACF,QAAQ,CAACyB,GAAG,CAACH,CAAL,EAAQ,GAAR,CAAT;EAHH,CAAP;AAKD,CA7BM;AA+BP,OAAO,IAAMO,SAAS,GAAGxB,IAAI,CAC3B,UACEW,CADF,EAEEC,CAFF,EAGEC,CAHF,EAIK;EAAA,eACiBH,OAAO,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CADxB;IACKQ,CADL,YACKA,CADL;IACQC,CADR,YACQA,CADR;IACWC,CADX,YACWA,CADX;EAEH,OAAOtB,KAAK,CAACoB,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAZ;AACD,CAR0B,CAAtB;AAWP,OAAO,IAAME,kBAAkB,GAAGzB,IAAI,CACpC,UACEqB,CADF,EAEEC,CAFF,EAGEC,CAHF,EAIK;EACH,IAAMG,CAAC,GAAGhC,GAAG,CAACC,QAAQ,CAAC,KAAD,EAAQ0B,CAAR,CAAT,EAAqB1B,QAAQ,CAAC,KAAD,EAAQ2B,CAAR,CAA7B,EAAyC3B,QAAQ,CAAC,KAAD,EAAQ4B,CAAR,CAAjD,CAAb;EACA,OAAOnB,IAAI,CAACD,WAAW,CAACuB,CAAD,EAAI,GAAJ,CAAZ,EAAsBzB,KAAK,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA3B,EAAsCA,KAAK,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAA3C,CAAX;AACD,CARmC,CAA/B;AAWP,IAAM0B,QAAQ,GAAG,SAAXA,QAAW,CAACrB,CAAD,EAAe;EAC9B,IAAMe,CAAC,GAAGd,GAAG,CAACD,CAAD,CAAH,GAAS,GAAnB;EACA,IAAMgB,CAAC,GAAGd,KAAK,CAACF,CAAD,CAAL,GAAW,GAArB;EACA,IAAMiB,CAAC,GAAGd,IAAI,CAACH,CAAD,CAAJ,GAAU,GAApB;EAEA,IAAMsB,EAAE,GAAGC,IAAI,CAACC,GAAL,CAAST,CAAT,EAAYC,CAAZ,EAAeC,CAAf,CAAX;EACA,IAAMQ,EAAE,GAAGF,IAAI,CAACG,GAAL,CAASX,CAAT,EAAYC,CAAZ,EAAeC,CAAf,CAAX;EACA,IAAIZ,CAAC,GAAG,CAAR;EACA,IAAME,CAAC,GAAGe,EAAV;EAEA,IAAMK,CAAC,GAAGL,EAAE,GAAGG,EAAf;EACA,IAAMnB,CAAC,GAAGgB,EAAE,KAAK,CAAP,GAAW,CAAX,GAAeK,CAAC,GAAGL,EAA7B;EACA,IAAIA,EAAE,KAAKG,EAAX,EAAe;IACbpB,CAAC,GAAG,CAAJ;EACD,CAFD,MAEO;IACL,QAAQiB,EAAR;MACE,KAAKP,CAAL;QACEV,CAAC,GAAG,CAACW,CAAC,GAAGC,CAAL,IAAUU,CAAV,IAAeX,CAAC,GAAGC,CAAJ,GAAQ,CAAR,GAAY,CAA3B,CAAJ;QACA;MACF,KAAKD,CAAL;QACEX,CAAC,GAAG,CAACY,CAAC,GAAGF,CAAL,IAAUY,CAAV,GAAc,CAAlB;QACA;MACF,KAAKV,CAAL;QACEZ,CAAC,GAAG,CAACU,CAAC,GAAGC,CAAL,IAAUW,CAAV,GAAc,CAAlB;QACA;MACF;IAVF;IAYAtB,CAAC,IAAI,CAAL;EACD;EACD,OAAO;IAAEA,CAAC,EAADA,CAAF;IAAKC,CAAC,EAADA,CAAL;IAAQC,CAAC,EAADA;EAAR,CAAP;AACD,CA9BD;AAgCA,IAAMqB,oBAAoB,GAAG,SAAvBA,oBAAuB,CAC3BC,cAD2B,EAE3BC,UAF2B,EAG3BC,MAH2B,EAID;EAC1B,IAAMC,WAAW,GAAGD,MAAM,CAACE,GAAP,CAAW,UAACjC,CAAD;IAAA,OAAOqB,QAAQ,CAACrB,CAAD,CAAf;EAAA,CAAX,CAApB;EACA,IAAMK,CAAC,GAAGb,WAAW,CAACqC,cAAD,EAAiB;IACpCC,UAAU,EAAVA,UADoC;IAEpCI,WAAW,EAAEF,WAAW,CAACC,GAAZ,CAAgB,UAACjC,CAAD;MAAA,OAAOA,CAAC,CAACK,CAAT;IAAA,CAAhB,CAFuB;IAGpC8B,WAAW,EAAEvC,WAAW,CAACwC;EAHW,CAAjB,CAArB;EAKA,IAAM9B,CAAC,GAAGd,WAAW,CAACqC,cAAD,EAAiB;IACpCC,UAAU,EAAVA,UADoC;IAEpCI,WAAW,EAAEF,WAAW,CAACC,GAAZ,CAAgB,UAACjC,CAAD;MAAA,OAAOA,CAAC,CAACM,CAAT;IAAA,CAAhB,CAFuB;IAGpC6B,WAAW,EAAEvC,WAAW,CAACwC;EAHW,CAAjB,CAArB;EAKA,IAAM7B,CAAC,GAAGf,WAAW,CAACqC,cAAD,EAAiB;IACpCC,UAAU,EAAVA,UADoC;IAEpCI,WAAW,EAAEF,WAAW,CAACC,GAAZ,CAAgB,UAACjC,CAAD;MAAA,OAAOA,CAAC,CAACO,CAAT;IAAA,CAAhB,CAFuB;IAGpC4B,WAAW,EAAEvC,WAAW,CAACwC;EAHW,CAAjB,CAArB;EAKA,OAAOlB,SAAS,CAACb,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAhB;AACD,CAtBD;AAwBA,IAAM8B,oBAAoB,GAAG,SAAvBA,oBAAuB,CAC3BR,cAD2B,EAE3BC,UAF2B,EAG3BC,MAH2B,EAIxB;EACH,IAAMhB,CAAC,GAAGxB,KAAK,CACbC,WAAW,CAACqC,cAAD,EAAiB;IAC1BC,UAAU,EAAVA,UAD0B;IAE1BI,WAAW,EAAEH,MAAM,CAACE,GAAP,CAAW,UAACjC,CAAD;MAAA,OAAOC,GAAG,CAACD,CAAD,CAAV;IAAA,CAAX,CAFa;IAG1BmC,WAAW,EAAEvC,WAAW,CAACwC;EAHC,CAAjB,CADE,CAAf;EAOA,IAAMpB,CAAC,GAAGzB,KAAK,CACbC,WAAW,CAACqC,cAAD,EAAiB;IAC1BC,UAAU,EAAVA,UAD0B;IAE1BI,WAAW,EAAEH,MAAM,CAACE,GAAP,CAAW,UAACjC,CAAD;MAAA,OAAOE,KAAK,CAACF,CAAD,CAAZ;IAAA,CAAX,CAFa;IAG1BmC,WAAW,EAAEvC,WAAW,CAACwC;EAHC,CAAjB,CADE,CAAf;EAOA,IAAMnB,CAAC,GAAG1B,KAAK,CACbC,WAAW,CAACqC,cAAD,EAAiB;IAC1BC,UAAU,EAAVA,UAD0B;IAE1BI,WAAW,EAAEH,MAAM,CAACE,GAAP,CAAW,UAACjC,CAAD;MAAA,OAAOG,IAAI,CAACH,CAAD,CAAX;IAAA,CAAX,CAFa;IAG1BmC,WAAW,EAAEvC,WAAW,CAACwC;EAHC,CAAjB,CADE,CAAf;EAOA,IAAME,CAAC,GAAG9C,WAAW,CAACqC,cAAD,EAAiB;IACpCC,UAAU,EAAVA,UADoC;IAEpCI,WAAW,EAAEH,MAAM,CAACE,GAAP,CAAW,UAACjC,CAAD;MAAA,OAAOD,OAAO,CAACC,CAAD,CAAd;IAAA,CAAX,CAFuB;IAGpCmC,WAAW,EAAEvC,WAAW,CAACwC;EAHW,CAAjB,CAArB;EAMA,OAAOzC,KAAK,CAACoB,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUqB,CAAV,CAAZ;AACD,CAjCD;AAwCA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAC9BC,KAD8B,EAE9BC,MAF8B,EAIJ;EAAA,IAD1BC,UAC0B,uEADE,KACF;EAAA,IAClBZ,UADkB,GACHW,MADG,CAClBX,UADkB;EAE1B,IAAMI,WAAW,GAAGO,MAAM,CAACP,WAAP,CAAmBD,GAAnB,CAAuB,UAACjC,CAAD;IAAA,OACzC,OAAOA,CAAP,KAAa,QAAb,GAAwBA,CAAxB,GAA4B2C,YAAY,CAAC3C,CAAD,CADC;EAAA,CAAvB,CAApB;EAGA,IAAI0C,UAAU,KAAK,KAAnB,EAA0B;IACxB,OAAOd,oBAAoB,CAACY,KAAD,EAAQV,UAAR,EAAoBI,WAApB,CAA3B;EACD;EACD,OAAOG,oBAAoB,CAACG,KAAD,EAAQV,UAAR,EAAoBI,WAApB,CAA3B;AACD,CAbM;AAeP,OAAO,IAAMU,QAAQ,GAAG,SAAXA,QAAW,CACtBJ,KADsB,EAEtBK,MAFsB,EAGtBC,MAHsB;EAAA,IAItBJ,UAJsB,uEAIM,KAJN;EAAA,OAMtBH,gBAAgB,CACdC,KADc,EAEd;IACEV,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADd;IAEEI,WAAW,EAAE,CAACW,MAAD,EAASC,MAAT;EAFf,CAFc,EAMdJ,UANc,CANM;AAAA,CAAjB","names":["Animated","mix","clamp","fract","add","multiply","abs","round","interpolate","sub","proc","color","Extrapolate","greaterThan","cond","opacity","c","red","green","blue","hsv2rgb","h","s","v","K","x","y","z","w","p","rgb","r","g","b","hsv2color","colorForBackground","L","rgbToHsv","ma","Math","max","mi","min","d","interpolateColorsHSV","animationValue","inputRange","colors","colorsAsHSV","map","outputRange","extrapolate","CLAMP","interpolateColorsRGB","a","interpolateColor","value","config","colorSpace","processColor","mixColor","color1","color2"],"sources":["Colors.ts"],"sourcesContent":["import Animated from \"react-native-reanimated\";\nimport { processColor } from \"react-native\";\n\nimport { mix } from \"./Animations\";\nimport { clamp, fract } from \"./Math\";\n\nconst {\n  add,\n  multiply,\n  abs,\n  round,\n  interpolate,\n  sub,\n  proc,\n  color,\n  Extrapolate,\n  greaterThan,\n  cond,\n} = Animated;\n\ntype Color = Animated.Adaptable<string> | Animated.Adaptable<number>;\n\nexport const opacity = (c: number) => ((c >> 24) & 255) / 255;\nexport const red = (c: number) => (c >> 16) & 255;\nexport const green = (c: number) => (c >> 8) & 255;\nexport const blue = (c: number) => c & 255;\n\nexport const hsv2rgb = (\n  h: Animated.Adaptable<number>,\n  s: Animated.Adaptable<number>,\n  v: Animated.Adaptable<number>\n) => {\n  // vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  const K = {\n    x: 1,\n    y: 2 / 3,\n    z: 1 / 3,\n    w: 3,\n  };\n  // vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  const p = {\n    x: abs(sub(multiply(fract(add(h, K.x)), 6), K.w)),\n    y: abs(sub(multiply(fract(add(h, K.y)), 6), K.w)),\n    z: abs(sub(multiply(fract(add(h, K.z)), 6), K.w)),\n  };\n  // return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n  const rgb = {\n    x: multiply(v, mix(s, K.x, clamp(sub(p.x, K.x), 0, 1))),\n    y: multiply(v, mix(s, K.x, clamp(sub(p.y, K.x), 0, 1))),\n    z: multiply(v, mix(s, K.x, clamp(sub(p.z, K.x), 0, 1))),\n  };\n  return {\n    r: round(multiply(rgb.x, 255)),\n    g: round(multiply(rgb.y, 255)),\n    b: round(multiply(rgb.z, 255)),\n  };\n};\n\nexport const hsv2color = proc(\n  (\n    h: Animated.Adaptable<number>,\n    s: Animated.Adaptable<number>,\n    v: Animated.Adaptable<number>\n  ) => {\n    const { r, g, b } = hsv2rgb(h, s, v);\n    return color(r, g, b);\n  }\n);\n\nexport const colorForBackground = proc(\n  (\n    r: Animated.Adaptable<number>,\n    g: Animated.Adaptable<number>,\n    b: Animated.Adaptable<number>\n  ) => {\n    const L = add(multiply(0.299, r), multiply(0.587, g), multiply(0.114, b));\n    return cond(greaterThan(L, 186), color(0, 0, 0), color(255, 255, 255));\n  }\n);\n\nconst rgbToHsv = (c: number) => {\n  const r = red(c) / 255;\n  const g = green(c) / 255;\n  const b = blue(c) / 255;\n\n  const ma = Math.max(r, g, b);\n  const mi = Math.min(r, g, b);\n  let h = 0;\n  const v = ma;\n\n  const d = ma - mi;\n  const s = ma === 0 ? 0 : d / ma;\n  if (ma === mi) {\n    h = 0; // achromatic\n  } else {\n    switch (ma) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n      default: // do nothing\n    }\n    h /= 6;\n  }\n  return { h, s, v };\n};\n\nconst interpolateColorsHSV = (\n  animationValue: Animated.Adaptable<number>,\n  inputRange: readonly Animated.Adaptable<number>[],\n  colors: number[]\n): Animated.Node<number> => {\n  const colorsAsHSV = colors.map((c) => rgbToHsv(c));\n  const h = interpolate(animationValue, {\n    inputRange,\n    outputRange: colorsAsHSV.map((c) => c.h),\n    extrapolate: Extrapolate.CLAMP,\n  });\n  const s = interpolate(animationValue, {\n    inputRange,\n    outputRange: colorsAsHSV.map((c) => c.s),\n    extrapolate: Extrapolate.CLAMP,\n  });\n  const v = interpolate(animationValue, {\n    inputRange,\n    outputRange: colorsAsHSV.map((c) => c.v),\n    extrapolate: Extrapolate.CLAMP,\n  });\n  return hsv2color(h, s, v);\n};\n\nconst interpolateColorsRGB = (\n  animationValue: Animated.Adaptable<number>,\n  inputRange: readonly Animated.Adaptable<number>[],\n  colors: number[]\n) => {\n  const r = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map((c) => red(c)),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const g = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map((c) => green(c)),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const b = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map((c) => blue(c)),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const a = interpolate(animationValue, {\n    inputRange,\n    outputRange: colors.map((c) => opacity(c)),\n    extrapolate: Extrapolate.CLAMP,\n  });\n\n  return color(r, g, b, a);\n};\n\ninterface ColorInterpolationConfig {\n  inputRange: readonly Animated.Adaptable<number>[];\n  outputRange: Color[];\n}\n\nexport const interpolateColor = (\n  value: Animated.Adaptable<number>,\n  config: ColorInterpolationConfig,\n  colorSpace: \"hsv\" | \"rgb\" = \"rgb\"\n): Animated.Node<number> => {\n  const { inputRange } = config;\n  const outputRange = config.outputRange.map((c) =>\n    typeof c === \"number\" ? c : processColor(c)\n  );\n  if (colorSpace === \"hsv\") {\n    return interpolateColorsHSV(value, inputRange, outputRange);\n  }\n  return interpolateColorsRGB(value, inputRange, outputRange);\n};\n\nexport const mixColor = (\n  value: Animated.Adaptable<number>,\n  color1: Color,\n  color2: Color,\n  colorSpace: \"hsv\" | \"rgb\" = \"rgb\"\n) =>\n  interpolateColor(\n    value,\n    {\n      inputRange: [0, 1],\n      outputRange: [color1, color2],\n    },\n    colorSpace\n  );\n"]},"metadata":{},"sourceType":"module"}