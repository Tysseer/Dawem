{"ast":null,"code":"import Animated from \"react-native-reanimated\";\nimport { vec } from \"./Vectors\";\nvar divide = Animated.divide,\n  sub = Animated.sub,\n  multiply = Animated.multiply,\n  add = Animated.add,\n  cos = Animated.cos,\n  sin = Animated.sin;\nexport var translateZ = function translateZ(perspective, z) {\n  return {\n    scale: divide(perspective, sub(perspective, z))\n  };\n};\nexport var translate = function translate(_ref) {\n  var translateX = _ref.x,\n    translateY = _ref.y;\n  return [{\n    translateX: translateX\n  }, {\n    translateY: translateY\n  }];\n};\nexport var transformOrigin = function transformOrigin(_ref2) {\n  var x = _ref2.x,\n    y = _ref2.y;\n  for (var _len = arguments.length, transformations = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    transformations[_key - 1] = arguments[_key];\n  }\n  return [{\n    translateX: x\n  }, {\n    translateY: y\n  }].concat(transformations, [{\n    translateX: multiply(x, -1)\n  }, {\n    translateY: multiply(y, -1)\n  }]);\n};\nexport var rotateTranslation = function rotateTranslation(tr, rotate) {\n  return {\n    x: sub(multiply(tr.x, cos(rotate)), multiply(tr.y, sin(rotate))),\n    y: add(multiply(tr.x, sin(rotate)), multiply(tr.y, cos(rotate)))\n  };\n};\nexport var scaleTranslation = function scaleTranslation(tr, scale) {\n  return vec.multiply(tr, scale);\n};","map":{"version":3,"mappings":"AAAA,OAAOA,QAAP,MAAqB,yBAArB;AAEA,SAAiBC,GAAjB;IAGQC,M,GAAyCF,Q,CAAzCE,M;EAAQC,G,GAAiCH,Q,CAAjCG,G;EAAKC,Q,GAA4BJ,Q,CAA5BI,Q;EAAUC,G,GAAkBL,Q,CAAlBK,G;EAAKC,G,GAAaN,Q,CAAbM,G;EAAKC,G,GAAQP,Q,CAARO,G;AAEzC,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CACxBC,WADwB,EAExBC,CAFwB;EAAA,OAGpB;IAAEC,KAAK,EAAET,MAAM,CAACO,WAAD,EAAcN,GAAG,CAACM,WAAD,EAAcC,CAAd,CAAjB;EAAf,CAHoB;AAAA,CAAnB;AAKP,OAAO,IAAME,SAAS,GAAG,SAAZA,SAAY;EAAA,IAAMC,UAAN,QAAGC,CAAH;IAAqBC,UAArB,QAAkBC,CAAlB;EAAA,OAA8C,CACrE;IAAEH,UAAU,EAAVA;EAAF,CADqE,EAErE;IAAEE,UAAU,EAAVA;EAAF,CAFqE,CAA9C;AAAA,CAAlB;AAKP,OAAO,IAAME,eAAe,GAAG,SAAlBA,eAAkB;EAAA,IAC3BH,CAD2B,SAC3BA,CAD2B;IACxBE,CADwB,SACxBA,CADwB;EAAA,kCAE1BE,eAF0B;IAE1BA,eAF0B;EAAA;EAAA,QAI7B;IAAEL,UAAU,EAAEC;EAAd,CAJ6B,EAK7B;IAAEC,UAAU,EAAEC;EAAd,CAL6B,SAM1BE,eAN0B,GAO7B;IAAEL,UAAU,EAAET,QAAQ,CAACU,CAAD,EAAI,CAAC,CAAL;EAAtB,CAP6B,EAQ7B;IAAEC,UAAU,EAAEX,QAAQ,CAACY,CAAD,EAAI,CAAC,CAAL;EAAtB,CAR6B;AAAA,CAAxB;AAWP,OAAO,IAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,CAC/BC,EAD+B,EAE/BC,MAF+B;EAAA,OAG3B;IACJP,CAAC,EAAEX,GAAG,CAACC,QAAQ,CAACgB,EAAE,CAACN,CAAJ,EAAOR,GAAG,CAACe,MAAD,CAAV,CAAT,EAA8BjB,QAAQ,CAACgB,EAAE,CAACJ,CAAJ,EAAOT,GAAG,CAACc,MAAD,CAAV,CAAtC,CADF;IAEJL,CAAC,EAAEX,GAAG,CAACD,QAAQ,CAACgB,EAAE,CAACN,CAAJ,EAAOP,GAAG,CAACc,MAAD,CAAV,CAAT,EAA8BjB,QAAQ,CAACgB,EAAE,CAACJ,CAAJ,EAAOV,GAAG,CAACe,MAAD,CAAV,CAAtC;EAFF,CAH2B;AAAA,CAA1B;AAQP,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAC9BF,EAD8B,EAE9BT,KAF8B;EAAA,OAG3BV,GAAG,CAACG,QAAJ,CAAagB,EAAb,EAAiBT,KAAjB,CAH2B;AAAA,CAAzB","names":["Animated","vec","divide","sub","multiply","add","cos","sin","translateZ","perspective","z","scale","translate","translateX","x","translateY","y","transformOrigin","transformations","rotateTranslation","tr","rotate","scaleTranslation"],"sources":["Transformations.ts"],"sourcesContent":["import Animated from \"react-native-reanimated\";\n\nimport { Vector, vec } from \"./Vectors\";\nimport { Transforms2d } from \"./Matrix3\";\n\nconst { divide, sub, multiply, add, cos, sin } = Animated;\n\nexport const translateZ = (\n  perspective: Animated.Adaptable<number>,\n  z: Animated.Adaptable<number>\n) => ({ scale: divide(perspective, sub(perspective, z)) });\n\nexport const translate = ({ x: translateX, y: translateY }: Vector) => [\n  { translateX },\n  { translateY },\n];\n\nexport const transformOrigin = (\n  { x, y }: Vector,\n  ...transformations: Transforms2d\n): Transforms2d => [\n  { translateX: x },\n  { translateY: y },\n  ...transformations,\n  { translateX: multiply(x, -1) },\n  { translateY: multiply(y, -1) },\n];\n\nexport const rotateTranslation = (\n  tr: Vector,\n  rotate: Animated.Adaptable<number>\n) => ({\n  x: sub(multiply(tr.x, cos(rotate)), multiply(tr.y, sin(rotate))),\n  y: add(multiply(tr.x, sin(rotate)), multiply(tr.y, cos(rotate))),\n});\n\nexport const scaleTranslation = (\n  tr: Vector,\n  scale: Animated.Adaptable<number>\n) => vec.multiply(tr, scale);\n"]},"metadata":{},"sourceType":"module"}