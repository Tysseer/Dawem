{"ast":null,"code":"import Animated from \"react-native-reanimated\";\nimport { atan2 } from \"./Math\";\nvar add = Animated.add,\n  multiply = Animated.multiply,\n  sqrt = Animated.sqrt,\n  cos = Animated.cos,\n  sin = Animated.sin,\n  sub = Animated.sub,\n  divide = Animated.divide,\n  pow = Animated.pow,\n  tan = Animated.tan;\nvar exhaustiveCheck = function exhaustiveCheck(a) {\n  throw new Error(\"Unexhaustive handling for \" + a);\n};\nvar identityMatrix = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];\nvar translateXMatrix = function translateXMatrix(x) {\n  return [[1, 0, x], [0, 1, 0], [0, 0, 1]];\n};\nvar translateYMatrix = function translateYMatrix(y) {\n  return [[1, 0, 0], [0, 1, y], [0, 0, 1]];\n};\nvar scaleMatrix = function scaleMatrix(s) {\n  return [[s, 0, 0], [0, s, 0], [0, 0, 1]];\n};\nvar scaleXMatrix = function scaleXMatrix(s) {\n  return [[s, 0, 0], [0, 1, 0], [0, 0, 1]];\n};\nvar scaleYMatrix = function scaleYMatrix(s) {\n  return [[1, 0, 0], [0, s, 0], [0, 0, 1]];\n};\nvar skewXMatrix = function skewXMatrix(s) {\n  return [[1, tan(s), 0], [0, 1, 0], [0, 0, 1]];\n};\nvar skewYMatrix = function skewYMatrix(s) {\n  return [[1, 0, 0], [tan(s), 1, 0], [0, 0, 1]];\n};\nvar rotateZMatrix = function rotateZMatrix(r) {\n  return [[cos(r), multiply(-1, sin(r)), 0], [sin(r), cos(r), 0], [0, 0, 1]];\n};\nexport var dot3 = function dot3(row, col) {\n  return add(multiply(row[0], col[0]), multiply(row[1], col[1]), multiply(row[2], col[2]));\n};\nexport var matrixVecMul3 = function matrixVecMul3(m, v) {\n  return [dot3(m[0], v), dot3(m[1], v), dot3(m[2], v)];\n};\nexport var multiply3 = function multiply3(m1, m2) {\n  var col0 = [m2[0][0], m2[1][0], m2[2][0]];\n  var col1 = [m2[0][1], m2[1][1], m2[2][1]];\n  var col2 = [m2[0][2], m2[1][2], m2[2][2]];\n  return [[dot3(m1[0], col0), dot3(m1[0], col1), dot3(m1[0], col2)], [dot3(m1[1], col0), dot3(m1[1], col1), dot3(m1[1], col2)], [dot3(m1[2], col0), dot3(m1[2], col1), dot3(m1[2], col2)]];\n};\nexport var processTransform2d = function processTransform2d(transforms) {\n  return transforms.reduce(function (acc, transform) {\n    var key = Object.keys(transform)[0];\n    var value = transform[key];\n    if (key === \"translateX\") {\n      return multiply3(acc, translateXMatrix(value));\n    }\n    if (key === \"translateY\") {\n      return multiply3(acc, translateYMatrix(value));\n    }\n    if (key === \"scale\") {\n      return multiply3(acc, scaleMatrix(value));\n    }\n    if (key === \"scaleX\") {\n      return multiply3(acc, scaleXMatrix(value));\n    }\n    if (key === \"scaleY\") {\n      return multiply3(acc, scaleYMatrix(value));\n    }\n    if (key === \"skewX\") {\n      return multiply3(acc, skewXMatrix(value));\n    }\n    if (key === \"skewY\") {\n      return multiply3(acc, skewYMatrix(value));\n    }\n    if (key === \"rotate\" || key === \"rotateZ\") {\n      return multiply3(acc, rotateZMatrix(value));\n    }\n    return exhaustiveCheck(key);\n  }, identityMatrix);\n};\nvar isMatrix3 = function isMatrix3(arg) {\n  return arg.length === 3 && arg[0] instanceof Array;\n};\nexport var decompose2d = function decompose2d(arg) {\n  var m = isMatrix3(arg) ? arg : processTransform2d(arg);\n  var a = m[0][0];\n  var b = m[1][0];\n  var c = m[0][1];\n  var d = m[1][1];\n  var translateX = m[0][2];\n  var translateY = m[1][2];\n  var E = divide(add(a, d), 2);\n  var F = divide(sub(a, d), 2);\n  var G = divide(add(c, b), 2);\n  var H = divide(sub(c, b), 2);\n  var Q = sqrt(add(pow(E, 2), pow(H, 2)));\n  var R = sqrt(add(pow(F, 2), pow(G, 2)));\n  var scaleX = add(Q, R);\n  var scaleY = sub(Q, R);\n  var a1 = atan2(G, F);\n  var a2 = atan2(H, E);\n  var theta = divide(sub(a2, a1), 2);\n  var phi = divide(add(a2, a1), 2);\n  return [{\n    translateX: translateX\n  }, {\n    translateY: translateY\n  }, {\n    rotateZ: multiply(-1, theta)\n  }, {\n    scaleX: scaleX\n  }, {\n    scaleY: scaleY\n  }, {\n    rotateZ: multiply(-1, phi)\n  }];\n};\nvar adjugate = function adjugate(m) {\n  return [[sub(multiply(m[1][1], m[2][2]), multiply(m[1][2], m[2][1])), sub(multiply(m[0][2], m[2][1]), multiply(m[0][1], m[2][2])), sub(multiply(m[0][1], m[1][2]), multiply(m[0][2], m[1][1]))], [sub(multiply(m[1][2], m[2][0]), multiply(m[1][0], m[2][2])), sub(multiply(m[0][0], m[2][2]), multiply(m[0][2], m[2][0])), sub(multiply(m[0][2], m[1][0]), multiply(m[0][0], m[1][2]))], [sub(multiply(m[1][0], m[2][1]), multiply(m[1][1], m[2][0])), sub(multiply(m[0][1], m[2][0]), multiply(m[0][0], m[2][1])), sub(multiply(m[0][0], m[1][1]), multiply(m[0][1], m[1][0]))]];\n};\nvar basisToPoints = function basisToPoints(_ref) {\n  var p1 = _ref.p1,\n    p2 = _ref.p2,\n    p3 = _ref.p3,\n    p4 = _ref.p4;\n  var m = [[p1.x, p2.x, p3.x], [p1.y, p2.y, p3.y], [1, 1, 1]];\n  var v = matrixVecMul3(adjugate(m), [p4.x, p4.y, 1]);\n  return multiply3(m, [[v[0], 0, 0], [0, v[1], 0], [0, 0, v[2]]]);\n};\nexport var transform2d = function transform2d(params) {\n  var s = basisToPoints(params.canvas);\n  var d = basisToPoints(params.projected);\n  var t = multiply3(d, adjugate(s));\n  return [[divide(t[0][0], t[2][2]), divide(t[0][1], t[2][2]), divide(t[0][2], t[2][2])], [divide(t[1][0], t[2][2]), divide(t[1][1], t[2][2]), divide(t[1][2], t[2][2])], [divide(t[2][0], t[2][2]), divide(t[2][1], t[2][2]), 1]];\n};","map":{"version":3,"mappings":"AACA,OAAOA,QAAP,MAAqB,yBAArB;AAEA,SAASC,KAAT;IAGQC,G,GAAyDF,Q,CAAzDE,G;EAAKC,Q,GAAoDH,Q,CAApDG,Q;EAAUC,I,GAA0CJ,Q,CAA1CI,I;EAAMC,G,GAAoCL,Q,CAApCK,G;EAAKC,G,GAA+BN,Q,CAA/BM,G;EAAKC,G,GAA0BP,Q,CAA1BO,G;EAAKC,M,GAAqBR,Q,CAArBQ,M;EAAQC,G,GAAaT,Q,CAAbS,G;EAAKC,G,GAAQV,Q,CAARU,G;AAmCzD,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,CAAD,EAAqB;EAC3C,MAAM,IAAIC,KAAJ,gCAAuCD,CAAvC,CAAN;AACD,CAFD;AAIA,IAAME,cAAuB,GAAG,CAC9B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAD8B,EAE9B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAF8B,EAG9B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAH8B,CAAhC;AAMA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,CAAD;EAAA,OAA4C,CACnE,CAAC,CAAD,EAAI,CAAJ,EAAOA,CAAP,CADmE,EAEnE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFmE,EAGnE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHmE,CAA5C;AAAA,CAAzB;AAMA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,CAAD;EAAA,OAA4C,CACnE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADmE,EAEnE,CAAC,CAAD,EAAI,CAAJ,EAAOA,CAAP,CAFmE,EAGnE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHmE,CAA5C;AAAA,CAAzB;AAMA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,CAAD;EAAA,OAA4C,CAC9D,CAACA,CAAD,EAAI,CAAJ,EAAO,CAAP,CAD8D,EAE9D,CAAC,CAAD,EAAIA,CAAJ,EAAO,CAAP,CAF8D,EAG9D,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAH8D,CAA5C;AAAA,CAApB;AAMA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACD,CAAD;EAAA,OAA4C,CAC/D,CAACA,CAAD,EAAI,CAAJ,EAAO,CAAP,CAD+D,EAE/D,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAF+D,EAG/D,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAH+D,CAA5C;AAAA,CAArB;AAMA,IAAME,YAAY,GAAG,SAAfA,YAAe,CAACF,CAAD;EAAA,OAA4C,CAC/D,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAD+D,EAE/D,CAAC,CAAD,EAAIA,CAAJ,EAAO,CAAP,CAF+D,EAG/D,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAH+D,CAA5C;AAAA,CAArB;AAMA,IAAMG,WAAW,GAAG,SAAdA,WAAc,CAACH,CAAD;EAAA,OAA4C,CAC9D,CAAC,CAAD,EAAIV,GAAG,CAACU,CAAD,CAAP,EAAY,CAAZ,CAD8D,EAE9D,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAF8D,EAG9D,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAH8D,CAA5C;AAAA,CAApB;AAMA,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAACJ,CAAD;EAAA,OAA4C,CAC9D,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAD8D,EAE9D,CAACV,GAAG,CAACU,CAAD,CAAJ,EAAS,CAAT,EAAY,CAAZ,CAF8D,EAG9D,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAH8D,CAA5C;AAAA,CAApB;AAMA,IAAMK,aAAa,GAAG,SAAhBA,aAAgB,CAACC,CAAD;EAAA,OAA4C,CAChE,CAACrB,GAAG,CAACqB,CAAD,CAAJ,EAASvB,QAAQ,CAAC,CAAC,CAAF,EAAKG,GAAG,CAACoB,CAAD,CAAR,CAAjB,EAA+B,CAA/B,CADgE,EAEhE,CAACpB,GAAG,CAACoB,CAAD,CAAJ,EAASrB,GAAG,CAACqB,CAAD,CAAZ,EAAiB,CAAjB,CAFgE,EAGhE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHgE,CAA5C;AAAA,CAAtB;AAMA,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,GAAD,EAAYC,GAAZ;EAAA,OAClB3B,GAAG,CACDC,QAAQ,CAACyB,GAAG,CAAC,CAAD,CAAJ,EAASC,GAAG,CAAC,CAAD,CAAZ,CADP,EAED1B,QAAQ,CAACyB,GAAG,CAAC,CAAD,CAAJ,EAASC,GAAG,CAAC,CAAD,CAAZ,CAFP,EAGD1B,QAAQ,CAACyB,GAAG,CAAC,CAAD,CAAJ,EAASC,GAAG,CAAC,CAAD,CAAZ,CAHP,CADe;AAAA,CAAb;AAOP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,CAAD,EAAaC,CAAb;EAAA,OAC3B,CAACL,IAAI,CAACI,CAAC,CAAC,CAAD,CAAF,EAAOC,CAAP,CAAL,EAAgBL,IAAI,CAACI,CAAC,CAAC,CAAD,CAAF,EAAOC,CAAP,CAApB,EAA+BL,IAAI,CAACI,CAAC,CAAC,CAAD,CAAF,EAAOC,CAAP,CAAnC,CAD2B;AAAA,CAAtB;AAGP,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,EAAD,EAAcC,EAAd,EAA8B;EACrD,IAAMC,IAAI,GAAG,CAACD,EAAE,CAAC,CAAD,CAAF,CAAM,CAAN,CAAD,EAAWA,EAAE,CAAC,CAAD,CAAF,CAAM,CAAN,CAAX,EAAqBA,EAAE,CAAC,CAAD,CAAF,CAAM,CAAN,CAArB,CAAb;EACA,IAAME,IAAI,GAAG,CAACF,EAAE,CAAC,CAAD,CAAF,CAAM,CAAN,CAAD,EAAWA,EAAE,CAAC,CAAD,CAAF,CAAM,CAAN,CAAX,EAAqBA,EAAE,CAAC,CAAD,CAAF,CAAM,CAAN,CAArB,CAAb;EACA,IAAMG,IAAI,GAAG,CAACH,EAAE,CAAC,CAAD,CAAF,CAAM,CAAN,CAAD,EAAWA,EAAE,CAAC,CAAD,CAAF,CAAM,CAAN,CAAX,EAAqBA,EAAE,CAAC,CAAD,CAAF,CAAM,CAAN,CAArB,CAAb;EACA,OAAO,CACL,CAACR,IAAI,CAACO,EAAE,CAAC,CAAD,CAAH,EAAQE,IAAR,CAAL,EAAoBT,IAAI,CAACO,EAAE,CAAC,CAAD,CAAH,EAAQG,IAAR,CAAxB,EAAuCV,IAAI,CAACO,EAAE,CAAC,CAAD,CAAH,EAAQI,IAAR,CAA3C,CADK,EAEL,CAACX,IAAI,CAACO,EAAE,CAAC,CAAD,CAAH,EAAQE,IAAR,CAAL,EAAoBT,IAAI,CAACO,EAAE,CAAC,CAAD,CAAH,EAAQG,IAAR,CAAxB,EAAuCV,IAAI,CAACO,EAAE,CAAC,CAAD,CAAH,EAAQI,IAAR,CAA3C,CAFK,EAGL,CAACX,IAAI,CAACO,EAAE,CAAC,CAAD,CAAH,EAAQE,IAAR,CAAL,EAAoBT,IAAI,CAACO,EAAE,CAAC,CAAD,CAAH,EAAQG,IAAR,CAAxB,EAAuCV,IAAI,CAACO,EAAE,CAAC,CAAD,CAAH,EAAQI,IAAR,CAA3C,CAHK,CAAP;AAKD,CATM;AAWP,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,UAAD;EAAA,OAChCA,UAAU,CAACC,MAAX,CAAkB,UAACC,GAAD,EAAMC,SAAN,EAAoB;IACpC,IAAMC,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYH,SAAZ,EAAuB,CAAvB,CAAZ;IACA,IAAMI,KAAK,GAAIJ,SAAD,CAAiDC,GAAjD,CAAd;IACA,IAAIA,GAAG,KAAK,YAAZ,EAA0B;MACxB,OAAOX,SAAS,CAACS,GAAD,EAAM3B,gBAAgB,CAACgC,KAAD,CAAtB,CAAhB;IACD;IACD,IAAIH,GAAG,KAAK,YAAZ,EAA0B;MACxB,OAAOX,SAAS,CAACS,GAAD,EAAMzB,gBAAgB,CAAC8B,KAAD,CAAtB,CAAhB;IACD;IACD,IAAIH,GAAG,KAAK,OAAZ,EAAqB;MACnB,OAAOX,SAAS,CAACS,GAAD,EAAMvB,WAAW,CAAC4B,KAAD,CAAjB,CAAhB;IACD;IACD,IAAIH,GAAG,KAAK,QAAZ,EAAsB;MACpB,OAAOX,SAAS,CAACS,GAAD,EAAMrB,YAAY,CAAC0B,KAAD,CAAlB,CAAhB;IACD;IACD,IAAIH,GAAG,KAAK,QAAZ,EAAsB;MACpB,OAAOX,SAAS,CAACS,GAAD,EAAMpB,YAAY,CAACyB,KAAD,CAAlB,CAAhB;IACD;IACD,IAAIH,GAAG,KAAK,OAAZ,EAAqB;MACnB,OAAOX,SAAS,CAACS,GAAD,EAAMnB,WAAW,CAACwB,KAAD,CAAjB,CAAhB;IACD;IACD,IAAIH,GAAG,KAAK,OAAZ,EAAqB;MACnB,OAAOX,SAAS,CAACS,GAAD,EAAMlB,WAAW,CAACuB,KAAD,CAAjB,CAAhB;IACD;IACD,IAAIH,GAAG,KAAK,QAAR,IAAoBA,GAAG,KAAK,SAAhC,EAA2C;MACzC,OAAOX,SAAS,CAACS,GAAD,EAAMjB,aAAa,CAACsB,KAAD,CAAnB,CAAhB;IACD;IACD,OAAOpC,eAAe,CAACiC,GAAD,CAAtB;EACD,CA5BD,EA4BG9B,cA5BH,CADgC;AAAA,CAA3B;AA+BP,IAAMkC,SAAS,GAAG,SAAZA,SAAY,CAACC,GAAD;EAAA,OAChBA,GAAG,CAACC,MAAJ,KAAe,CAAf,IAAoBD,GAAG,CAAC,CAAD,CAAH,YAAkBE,KADtB;AAAA,CAAlB;AAIA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACH,GAAD,EAAiC;EAC1D,IAAMlB,CAAC,GAAGiB,SAAS,CAACC,GAAD,CAAT,GAAiBA,GAAjB,GAAuBV,kBAAkB,CAACU,GAAD,CAAnD;EACA,IAAMrC,CAAC,GAAGmB,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV;EACA,IAAMsB,CAAC,GAAGtB,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV;EACA,IAAMuB,CAAC,GAAGvB,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV;EACA,IAAMwB,CAAC,GAAGxB,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV;EACA,IAAMyB,UAAU,GAAGzB,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAnB;EACA,IAAM0B,UAAU,GAAG1B,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAnB;EACA,IAAM2B,CAAC,GAAGlD,MAAM,CAACN,GAAG,CAACU,CAAD,EAAI2C,CAAJ,CAAJ,EAAY,CAAZ,CAAhB;EACA,IAAMI,CAAC,GAAGnD,MAAM,CAACD,GAAG,CAACK,CAAD,EAAI2C,CAAJ,CAAJ,EAAY,CAAZ,CAAhB;EACA,IAAMK,CAAC,GAAGpD,MAAM,CAACN,GAAG,CAACoD,CAAD,EAAID,CAAJ,CAAJ,EAAY,CAAZ,CAAhB;EACA,IAAMQ,CAAC,GAAGrD,MAAM,CAACD,GAAG,CAAC+C,CAAD,EAAID,CAAJ,CAAJ,EAAY,CAAZ,CAAhB;EACA,IAAMS,CAAC,GAAG1D,IAAI,CAACF,GAAG,CAACO,GAAG,CAACiD,CAAD,EAAI,CAAJ,CAAJ,EAAYjD,GAAG,CAACoD,CAAD,EAAI,CAAJ,CAAf,CAAJ,CAAd;EACA,IAAME,CAAC,GAAG3D,IAAI,CAACF,GAAG,CAACO,GAAG,CAACkD,CAAD,EAAI,CAAJ,CAAJ,EAAYlD,GAAG,CAACmD,CAAD,EAAI,CAAJ,CAAf,CAAJ,CAAd;EACA,IAAMI,MAAM,GAAG9D,GAAG,CAAC4D,CAAD,EAAIC,CAAJ,CAAlB;EACA,IAAME,MAAM,GAAG1D,GAAG,CAACuD,CAAD,EAAIC,CAAJ,CAAlB;EACA,IAAMG,EAAE,GAAGjE,KAAK,CAAC2D,CAAD,EAAID,CAAJ,CAAhB;EACA,IAAMQ,EAAE,GAAGlE,KAAK,CAAC4D,CAAD,EAAIH,CAAJ,CAAhB;EACA,IAAMU,KAAK,GAAG5D,MAAM,CAACD,GAAG,CAAC4D,EAAD,EAAKD,EAAL,CAAJ,EAAc,CAAd,CAApB;EACA,IAAMG,GAAG,GAAG7D,MAAM,CAACN,GAAG,CAACiE,EAAD,EAAKD,EAAL,CAAJ,EAAc,CAAd,CAAlB;EACA,OAAO,CACL;IAAEV,UAAU,EAAVA;EAAF,CADK,EAEL;IAAEC,UAAU,EAAVA;EAAF,CAFK,EAGL;IAAEa,OAAO,EAAEnE,QAAQ,CAAC,CAAC,CAAF,EAAKiE,KAAL;EAAnB,CAHK,EAIL;IAAEJ,MAAM,EAANA;EAAF,CAJK,EAKL;IAAEC,MAAM,EAANA;EAAF,CALK,EAML;IAAEK,OAAO,EAAEnE,QAAQ,CAAC,CAAC,CAAF,EAAKkE,GAAL;EAAnB,CANK,CAAP;AAQD,CA5BM;AA8BP,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAACxC,CAAD,EAAgB;EAC/B,OAAO,CACL,CACExB,GAAG,CAACJ,QAAQ,CAAC4B,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAD,EAAUA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV,CAAT,EAA6B5B,QAAQ,CAAC4B,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAD,EAAUA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV,CAArC,CADL,EAEExB,GAAG,CAACJ,QAAQ,CAAC4B,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAD,EAAUA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV,CAAT,EAA6B5B,QAAQ,CAAC4B,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAD,EAAUA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV,CAArC,CAFL,EAGExB,GAAG,CAACJ,QAAQ,CAAC4B,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAD,EAAUA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV,CAAT,EAA6B5B,QAAQ,CAAC4B,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAD,EAAUA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV,CAArC,CAHL,CADK,EAML,CACExB,GAAG,CAACJ,QAAQ,CAAC4B,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAD,EAAUA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV,CAAT,EAA6B5B,QAAQ,CAAC4B,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAD,EAAUA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV,CAArC,CADL,EAEExB,GAAG,CAACJ,QAAQ,CAAC4B,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAD,EAAUA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV,CAAT,EAA6B5B,QAAQ,CAAC4B,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAD,EAAUA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV,CAArC,CAFL,EAGExB,GAAG,CAACJ,QAAQ,CAAC4B,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAD,EAAUA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV,CAAT,EAA6B5B,QAAQ,CAAC4B,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAD,EAAUA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV,CAArC,CAHL,CANK,EAWL,CACExB,GAAG,CAACJ,QAAQ,CAAC4B,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAD,EAAUA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV,CAAT,EAA6B5B,QAAQ,CAAC4B,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAD,EAAUA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV,CAArC,CADL,EAEExB,GAAG,CAACJ,QAAQ,CAAC4B,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAD,EAAUA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV,CAAT,EAA6B5B,QAAQ,CAAC4B,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAD,EAAUA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV,CAArC,CAFL,EAGExB,GAAG,CAACJ,QAAQ,CAAC4B,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAD,EAAUA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV,CAAT,EAA6B5B,QAAQ,CAAC4B,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAD,EAAUA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV,CAArC,CAHL,CAXK,CAAP;AAiBD,CAlBD;AAgCA,IAAMyC,aAAa,GAAG,SAAhBA,aAAgB,OAAuC;EAAA,IAApCC,EAAoC,QAApCA,EAAoC;IAAhCC,EAAgC,QAAhCA,EAAgC;IAA5BC,EAA4B,QAA5BA,EAA4B;IAAxBC,EAAwB,QAAxBA,EAAwB;EAC3D,IAAM7C,CAAC,GAAG,CACR,CAAC0C,EAAE,CAACzD,CAAJ,EAAO0D,EAAE,CAAC1D,CAAV,EAAa2D,EAAE,CAAC3D,CAAhB,CADQ,EAER,CAACyD,EAAE,CAACvD,CAAJ,EAAOwD,EAAE,CAACxD,CAAV,EAAayD,EAAE,CAACzD,CAAhB,CAFQ,EAGR,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHQ,CAAV;EAKA,IAAMc,CAAC,GAAGF,aAAa,CAACyC,QAAQ,CAACxC,CAAD,CAAT,EAAc,CAAC6C,EAAE,CAAC5D,CAAJ,EAAO4D,EAAE,CAAC1D,CAAV,EAAa,CAAb,CAAd,CAAvB;EACA,OAAOe,SAAS,CAACF,CAAD,EAAI,CAClB,CAACC,CAAC,CAAC,CAAD,CAAF,EAAO,CAAP,EAAU,CAAV,CADkB,EAElB,CAAC,CAAD,EAAIA,CAAC,CAAC,CAAD,CAAL,EAAU,CAAV,CAFkB,EAGlB,CAAC,CAAD,EAAI,CAAJ,EAAOA,CAAC,CAAC,CAAD,CAAR,CAHkB,CAAJ,CAAhB;AAKD,CAZD;AAiBA,OAAO,IAAM6C,WAAW,GAAG,SAAdA,WAAc,CAACC,MAAD,EAAwB;EACjD,IAAM1D,CAAC,GAAGoD,aAAa,CAACM,MAAM,CAACC,MAAR,CAAvB;EACA,IAAMxB,CAAC,GAAGiB,aAAa,CAACM,MAAM,CAACE,SAAR,CAAvB;EACA,IAAMC,CAAC,GAAGhD,SAAS,CAACsB,CAAD,EAAIgB,QAAQ,CAACnD,CAAD,CAAZ,CAAnB;EACA,OAAO,CACL,CACEZ,MAAM,CAACyE,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAD,EAAUA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV,CADR,EAEEzE,MAAM,CAACyE,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAD,EAAUA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV,CAFR,EAGEzE,MAAM,CAACyE,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAD,EAAUA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV,CAHR,CADK,EAML,CACEzE,MAAM,CAACyE,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAD,EAAUA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV,CADR,EAEEzE,MAAM,CAACyE,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAD,EAAUA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV,CAFR,EAGEzE,MAAM,CAACyE,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAD,EAAUA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV,CAHR,CANK,EAWL,CAACzE,MAAM,CAACyE,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAD,EAAUA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV,CAAP,EAA2BzE,MAAM,CAACyE,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAD,EAAUA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV,CAAjC,EAAqD,CAArD,CAXK,CAAP;AAaD,CAjBM","names":["Animated","atan2","add","multiply","sqrt","cos","sin","sub","divide","pow","tan","exhaustiveCheck","a","Error","identityMatrix","translateXMatrix","x","translateYMatrix","y","scaleMatrix","s","scaleXMatrix","scaleYMatrix","skewXMatrix","skewYMatrix","rotateZMatrix","r","dot3","row","col","matrixVecMul3","m","v","multiply3","m1","m2","col0","col1","col2","processTransform2d","transforms","reduce","acc","transform","key","Object","keys","value","isMatrix3","arg","length","Array","decompose2d","b","c","d","translateX","translateY","E","F","G","H","Q","R","scaleX","scaleY","a1","a2","theta","phi","rotateZ","adjugate","basisToPoints","p1","p2","p3","p4","transform2d","params","canvas","projected","t"],"sources":["Matrix3.ts"],"sourcesContent":["/* eslint-disable prefer-destructuring */\nimport Animated from \"react-native-reanimated\";\n\nimport { atan2 } from \"./Math\";\nimport { Vector } from \"./Vectors\";\n\nconst { add, multiply, sqrt, cos, sin, sub, divide, pow, tan } = Animated;\n\nexport type Vec3 = readonly [\n  Animated.Adaptable<number>,\n  Animated.Adaptable<number>,\n  Animated.Adaptable<number>\n];\n\nexport type Matrix3 = readonly [Vec3, Vec3, Vec3];\n\ntype Transform2dName =\n  | \"translateX\"\n  | \"translateY\"\n  | \"scale\"\n  | \"skewX\"\n  | \"skewY\"\n  | \"scaleX\"\n  | \"scaleY\"\n  | \"rotateZ\"\n  | \"rotate\";\ntype Transformations = {\n  [Name in Transform2dName]: Animated.Adaptable<number>;\n};\nexport type Transforms2d = (\n  | Pick<Transformations, \"translateX\">\n  | Pick<Transformations, \"translateY\">\n  | Pick<Transformations, \"scale\">\n  | Pick<Transformations, \"scaleX\">\n  | Pick<Transformations, \"scaleY\">\n  | Pick<Transformations, \"skewX\">\n  | Pick<Transformations, \"skewY\">\n  | Pick<Transformations, \"rotateZ\">\n  | Pick<Transformations, \"rotate\">\n)[];\n\nconst exhaustiveCheck = (a: never): never => {\n  throw new Error(`Unexhaustive handling for ${a}`);\n};\n\nconst identityMatrix: Matrix3 = [\n  [1, 0, 0],\n  [0, 1, 0],\n  [0, 0, 1],\n];\n\nconst translateXMatrix = (x: Animated.Adaptable<number>): Matrix3 => [\n  [1, 0, x],\n  [0, 1, 0],\n  [0, 0, 1],\n];\n\nconst translateYMatrix = (y: Animated.Adaptable<number>): Matrix3 => [\n  [1, 0, 0],\n  [0, 1, y],\n  [0, 0, 1],\n];\n\nconst scaleMatrix = (s: Animated.Adaptable<number>): Matrix3 => [\n  [s, 0, 0],\n  [0, s, 0],\n  [0, 0, 1],\n];\n\nconst scaleXMatrix = (s: Animated.Adaptable<number>): Matrix3 => [\n  [s, 0, 0],\n  [0, 1, 0],\n  [0, 0, 1],\n];\n\nconst scaleYMatrix = (s: Animated.Adaptable<number>): Matrix3 => [\n  [1, 0, 0],\n  [0, s, 0],\n  [0, 0, 1],\n];\n\nconst skewXMatrix = (s: Animated.Adaptable<number>): Matrix3 => [\n  [1, tan(s), 0],\n  [0, 1, 0],\n  [0, 0, 1],\n];\n\nconst skewYMatrix = (s: Animated.Adaptable<number>): Matrix3 => [\n  [1, 0, 0],\n  [tan(s), 1, 0],\n  [0, 0, 1],\n];\n\nconst rotateZMatrix = (r: Animated.Adaptable<number>): Matrix3 => [\n  [cos(r), multiply(-1, sin(r)), 0],\n  [sin(r), cos(r), 0],\n  [0, 0, 1],\n];\n\nexport const dot3 = (row: Vec3, col: Vec3) =>\n  add(\n    multiply(row[0], col[0]),\n    multiply(row[1], col[1]),\n    multiply(row[2], col[2])\n  );\n\nexport const matrixVecMul3 = (m: Matrix3, v: Vec3) =>\n  [dot3(m[0], v), dot3(m[1], v), dot3(m[2], v)] as const;\n\nexport const multiply3 = (m1: Matrix3, m2: Matrix3) => {\n  const col0 = [m2[0][0], m2[1][0], m2[2][0]] as const;\n  const col1 = [m2[0][1], m2[1][1], m2[2][1]] as const;\n  const col2 = [m2[0][2], m2[1][2], m2[2][2]] as const;\n  return [\n    [dot3(m1[0], col0), dot3(m1[0], col1), dot3(m1[0], col2)],\n    [dot3(m1[1], col0), dot3(m1[1], col1), dot3(m1[1], col2)],\n    [dot3(m1[2], col0), dot3(m1[2], col1), dot3(m1[2], col2)],\n  ] as const;\n};\n\nexport const processTransform2d = (transforms: Transforms2d) =>\n  transforms.reduce((acc, transform) => {\n    const key = Object.keys(transform)[0] as Transform2dName;\n    const value = (transform as Pick<Transformations, typeof key>)[key];\n    if (key === \"translateX\") {\n      return multiply3(acc, translateXMatrix(value));\n    }\n    if (key === \"translateY\") {\n      return multiply3(acc, translateYMatrix(value));\n    }\n    if (key === \"scale\") {\n      return multiply3(acc, scaleMatrix(value));\n    }\n    if (key === \"scaleX\") {\n      return multiply3(acc, scaleXMatrix(value));\n    }\n    if (key === \"scaleY\") {\n      return multiply3(acc, scaleYMatrix(value));\n    }\n    if (key === \"skewX\") {\n      return multiply3(acc, skewXMatrix(value));\n    }\n    if (key === \"skewY\") {\n      return multiply3(acc, skewYMatrix(value));\n    }\n    if (key === \"rotate\" || key === \"rotateZ\") {\n      return multiply3(acc, rotateZMatrix(value));\n    }\n    return exhaustiveCheck(key);\n  }, identityMatrix);\n\nconst isMatrix3 = (arg: Matrix3 | Transforms2d): arg is Matrix3 =>\n  arg.length === 3 && arg[0] instanceof Array;\n\n// https://math.stackexchange.com/questions/13150/extracting-rotation-scale-values-from-2d-transformation-matrix\nexport const decompose2d = (arg: Matrix3 | Transforms2d) => {\n  const m = isMatrix3(arg) ? arg : processTransform2d(arg);\n  const a = m[0][0];\n  const b = m[1][0];\n  const c = m[0][1];\n  const d = m[1][1];\n  const translateX = m[0][2] as Animated.Node<number>;\n  const translateY = m[1][2] as Animated.Node<number>;\n  const E = divide(add(a, d), 2);\n  const F = divide(sub(a, d), 2);\n  const G = divide(add(c, b), 2);\n  const H = divide(sub(c, b), 2);\n  const Q = sqrt(add(pow(E, 2), pow(H, 2)));\n  const R = sqrt(add(pow(F, 2), pow(G, 2)));\n  const scaleX = add(Q, R);\n  const scaleY = sub(Q, R);\n  const a1 = atan2(G, F);\n  const a2 = atan2(H, E);\n  const theta = divide(sub(a2, a1), 2);\n  const phi = divide(add(a2, a1), 2);\n  return [\n    { translateX },\n    { translateY },\n    { rotateZ: multiply(-1, theta) },\n    { scaleX },\n    { scaleY },\n    { rotateZ: multiply(-1, phi) },\n  ] as const;\n};\n\nconst adjugate = (m: Matrix3) => {\n  return [\n    [\n      sub(multiply(m[1][1], m[2][2]), multiply(m[1][2], m[2][1])),\n      sub(multiply(m[0][2], m[2][1]), multiply(m[0][1], m[2][2])),\n      sub(multiply(m[0][1], m[1][2]), multiply(m[0][2], m[1][1])),\n    ],\n    [\n      sub(multiply(m[1][2], m[2][0]), multiply(m[1][0], m[2][2])),\n      sub(multiply(m[0][0], m[2][2]), multiply(m[0][2], m[2][0])),\n      sub(multiply(m[0][2], m[1][0]), multiply(m[0][0], m[1][2])),\n    ],\n    [\n      sub(multiply(m[1][0], m[2][1]), multiply(m[1][1], m[2][0])),\n      sub(multiply(m[0][1], m[2][0]), multiply(m[0][0], m[2][1])),\n      sub(multiply(m[0][0], m[1][1]), multiply(m[0][1], m[1][0])),\n    ],\n  ] as const;\n};\n\ninterface Quadrilateral {\n  p1: Vector;\n  p2: Vector;\n  p3: Vector;\n  p4: Vector;\n}\n\ninterface Parameters {\n  canvas: Quadrilateral;\n  projected: Quadrilateral;\n}\n\nconst basisToPoints = ({ p1, p2, p3, p4 }: Quadrilateral) => {\n  const m = [\n    [p1.x, p2.x, p3.x],\n    [p1.y, p2.y, p3.y],\n    [1, 1, 1],\n  ] as const;\n  const v = matrixVecMul3(adjugate(m), [p4.x, p4.y, 1]);\n  return multiply3(m, [\n    [v[0], 0, 0],\n    [0, v[1], 0],\n    [0, 0, v[2]],\n  ]);\n};\n\n// https://math.stackexchange.com/questions/296794/finding-the-transform-matrix-from-4-projected-points-with-javascript\n// https://franklinta.com/2014/09/08/computing-css-matrix3d-transforms/\n// http://jsfiddle.net/dFrHS/1/\nexport const transform2d = (params: Parameters) => {\n  const s = basisToPoints(params.canvas);\n  const d = basisToPoints(params.projected);\n  const t = multiply3(d, adjugate(s));\n  return [\n    [\n      divide(t[0][0], t[2][2]),\n      divide(t[0][1], t[2][2]),\n      divide(t[0][2], t[2][2]),\n    ],\n    [\n      divide(t[1][0], t[2][2]),\n      divide(t[1][1], t[2][2]),\n      divide(t[1][2], t[2][2]),\n    ],\n    [divide(t[2][0], t[2][2]), divide(t[2][1], t[2][2]), 1],\n  ] as const;\n};\n"]},"metadata":{},"sourceType":"module"}