{"ast":null,"code":"var MiscUtilities = {\n  constructReplaceUsingRegexFromStr: function constructReplaceUsingRegexFromStr(str) {\n    var prepFn = function prepFn(str) {\n      return str.replace(/([.?*+^$[\\]\\\\(){}|-])/g, \"\\\\$1\");\n    };\n    return new RegExp(prepFn(str), \"g\");\n  },\n  getComposedRegex: function getComposedRegex() {\n    for (var _len = arguments.length, regexes = new Array(_len), _key = 0; _key < _len; _key++) {\n      regexes[_key] = arguments[_key];\n    }\n    return new RegExp(regexes.map(function (regex) {\n      return regex.source;\n    }).join(\"|\"));\n  },\n  convertToIndianNumbers: function convertToIndianNumbers(strE) {\n    var indianNumbers = [\"۰\", \"١\", \"٢\", \"٣\", \"٤\", \"٥\", \"٦\", \"٧\", \"٨\", \"٩\"];\n    var chars = strE.split(\"\");\n    for (var i = 0; i < chars.length; i++) {\n      if (/\\d/.test(chars[i])) {\n        chars[i] = indianNumbers[chars[i]];\n      }\n    }\n    return chars.join(\"\");\n  },\n  convertToArabicNumbers: function convertToArabicNumbers(strA) {\n    var a2e = function a2e(s) {\n      return s.replace(/[٠-٩]/g, function (d) {\n        return \"٠١٢٣٤٥٦٧٨٩\".indexOf(d).toString();\n      });\n    };\n    var p2e = function p2e(s) {\n      return s.replace(/[۰-۹]/g, function (d) {\n        return \"۰۱۲۳۴۵۶۷۸۹\".indexOf(d).toString();\n      });\n    };\n    var strRet = a2e(strA);\n    strRet = p2e(strRet);\n    return strRet;\n  },\n  replaceStringParts: function replaceStringParts(strTxt, strSrc, strReplace) {\n    var parts = strSrc.split(\" \");\n    var destParts = strTxt.split(\" \");\n    if (parts.length == 0 || destParts.length == 0) return strTxt;\n    var iDest = 0;\n    while (iDest < destParts.length) {\n      var dist = MiscUtilities.computeLevenshteinDist(destParts[iDest], parts[0]);\n      if (dist == 0 || dist / parts[0].length < 0.4) {\n        var bDiff = false;\n        var iStrt = iDest;\n        var iPart = 1;\n        iDest++;\n        while (iDest < destParts.length && iPart < parts.length) {\n          var _dist = MiscUtilities.computeLevenshteinDist(destParts[iDest], parts[iPart]);\n          if (_dist == 0 || _dist / parts[iPart].length < 0.4) {\n            iDest++;\n            iPart++;\n          } else {\n            bDiff = true;\n            break;\n          }\n        }\n        if (bDiff == false && iPart >= parts.length) {\n          destParts[iStrt] = strReplace;\n          for (var i = 1; i < parts.length; i++) {\n            destParts[iStrt + i] = \" \";\n          }\n        }\n      } else {\n        iDest++;\n      }\n    }\n    var strRet = destParts.join(\" \");\n    strRet = strRet.replace(/  +/g, \" \");\n    return strRet;\n  },\n  normalizeString: function normalizeString(str) {\n    var bIsEnglish = /[a-z]/.test(str);\n    var to = bIsEnglish ? \"to\" : \"حتي\";\n    var text = str.replace(/[\\t\\r\\n']/g, \" \").toLowerCase();\n    text = text.replace(/[-؟؛..,،;:_]/g, \" \" + to + \" \");\n    text = text.replace(/[\\u064B-\\u065F\\u0611-\\u061A\\u06D6-\\u06ED\\u0640\\u0670]/g, \"\");\n    text = text.replace(/(آ|إ|أ)/g, \"ا\");\n    text = text.replace(/(ة)/g, \"ه\");\n    text = text.replace(/(ئ|ؤ)/g, \"ء\");\n    text = text.replace(/(ى)/g, \"ي\");\n    text = text.replace(/(ـ)/g, \"\");\n    text = MiscUtilities.convertToArabicNumbers(text);\n    if (bIsEnglish) {\n      var shortForm = [\"\", \"1st\", \"2nd\", \"3rd\", \"4th\", \"5th\", \"6th\", \"7th\", \"8th\", \"9th\", \"10th\", \"11th\", \"12th\", \"13th\", \"14th\", \"15th\", \"16th\", \"17th\", \"18th\", \"19th\", \"20th\", \"21st\", \"22nd\", \"23rd\", \"24th\", \"25th\", \"26th\", \"27th\", \"28th\", \"29th\", \"30th\"];\n      var longForm = [\"\", \"first \", \"second \", \"third \", \"fourth \", \"fifth \", \"sixth \", \"seventh \", \"eighth \", \"ninth \", \"tenth \", \"eleventh \", \"twelfth \", \"thirteenth \", \"fourteenth \", \"fifteenth \", \"sixteenth \", \"seventeenth \", \"eighteenth \", \"nineteenth \", \"twentieth \", \"twenty first \", \"twenty second \", \"twenty third \", \"twenty fourth \", \"twenty fifth \", \"twenty sixth \", \"twenty seventh \", \"twenty eighth \", \"twenty ninth \", \"thirtieth \", \"\"];\n      for (var i = 1; i < shortForm.length; i++) {\n        text = text.replace(MiscUtilities.constructReplaceUsingRegexFromStr(shortForm[i]), longForm[i]);\n      }\n    }\n    text = text.replace(/(\\d+)/g, \" $1 \");\n    text = text.replace(/  +/g, \" \");\n    return text;\n  },\n  removeLeadingAlefLam: function removeLeadingAlefLam(strTxtNormalized) {\n    var strRet = strTxtNormalized.replace(/ ال/g, \" \");\n    if (strRet.startsWith(\"ال\")) {\n      strRet = strRet.substring(2);\n    }\n    return strRet;\n  },\n  removeThe: function removeThe(strTxtNormalized) {\n    var strRet = strTxtNormalized.replace(/ the /g, \" \");\n    if (strRet.startsWith(\"the\")) {\n      strRet = strRet.substring(3);\n    }\n    return strRet;\n  },\n  computeLevenshteinDist: function computeLevenshteinDist(strA, strB) {\n    var m = strA.length;\n    var n = strB.length;\n    var d = Array(m + 1).fill(null).map(function () {\n      return Array(n + 1);\n    });\n    for (var i = 0; i <= m; i++) {\n      for (var j = 0; j <= n; j++) {\n        d[i][j] = 0;\n      }\n    }\n    for (var i = 0; i <= m; i++) {\n      d[i][0] = i;\n    }\n    for (var j = 0; j <= n; j++) {\n      d[0][j] = j;\n    }\n    for (var i = 1; i <= m; i++) {\n      for (var j = 1; j <= n; j++) {\n        var substitutionCost = 1;\n        if (strA[i - 1] == strB[j - 1]) substitutionCost = 0;\n        d[i][j] = Math.min(Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1), d[i - 1][j - 1] + substitutionCost);\n      }\n    }\n    return d[m][n];\n  },\n  lookupStrInArr: function lookupStrInArr(strNormalized, arrNormalized, nMaxErrDist) {\n    for (var i = 0; i < arrNormalized.length; i++) {\n      if (strNormalized == arrNormalized[i]) return {\n        indx: i,\n        dist: 0\n      };\n    }\n    if (nMaxErrDist == 0) return {\n      indx: -1,\n      dist: 1000\n    };\n    var minDist = 1000;\n    var minIndx = -1;\n    for (var i = 0; i < arrNormalized.length; i++) {\n      if (arrNormalized[i].length == 0) continue;\n      var dist = MiscUtilities.computeLevenshteinDist(strNormalized, arrNormalized[i]);\n      if (dist < minDist) {\n        minDist = dist;\n        minIndx = i;\n      }\n    }\n    if (minDist <= nMaxErrDist) return {\n      indx: minIndx,\n      dist: minDist\n    };\n    return {\n      indx: -1,\n      dist: 1000\n    };\n  },\n  lookupStrIn2DArr: function lookupStrIn2DArr(strNormalized, arrNormalized, nMaxErrDist) {\n    for (var i = 0; i < arrNormalized.length; i++) {\n      for (var j = 0; j < arrNormalized[i].length; j++) {\n        if (strNormalized == arrNormalized[i][j]) return {\n          indx: i,\n          dist: 0\n        };\n      }\n    }\n    if (nMaxErrDist == 0) return {\n      indx: -1,\n      dist: 1000\n    };\n    var minDist = 1000;\n    var minIndx = -1;\n    for (var i = 0; i < arrNormalized.length; i++) {\n      for (var j = 0; j < arrNormalized[i].length; j++) {\n        if (arrNormalized[i][j].length == 0) continue;\n        var dist = MiscUtilities.computeLevenshteinDist(strNormalized, arrNormalized[i][j]);\n        if (dist < minDist) {\n          minDist = dist;\n          minIndx = i;\n        }\n      }\n    }\n    if (minDist <= nMaxErrDist) return {\n      indx: minIndx,\n      dist: minDist\n    };\n    return {\n      indx: -1,\n      dist: 1000\n    };\n  }\n};\nexport default MiscUtilities;","map":{"version":3,"names":["MiscUtilities","constructReplaceUsingRegexFromStr","str","prepFn","replace","RegExp","getComposedRegex","regexes","map","regex","source","join","convertToIndianNumbers","strE","indianNumbers","chars","split","i","length","test","convertToArabicNumbers","strA","a2e","s","d","indexOf","toString","p2e","strRet","replaceStringParts","strTxt","strSrc","strReplace","parts","destParts","iDest","dist","computeLevenshteinDist","bDiff","iStrt","iPart","normalizeString","bIsEnglish","to","text","toLowerCase","shortForm","longForm","removeLeadingAlefLam","strTxtNormalized","startsWith","substring","removeThe","strB","m","n","Array","fill","j","substitutionCost","Math","min","lookupStrInArr","strNormalized","arrNormalized","nMaxErrDist","indx","minDist","minIndx","lookupStrIn2DArr"],"sources":["C:/Users/Tysseer Harak/Desktop/Data/Code/React Native/Dawem/app/js/helpers/MiscUtilities.js"],"sourcesContent":["var MiscUtilities = {\r\n  constructReplaceUsingRegexFromStr: function (str) {\r\n    let prepFn = function (str) {\r\n      return str.replace(/([.?*+^$[\\]\\\\(){}|-])/g, \"\\\\$1\");\r\n    };\r\n    return new RegExp(prepFn(str), \"g\");\r\n  },\r\n  getComposedRegex: function (...regexes) {\r\n    return new RegExp(regexes.map((regex) => regex.source).join(\"|\"));\r\n  },\r\n  convertToIndianNumbers: function (strE) {\r\n    let indianNumbers = [\"۰\", \"١\", \"٢\", \"٣\", \"٤\", \"٥\", \"٦\", \"٧\", \"٨\", \"٩\"];\r\n    let chars = strE.split(\"\");\r\n    for (let i = 0; i < chars.length; i++) {\r\n      if (/\\d/.test(chars[i])) {\r\n        chars[i] = indianNumbers[chars[i]];\r\n      }\r\n    }\r\n    return chars.join(\"\");\r\n  },\r\n  convertToArabicNumbers: function (strA) {\r\n    // const e2p = s => s.replace(/\\d/g, d => '۰۱۲۳۴۵۶۷۸۹'[d]);\r\n    // const e2a = s => s.replace(/\\d/g, d => '٠١٢٣٤٥٦٧٨٩'[d]);\r\n\r\n    // const p2e = s => s.replace(/[۰-۹]/g, d => '۰۱۲۳۴۵۶۷۸۹'.indexOf(d));\r\n    // const a2e = s => s.replace(/[٠-٩]/g, d => '٠١٢٣٤٥٦٧٨٩'.indexOf(d));\r\n\r\n    // const p2a = s => s.replace(/[۰-۹]/g, d => '٠١٢٣٤٥٦٧٨٩'['۰۱۲۳۴۵۶۷۸۹'.indexOf(d)]);\r\n    // const a2p = s => s.replace(/[٠-٩]/g, d => '۰۱۲۳۴۵۶۷۸۹'['٠١٢٣٤٥٦٧٨٩'.indexOf(d)]);\r\n\r\n    // console.log(e2p(\"asdf01234\")); // asdf۱۲۳۴\r\n    // console.log(e2a(\"asdf01234\"));// asdf١٢٣٤\r\n    // console.log(p2e(\"asdf۰۱۲۳۴\")) ;// asdf1234\r\n    // console.log(a2e(\"asdf٠١٢٣٤\")) ;// asdf1234\r\n    // console.log(p2a(\"asdf۰۱۲۳۴\")) ;// asdf١٢٣٤\r\n    // console.log(a2p(\"asdf٠١٢٣٤\")) ;// asdf۱۲۳۴\r\n\r\n    const a2e = (s) =>\r\n      s.replace(/[٠-٩]/g, (d) => \"٠١٢٣٤٥٦٧٨٩\".indexOf(d).toString());\r\n    const p2e = (s) =>\r\n      s.replace(/[۰-۹]/g, (d) => \"۰۱۲۳۴۵۶۷۸۹\".indexOf(d).toString());\r\n    var strRet = a2e(strA);\r\n    strRet = p2e(strRet);\r\n    return strRet;\r\n  },\r\n  replaceStringParts: function (strTxt, strSrc, strReplace) {\r\n    let parts = strSrc.split(\" \");\r\n    let destParts = strTxt.split(\" \");\r\n    if (parts.length == 0 || destParts.length == 0) return strTxt;\r\n    // find the parts in order but using Levenshtein distance\r\n    let iDest = 0;\r\n    while (iDest < destParts.length) {\r\n      let dist = MiscUtilities.computeLevenshteinDist(\r\n        destParts[iDest],\r\n        parts[0]\r\n      );\r\n      if (dist == 0 || dist / parts[0].length < 0.4) {\r\n        let bDiff = false;\r\n        let iStrt = iDest;\r\n        let iPart = 1;\r\n        iDest++;\r\n        while (iDest < destParts.length && iPart < parts.length) {\r\n          let dist = MiscUtilities.computeLevenshteinDist(\r\n            destParts[iDest],\r\n            parts[iPart]\r\n          );\r\n          if (dist == 0 || dist / parts[iPart].length < 0.4) {\r\n            iDest++;\r\n            iPart++;\r\n          } else {\r\n            bDiff = true;\r\n            break;\r\n          }\r\n        }\r\n        if (bDiff == false && iPart >= parts.length) {\r\n          // full match found, replace with new str\r\n          destParts[iStrt] = strReplace;\r\n          for (var i = 1; i < parts.length; i++) {\r\n            destParts[iStrt + i] = \" \";\r\n          }\r\n        }\r\n      } else {\r\n        iDest++; // no start match found\r\n      }\r\n    }\r\n    let strRet = destParts.join(\" \");\r\n    strRet = strRet.replace(/  +/g, \" \"); // remove repeated spaces\r\n    return strRet;\r\n  },\r\n  normalizeString: function (str) {\r\n    var bIsEnglish = /[a-z]/.test(str);\r\n    var to = bIsEnglish ? \"to\" : \"حتي\";\r\n\r\n    var text = str.replace(/[\\t\\r\\n']/g, \" \").toLowerCase();\r\n\r\n    text = text.replace(/[-؟؛..,،;:_]/g, \" \" + to + \" \");\r\n\r\n    //remove special characters & tashkeel\r\n    //text = text.replace(/([^\\u0621-\\u063A\\u0641-\\u064A\\u0660-\\u0669])/g, \"\");\r\n    text = text.replace(\r\n      /[\\u064B-\\u065F\\u0611-\\u061A\\u06D6-\\u06ED\\u0640\\u0670]/g,\r\n      \"\"\r\n    );\r\n    //normalize Arabic\r\n    text = text.replace(/(آ|إ|أ)/g, \"ا\");\r\n    text = text.replace(/(ة)/g, \"ه\");\r\n    text = text.replace(/(ئ|ؤ)/g, \"ء\");\r\n    text = text.replace(/(ى)/g, \"ي\");\r\n    text = text.replace(/(ـ)/g, \"\");\r\n\r\n    //convert arabic numerals to english counterparts.\r\n    text = MiscUtilities.convertToArabicNumbers(text);\r\n    if (bIsEnglish) {\r\n      let shortForm = [\r\n        \"\",\r\n        \"1st\",\r\n        \"2nd\",\r\n        \"3rd\",\r\n        \"4th\",\r\n        \"5th\",\r\n        \"6th\",\r\n        \"7th\",\r\n        \"8th\",\r\n        \"9th\",\r\n        \"10th\",\r\n        \"11th\",\r\n        \"12th\",\r\n        \"13th\",\r\n        \"14th\",\r\n        \"15th\",\r\n        \"16th\",\r\n        \"17th\",\r\n        \"18th\",\r\n        \"19th\",\r\n        \"20th\",\r\n        \"21st\",\r\n        \"22nd\",\r\n        \"23rd\",\r\n        \"24th\",\r\n        \"25th\",\r\n        \"26th\",\r\n        \"27th\",\r\n        \"28th\",\r\n        \"29th\",\r\n        \"30th\",\r\n      ];\r\n      let longForm = [\r\n        \"\",\r\n        \"first \",\r\n        \"second \",\r\n        \"third \",\r\n        \"fourth \",\r\n        \"fifth \",\r\n        \"sixth \",\r\n        \"seventh \",\r\n        \"eighth \",\r\n        \"ninth \",\r\n        \"tenth \",\r\n        \"eleventh \",\r\n        \"twelfth \",\r\n        \"thirteenth \",\r\n        \"fourteenth \",\r\n        \"fifteenth \",\r\n        \"sixteenth \",\r\n        \"seventeenth \",\r\n        \"eighteenth \",\r\n        \"nineteenth \",\r\n        \"twentieth \",\r\n        \"twenty first \",\r\n        \"twenty second \",\r\n        \"twenty third \",\r\n        \"twenty fourth \",\r\n        \"twenty fifth \",\r\n        \"twenty sixth \",\r\n        \"twenty seventh \",\r\n        \"twenty eighth \",\r\n        \"twenty ninth \",\r\n        \"thirtieth \",\r\n        \"\",\r\n      ];\r\n      for (var i = 1; i < shortForm.length; i++) {\r\n        text = text.replace(\r\n          MiscUtilities.constructReplaceUsingRegexFromStr(shortForm[i]),\r\n          longForm[i]\r\n        );\r\n      }\r\n    }\r\n\r\n    text = text.replace(/(\\d+)/g, \" $1 \"); // make sure numbers have spaces around them\r\n    text = text.replace(/  +/g, \" \"); // remove repeated spaces\r\n\r\n    return text;\r\n  },\r\n  removeLeadingAlefLam: function (strTxtNormalized) {\r\n    //assumes normalized string\r\n    let strRet = strTxtNormalized.replace(/ ال/g, \" \");\r\n    if (strRet.startsWith(\"ال\")) {\r\n      strRet = strRet.substring(2);\r\n    }\r\n    return strRet;\r\n  },\r\n  removeThe: function (strTxtNormalized) {\r\n    //assumes normalized string\r\n    let strRet = strTxtNormalized.replace(/ the /g, \" \");\r\n    if (strRet.startsWith(\"the\")) {\r\n      strRet = strRet.substring(3);\r\n    }\r\n    return strRet;\r\n  },\r\n  computeLevenshteinDist: function (strA, strB) {\r\n    // for all i and j, d[i,j] will hold the Levenshtein distance between\r\n    // the first i characters of s and the first j characters of t\r\n    let m = strA.length;\r\n    let n = strB.length;\r\n    let d = Array(m + 1)\r\n      .fill(null)\r\n      .map(() => Array(n + 1));\r\n\r\n    for (var i = 0; i <= m; i++) for (var j = 0; j <= n; j++) d[i][j] = 0;\r\n\r\n    // source prefixes can be transformed into empty string by\r\n    // dropping all characters\r\n    for (var i = 0; i <= m; i++) d[i][0] = i;\r\n\r\n    // target prefixes can be reached from empty source prefix\r\n    // by inserting every character\r\n    for (var j = 0; j <= n; j++) d[0][j] = j;\r\n\r\n    for (var i = 1; i <= m; i++)\r\n      for (var j = 1; j <= n; j++) {\r\n        var substitutionCost = 1;\r\n        if (strA[i - 1] == strB[j - 1]) substitutionCost = 0;\r\n\r\n        d[i][j] = Math.min(\r\n          Math.min(\r\n            d[i - 1][j] + 1, // deletion\r\n            d[i][j - 1] + 1\r\n          ), // insertion\r\n          d[i - 1][j - 1] + substitutionCost\r\n        ); // substitution\r\n      }\r\n\r\n    return d[m][n];\r\n  },\r\n  lookupStrInArr: function (strNormalized, arrNormalized, nMaxErrDist) {\r\n    for (var i = 0; i < arrNormalized.length; i++) {\r\n      if (strNormalized == arrNormalized[i]) return { indx: i, dist: 0 };\r\n    }\r\n    if (nMaxErrDist == 0) return { indx: -1, dist: 1000 };\r\n    var minDist = 1000;\r\n    var minIndx = -1;\r\n    for (var i = 0; i < arrNormalized.length; i++) {\r\n      if (arrNormalized[i].length == 0) continue;\r\n      var dist = MiscUtilities.computeLevenshteinDist(\r\n        strNormalized,\r\n        arrNormalized[i]\r\n      );\r\n      if (dist < minDist) {\r\n        minDist = dist;\r\n        minIndx = i;\r\n      }\r\n    }\r\n    if (minDist <= nMaxErrDist) return { indx: minIndx, dist: minDist };\r\n    return { indx: -1, dist: 1000 };\r\n  },\r\n  lookupStrIn2DArr: function (strNormalized, arrNormalized, nMaxErrDist) {\r\n    for (var i = 0; i < arrNormalized.length; i++) {\r\n      for (var j = 0; j < arrNormalized[i].length; j++) {\r\n        if (strNormalized == arrNormalized[i][j]) return { indx: i, dist: 0 };\r\n      }\r\n    }\r\n    if (nMaxErrDist == 0) return { indx: -1, dist: 1000 };\r\n    var minDist = 1000;\r\n    var minIndx = -1;\r\n    for (var i = 0; i < arrNormalized.length; i++) {\r\n      for (var j = 0; j < arrNormalized[i].length; j++) {\r\n        if (arrNormalized[i][j].length == 0) continue;\r\n        var dist = MiscUtilities.computeLevenshteinDist(\r\n          strNormalized,\r\n          arrNormalized[i][j]\r\n        );\r\n        if (dist < minDist) {\r\n          minDist = dist;\r\n          minIndx = i;\r\n        }\r\n      }\r\n    }\r\n    if (minDist <= nMaxErrDist) return { indx: minIndx, dist: minDist };\r\n    return { indx: -1, dist: 1000 };\r\n  },\r\n};\r\nexport default MiscUtilities;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}