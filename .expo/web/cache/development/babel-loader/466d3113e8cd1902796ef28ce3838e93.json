{"ast":null,"code":"import Animated from \"react-native-reanimated\";\nvar eq = Animated.eq,\n  set = Animated.set,\n  cond = Animated.cond,\n  atan = Animated.atan,\n  add = Animated.add,\n  multiply = Animated.multiply,\n  lessThan = Animated.lessThan,\n  abs = Animated.abs,\n  divide = Animated.divide,\n  sub = Animated.sub,\n  min2 = Animated.min,\n  max2 = Animated.max,\n  reRound = Animated.round,\n  greaterThan = Animated.greaterThan,\n  pow = Animated.pow,\n  and = Animated.and,\n  greaterOrEq = Animated.greaterOrEq,\n  lessOrEq = Animated.lessOrEq,\n  proc = Animated.proc,\n  floor = Animated.floor;\nexport var bin = function bin(value) {\n  return value ? 1 : 0;\n};\nexport var fract = function fract(x) {\n  return sub(x, floor(x));\n};\nexport var sign = function sign(x) {\n  return cond(lessThan(x, 0), -1, cond(eq(x, 0), 0, 1));\n};\nexport var min = function min() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return args.reduce(function (acc, arg) {\n    return min2(acc, arg);\n  });\n};\nexport var max = function max() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n  return args.reduce(function (acc, arg) {\n    return max2(acc, arg);\n  });\n};\nexport var minus = function minus(x) {\n  return multiply(-1, x);\n};\nexport var avg = function avg() {\n  return divide(add.apply(void 0, arguments), arguments.length);\n};\nexport var clamp = proc(function (value, lowerBound, upperBound) {\n  return min2(max2(lowerBound, value), upperBound);\n});\nexport var between = function between(value, lowerBound, upperBound) {\n  var inclusive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  if (inclusive) {\n    return and(greaterOrEq(value, lowerBound), lessOrEq(value, upperBound));\n  }\n  return and(greaterThan(value, lowerBound), lessThan(value, upperBound));\n};\nexport var approximates = proc(function (a, b) {\n  var precision = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.001;\n  return lessThan(abs(sub(a, b)), precision);\n});\nexport var toRad = proc(function (deg) {\n  return multiply(deg, Math.PI / 180);\n});\nexport var toDeg = proc(function (rad) {\n  return multiply(rad, 180 / Math.PI);\n});\nexport var atan2 = proc(function (y, x) {\n  var a = atan(divide(y, x));\n  var PI = Math.PI;\n  return cond(greaterThan(x, 0), a, cond(and(lessThan(x, 0), greaterOrEq(y, 0)), add(a, PI), cond(and(lessThan(x, 0), lessThan(y, 0)), sub(a, PI), cond(and(eq(x, 0), greaterThan(y, 0)), PI / 2, cond(and(eq(x, 0), lessThan(y, 0)), -PI / 2, 0)))));\n});\nexport var cubicBezier = proc(function (t, p0, p1, p2, p3) {\n  var term = sub(1, t);\n  var a = multiply(1, pow(term, 3), pow(t, 0), p0);\n  var b = multiply(3, pow(term, 2), pow(t, 1), p1);\n  var c = multiply(3, pow(term, 1), pow(t, 2), p2);\n  var d = multiply(1, pow(term, 0), pow(t, 3), p3);\n  return add(a, b, c, d);\n});\nexport var round = proc(function (value) {\n  var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var p = pow(10, precision);\n  return divide(reRound(multiply(value, p)), p);\n});\nexport var inc = proc(function (value) {\n  return set(value, add(value, 1));\n});\nexport var dec = proc(function (value) {\n  return set(value, sub(value, 1));\n});","map":{"version":3,"mappings":"AAAA,OAAOA,QAAP,MAAqB,yBAArB;IAGEC,E,GAoBED,Q,CApBFC,E;EACAC,G,GAmBEF,Q,CAnBFE,G;EACAC,I,GAkBEH,Q,CAlBFG,I;EACAC,I,GAiBEJ,Q,CAjBFI,I;EACAC,G,GAgBEL,Q,CAhBFK,G;EACAC,Q,GAeEN,Q,CAfFM,Q;EACAC,Q,GAcEP,Q,CAdFO,Q;EACAC,G,GAaER,Q,CAbFQ,G;EACAC,M,GAYET,Q,CAZFS,M;EACAC,G,GAWEV,Q,CAXFU,G;EACKC,I,GAUHX,Q,CAVFY,G;EACKC,I,GASHb,Q,CATFc,G;EACOC,O,GAQLf,Q,CARFgB,K;EACAC,W,GAOEjB,Q,CAPFiB,W;EACAC,G,GAMElB,Q,CANFkB,G;EACAC,G,GAKEnB,Q,CALFmB,G;EACAC,W,GAIEpB,Q,CAJFoB,W;EACAC,Q,GAGErB,Q,CAHFqB,Q;EACAC,I,GAEEtB,Q,CAFFsB,I;EACAC,K,GACEvB,Q,CADFuB,K;AAGF,OAAO,IAAMC,GAAG,GAAG,SAANA,GAAM,CAACC,KAAD;EAAA,OAA4BA,KAAK,GAAG,CAAH,GAAO,CAAxC;AAAA,CAAZ;AAEP,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,CAAD;EAAA,OAAmCjB,GAAG,CAACiB,CAAD,EAAIJ,KAAK,CAACI,CAAD,CAAT,CAAtC;AAAA,CAAd;AAEP,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACD,CAAD;EAAA,OAClBxB,IAAI,CAACI,QAAQ,CAACoB,CAAD,EAAI,CAAJ,CAAT,EAAiB,CAAC,CAAlB,EAAqBxB,IAAI,CAACF,EAAE,CAAC0B,CAAD,EAAI,CAAJ,CAAH,EAAW,CAAX,EAAc,CAAd,CAAzB,CADc;AAAA,CAAb;AAGP,OAAO,IAAMf,GAAG,GAAG,SAANA,GAAM;EAAA,kCAAIiB,IAAJ;IAAIA,IAAJ;EAAA;EAAA,OACjBA,IAAI,CAACC,MAAL,CAAY,UAACC,GAAD,EAAMC,GAAN;IAAA,OAAcrB,IAAI,CAACoB,GAAD,EAAMC,GAAN,CAAlB;EAAA,CAAZ,CADiB;AAAA,CAAZ;AAGP,OAAO,IAAMlB,GAAG,GAAG,SAANA,GAAM;EAAA,mCAAIe,IAAJ;IAAIA,IAAJ;EAAA;EAAA,OACjBA,IAAI,CAACC,MAAL,CAAY,UAACC,GAAD,EAAMC,GAAN;IAAA,OAAcnB,IAAI,CAACkB,GAAD,EAAMC,GAAN,CAAlB;EAAA,CAAZ,CADiB;AAAA,CAAZ;AAGP,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACN,CAAD;EAAA,OAA8BrB,QAAQ,CAAC,CAAC,CAAF,EAAKqB,CAAL,CAAtC;AAAA,CAAd;AAEP,OAAO,IAAMO,GAAG,GAAG,SAANA,GAAM;EAAA,OAMdzB,MAAM,CAACJ,GAAG,MAAH,mBAAD,EAAY8B,UAAEC,MAAd,CANQ;AAAA,CAAZ;AAQP,OAAO,IAAMC,KAAK,GAAGf,IAAI,CACvB,UACEG,KADF,EAEEa,UAFF,EAGEC,UAHF;EAAA,OAI4B5B,IAAI,CAACE,IAAI,CAACyB,UAAD,EAAab,KAAb,CAAL,EAA0Bc,UAA1B,CAJhC;AAAA,CADuB,CAAlB;AAQP,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CACrBf,KADqB,EAErBa,UAFqB,EAGrBC,UAHqB,EAKlB;EAAA,IADHE,SACG,uEADS,IACT;EACH,IAAIA,SAAJ,EAAe;IACb,OAAOtB,GAAG,CAACC,WAAW,CAACK,KAAD,EAAQa,UAAR,CAAZ,EAAiCjB,QAAQ,CAACI,KAAD,EAAQc,UAAR,CAAzC,CAAV;EACD;EACD,OAAOpB,GAAG,CAACF,WAAW,CAACQ,KAAD,EAAQa,UAAR,CAAZ,EAAiC/B,QAAQ,CAACkB,KAAD,EAAQc,UAAR,CAAzC,CAAV;AACD,CAVM;AAYP,OAAO,IAAMG,YAAY,GAAGpB,IAAI,CAC9B,UACEqB,CADF,EAEEC,CAFF;EAAA,IAGEC,SAHF,uEAG0C,KAH1C;EAAA,OAIKtC,QAAQ,CAACC,GAAG,CAACE,GAAG,CAACiC,CAAD,EAAIC,CAAJ,CAAJ,CAAJ,EAAiBC,SAAjB,CAJb;AAAA,CAD8B,CAAzB;AAQP,OAAO,IAAMC,KAAK,GAAGxB,IAAI,CACvB,UAACyB,GAAD;EAAA,OACEzC,QAAQ,CAACyC,GAAD,EAAMC,IAAI,CAACC,EAAL,GAAU,GAAhB,CADV;AAAA,CADuB,CAAlB;AAKP,OAAO,IAAMC,KAAK,GAAG5B,IAAI,CACvB,UAAC6B,GAAD;EAAA,OACE7C,QAAQ,CAAC6C,GAAD,EAAM,MAAMH,IAAI,CAACC,EAAjB,CADV;AAAA,CADuB,CAAlB;AASP,OAAO,IAAMG,KAAK,GAAG9B,IAAI,CACvB,UAAC+B,CAAD,EAAgC1B,CAAhC,EAAkE;EAChE,IAAMgB,CAAC,GAAGvC,IAAI,CAACK,MAAM,CAAC4C,CAAD,EAAI1B,CAAJ,CAAP,CAAd;EADgE,IAExDsB,EAFwD,GAEjDD,IAFiD,CAExDC,EAFwD;EAGhE,OAAO9C,IAAI,CACTc,WAAW,CAACU,CAAD,EAAI,CAAJ,CADF,EAETgB,CAFS,EAGTxC,IAAI,CACFgB,GAAG,CAACZ,QAAQ,CAACoB,CAAD,EAAI,CAAJ,CAAT,EAAiBP,WAAW,CAACiC,CAAD,EAAI,CAAJ,CAA5B,CADD,EAEFhD,GAAG,CAACsC,CAAD,EAAIM,EAAJ,CAFD,EAGF9C,IAAI,CACFgB,GAAG,CAACZ,QAAQ,CAACoB,CAAD,EAAI,CAAJ,CAAT,EAAiBpB,QAAQ,CAAC8C,CAAD,EAAI,CAAJ,CAAzB,CADD,EAEF3C,GAAG,CAACiC,CAAD,EAAIM,EAAJ,CAFD,EAGF9C,IAAI,CACFgB,GAAG,CAAClB,EAAE,CAAC0B,CAAD,EAAI,CAAJ,CAAH,EAAWV,WAAW,CAACoC,CAAD,EAAI,CAAJ,CAAtB,CADD,EAEFJ,EAAE,GAAG,CAFH,EAGF9C,IAAI,CAACgB,GAAG,CAAClB,EAAE,CAAC0B,CAAD,EAAI,CAAJ,CAAH,EAAWpB,QAAQ,CAAC8C,CAAD,EAAI,CAAJ,CAAnB,CAAJ,EAAgC,CAACJ,EAAD,GAAM,CAAtC,EAAyC,CAAzC,CAHF,CAHF,CAHF,CAHK,CAAX;AAiBD,CArBsB,CAAlB;AAwBP,OAAO,IAAMK,WAAW,GAAGhC,IAAI,CAC7B,UACEiC,CADF,EAEEC,EAFF,EAGEC,EAHF,EAIEC,EAJF,EAKEC,EALF,EAM4B;EAC1B,IAAMC,IAAI,GAAGlD,GAAG,CAAC,CAAD,EAAI6C,CAAJ,CAAhB;EACA,IAAMZ,CAAC,GAAGrC,QAAQ,CAAC,CAAD,EAAIY,GAAG,CAAC0C,IAAD,EAAO,CAAP,CAAP,EAAkB1C,GAAG,CAACqC,CAAD,EAAI,CAAJ,CAArB,EAA6BC,EAA7B,CAAlB;EACA,IAAMZ,CAAC,GAAGtC,QAAQ,CAAC,CAAD,EAAIY,GAAG,CAAC0C,IAAD,EAAO,CAAP,CAAP,EAAkB1C,GAAG,CAACqC,CAAD,EAAI,CAAJ,CAArB,EAA6BE,EAA7B,CAAlB;EACA,IAAMI,CAAC,GAAGvD,QAAQ,CAAC,CAAD,EAAIY,GAAG,CAAC0C,IAAD,EAAO,CAAP,CAAP,EAAkB1C,GAAG,CAACqC,CAAD,EAAI,CAAJ,CAArB,EAA6BG,EAA7B,CAAlB;EACA,IAAMI,CAAC,GAAGxD,QAAQ,CAAC,CAAD,EAAIY,GAAG,CAAC0C,IAAD,EAAO,CAAP,CAAP,EAAkB1C,GAAG,CAACqC,CAAD,EAAI,CAAJ,CAArB,EAA6BI,EAA7B,CAAlB;EACA,OAAOtD,GAAG,CAACsC,CAAD,EAAIC,CAAJ,EAAOiB,CAAP,EAAUC,CAAV,CAAV;AACD,CAd4B,CAAxB;AAiBP,OAAO,IAAM9C,KAAK,GAAGM,IAAI,CACvB,UACEG,KADF,EAGK;EAAA,IADHoB,SACG,uEADqC,CACrC;EACH,IAAMkB,CAAC,GAAG7C,GAAG,CAAC,EAAD,EAAK2B,SAAL,CAAb;EACA,OAAOpC,MAAM,CAACM,OAAO,CAACT,QAAQ,CAACmB,KAAD,EAAQsC,CAAR,CAAT,CAAR,EAA8BA,CAA9B,CAAb;AACD,CAPsB,CAAlB;AAUP,OAAO,IAAMC,GAAG,GAAG1C,IAAI,CAAC,UAACG,KAAD;EAAA,OACtBvB,GAAG,CAACuB,KAAD,EAAQpB,GAAG,CAACoB,KAAD,EAAQ,CAAR,CAAX,CADmB;AAAA,CAAD,CAAhB;AAIP,OAAO,IAAMwC,GAAG,GAAG3C,IAAI,CAAC,UAACG,KAAD;EAAA,OACtBvB,GAAG,CAACuB,KAAD,EAAQf,GAAG,CAACe,KAAD,EAAQ,CAAR,CAAX,CADmB;AAAA,CAAD,CAAhB","names":["Animated","eq","set","cond","atan","add","multiply","lessThan","abs","divide","sub","min2","min","max2","max","reRound","round","greaterThan","pow","and","greaterOrEq","lessOrEq","proc","floor","bin","value","fract","x","sign","args","reduce","acc","arg","minus","avg","arguments","length","clamp","lowerBound","upperBound","between","inclusive","approximates","a","b","precision","toRad","deg","Math","PI","toDeg","rad","atan2","y","cubicBezier","t","p0","p1","p2","p3","term","c","d","p","inc","dec"],"sources":["Math.ts"],"sourcesContent":["import Animated from \"react-native-reanimated\";\n\nconst {\n  eq,\n  set,\n  cond,\n  atan,\n  add,\n  multiply,\n  lessThan,\n  abs,\n  divide,\n  sub,\n  min: min2,\n  max: max2,\n  round: reRound,\n  greaterThan,\n  pow,\n  and,\n  greaterOrEq,\n  lessOrEq,\n  proc,\n  floor,\n} = Animated;\n\nexport const bin = (value: boolean): 0 | 1 => (value ? 1 : 0);\n\nexport const fract = (x: Animated.Adaptable<number>) => sub(x, floor(x));\n\nexport const sign = (x: Animated.Adaptable<number>) =>\n  cond(lessThan(x, 0), -1, cond(eq(x, 0), 0, 1));\n\nexport const min = (...args: Animated.Adaptable<number>[]) =>\n  args.reduce((acc, arg) => min2(acc, arg));\n\nexport const max = (...args: Animated.Adaptable<number>[]) =>\n  args.reduce((acc, arg) => max2(acc, arg));\n\nexport const minus = (x: Animated.Node<number>) => multiply(-1, x);\n\nexport const avg = (\n  ...v: [\n    Animated.Adaptable<number>,\n    Animated.Adaptable<number>,\n    ...Animated.Adaptable<number>[]\n  ]\n) => divide(add(...v), v.length);\n\nexport const clamp = proc(\n  (\n    value: Animated.Adaptable<number>,\n    lowerBound: Animated.Adaptable<number>,\n    upperBound: Animated.Adaptable<number>\n  ): Animated.Node<number> => min2(max2(lowerBound, value), upperBound)\n);\n\nexport const between = (\n  value: Animated.Node<number>,\n  lowerBound: Animated.Adaptable<number>,\n  upperBound: Animated.Adaptable<number>,\n  inclusive = true\n) => {\n  if (inclusive) {\n    return and(greaterOrEq(value, lowerBound), lessOrEq(value, upperBound));\n  }\n  return and(greaterThan(value, lowerBound), lessThan(value, upperBound));\n};\n\nexport const approximates = proc(\n  (\n    a: Animated.Adaptable<number>,\n    b: Animated.Adaptable<number>,\n    precision: Animated.Adaptable<number> = 0.001\n  ) => lessThan(abs(sub(a, b)), precision)\n);\n\nexport const toRad = proc(\n  (deg: Animated.Adaptable<number>): Animated.Node<number> =>\n    multiply(deg, Math.PI / 180)\n);\n\nexport const toDeg = proc(\n  (rad: Animated.Adaptable<number>): Animated.Node<number> =>\n    multiply(rad, 180 / Math.PI)\n);\n\n// https://en.wikipedia.org/wiki/Atan2\n// https://www.gamedev.net/forums/topic/441464-manually-implementing-atan2-or-atan/\n// https://developer.download.nvidia.com/cg/atan2.html\n// https://www.medcalc.org/manual/atan2_function.php\nexport const atan2 = proc(\n  (y: Animated.Adaptable<number>, x: Animated.Adaptable<number>) => {\n    const a = atan(divide(y, x));\n    const { PI } = Math;\n    return cond(\n      greaterThan(x, 0),\n      a,\n      cond(\n        and(lessThan(x, 0), greaterOrEq(y, 0)),\n        add(a, PI),\n        cond(\n          and(lessThan(x, 0), lessThan(y, 0)),\n          sub(a, PI),\n          cond(\n            and(eq(x, 0), greaterThan(y, 0)),\n            PI / 2,\n            cond(and(eq(x, 0), lessThan(y, 0)), -PI / 2, 0)\n          )\n        )\n      )\n    );\n  }\n);\n\nexport const cubicBezier = proc(\n  (\n    t: Animated.Adaptable<number>,\n    p0: Animated.Adaptable<number>,\n    p1: Animated.Adaptable<number>,\n    p2: Animated.Adaptable<number>,\n    p3: Animated.Adaptable<number>\n  ): Animated.Node<number> => {\n    const term = sub(1, t);\n    const a = multiply(1, pow(term, 3), pow(t, 0), p0);\n    const b = multiply(3, pow(term, 2), pow(t, 1), p1);\n    const c = multiply(3, pow(term, 1), pow(t, 2), p2);\n    const d = multiply(1, pow(term, 0), pow(t, 3), p3);\n    return add(a, b, c, d);\n  }\n);\n\nexport const round = proc(\n  (\n    value: Animated.Adaptable<number>,\n    precision: Animated.Adaptable<number> = 0\n  ) => {\n    const p = pow(10, precision);\n    return divide(reRound(multiply(value, p)), p);\n  }\n);\n\nexport const inc = proc((value: Animated.Value<number>) =>\n  set(value, add(value, 1))\n);\n\nexport const dec = proc((value: Animated.Value<number>) =>\n  set(value, sub(value, 1))\n);\n"]},"metadata":{},"sourceType":"module"}