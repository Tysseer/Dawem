{"ast":null,"code":"import RevisionsManager from \"../helpers/RevisionsManager\";\nimport * as allActions from \"./reduxActions\";\nimport INITIAL_STATE from \"./reduxState\";\nimport { REHYDRATE } from \"redux-persist\";\n\nvar actionsReducer = function actionsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var bIsFirstRun = state.bIsFirstRun,\n      bSkipWelcome = state.bSkipWelcome,\n      strLang = state.strLang,\n      revisions = state.revisions,\n      curRevision = state.curRevision;\n\n  switch (action.type) {\n    case REHYDRATE:\n      {\n        var newState = {\n          bIsFirstRun: bIsFirstRun,\n          bSkipWelcome: bSkipWelcome,\n          strLang: strLang,\n          revisions: revisions,\n          curRevision: curRevision\n        };\n        return newState;\n      }\n\n    case allActions.APP_FIRST_RUN_FLAG:\n      {\n        var newflag = action.payload;\n        var _newState = {\n          bIsFirstRun: newflag,\n          bSkipWelcome: bSkipWelcome,\n          strLang: strLang,\n          revisions: revisions,\n          curRevision: curRevision\n        };\n        return _newState;\n      }\n\n    case allActions.SKIP_WELCOME_FLAG:\n      {\n        var _newflag = action.payload;\n        var _newState2 = {\n          bIsFirstRun: bIsFirstRun,\n          bSkipWelcome: _newflag,\n          strLang: strLang,\n          revisions: revisions,\n          curRevision: curRevision\n        };\n        return _newState2;\n      }\n\n    case allActions.LANGUAGE:\n      {\n        var newlang = action.payload;\n        var _newState3 = {\n          bIsFirstRun: bIsFirstRun,\n          bSkipWelcome: bSkipWelcome,\n          strLang: newlang,\n          revisions: revisions,\n          curRevision: curRevision\n        };\n        return _newState3;\n      }\n\n    case allActions.SET_CUR_REVISION:\n      {\n        var rev = action.payload;\n        var _newState4 = {\n          bIsFirstRun: bIsFirstRun,\n          bSkipWelcome: bSkipWelcome,\n          strLang: strLang,\n          revisions: revisions,\n          curRevision: rev\n        };\n        return _newState4;\n      }\n\n    case allActions.ADD_REVISION:\n      {\n        var _rev = action.payload;\n        var newRevArr = revisions.concat([_rev]);\n        var revisionsManager = new RevisionsManager();\n        revisionsManager.m_loadedRevisions = newRevArr;\n        revisionsManager.sortRevisions();\n        newRevArr = revisionsManager.m_loadedRevisions;\n        var _newState5 = {\n          bIsFirstRun: bIsFirstRun,\n          bSkipWelcome: bSkipWelcome,\n          strLang: strLang,\n          revisions: newRevArr,\n          curRevision: null\n        };\n        return _newState5;\n      }\n\n    case allActions.UPDATE_REVISION:\n    case allActions.DEL_REVISION:\n      {\n        var _rev2 = action.payload;\n        var newRevArr = [];\n\n        for (var i = 0; i < revisions.length; i++) {\n          if (revisions[i].id != _rev2.id) {\n            newRevArr.push(revisions[i]);\n            continue;\n          }\n        }\n\n        if (action.type == allActions.UPDATE_REVISION) newRevArr.push(_rev2);\n        var revisionsManager = new RevisionsManager();\n        revisionsManager.m_loadedRevisions = newRevArr;\n        revisionsManager.sortRevisions();\n        newRevArr = revisionsManager.m_loadedRevisions;\n        var _newState6 = {\n          bIsFirstRun: bIsFirstRun,\n          bSkipWelcome: bSkipWelcome,\n          strLang: strLang,\n          revisions: newRevArr,\n          curRevision: null\n        };\n        return _newState6;\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default actionsReducer;","map":{"version":3,"sources":["C:/Users/Tysseer Harak/Desktop/Data/Code/React Native/Dawem/app/js/redux/reducer.js"],"names":["RevisionsManager","allActions","INITIAL_STATE","REHYDRATE","actionsReducer","state","action","bIsFirstRun","bSkipWelcome","strLang","revisions","curRevision","type","newState","APP_FIRST_RUN_FLAG","newflag","payload","SKIP_WELCOME_FLAG","LANGUAGE","newlang","SET_CUR_REVISION","rev","ADD_REVISION","newRevArr","concat","revisionsManager","m_loadedRevisions","sortRevisions","UPDATE_REVISION","DEL_REVISION","i","length","id","push"],"mappings":"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","sourcesContent":["import RevisionsManager from \"../helpers/RevisionsManager\";\r\nimport * as allActions from \"./reduxActions\";\r\nimport INITIAL_STATE from \"./reduxState\";\r\nimport { REHYDRATE } from \"redux-persist\";\r\nconst actionsReducer = (state = INITIAL_STATE, action) => {\r\n  const { bIsFirstRun, bSkipWelcome, strLang, revisions, curRevision } = state;\r\n  switch (action.type) {\r\n    case REHYDRATE: {\r\n      const newState = {\r\n        bIsFirstRun: bIsFirstRun,\r\n        bSkipWelcome: bSkipWelcome,\r\n        strLang: strLang,\r\n        revisions: revisions,\r\n        curRevision: curRevision,\r\n      };\r\n\r\n      return newState;\r\n    }\r\n    case allActions.APP_FIRST_RUN_FLAG: {\r\n      const newflag = action.payload;\r\n      const newState = {\r\n        bIsFirstRun: newflag,\r\n        bSkipWelcome: bSkipWelcome,\r\n        strLang: strLang,\r\n        revisions: revisions,\r\n        curRevision: curRevision,\r\n      };\r\n      return newState;\r\n    }\r\n    case allActions.SKIP_WELCOME_FLAG: {\r\n      const newflag = action.payload;\r\n      const newState = {\r\n        bIsFirstRun: bIsFirstRun,\r\n        bSkipWelcome: newflag,\r\n        strLang: strLang,\r\n        revisions: revisions,\r\n        curRevision: curRevision,\r\n      };\r\n      return newState;\r\n    }\r\n    case allActions.LANGUAGE: {\r\n      const newlang = action.payload;\r\n      const newState = {\r\n        bIsFirstRun: bIsFirstRun,\r\n        bSkipWelcome: bSkipWelcome,\r\n        strLang: newlang,\r\n        revisions: revisions,\r\n        curRevision: curRevision,\r\n      };\r\n      return newState;\r\n    }\r\n    case allActions.SET_CUR_REVISION: {\r\n      const rev = action.payload;\r\n      const newState = {\r\n        bIsFirstRun: bIsFirstRun,\r\n        bSkipWelcome: bSkipWelcome,\r\n        strLang: strLang,\r\n        revisions: revisions,\r\n        curRevision: rev,\r\n      };\r\n      return newState;\r\n    }\r\n    case allActions.ADD_REVISION: {\r\n      const rev = action.payload;\r\n      var newRevArr = revisions.concat([rev]);\r\n      var revisionsManager = new RevisionsManager();\r\n      revisionsManager.m_loadedRevisions = newRevArr;\r\n      revisionsManager.sortRevisions();\r\n      newRevArr = revisionsManager.m_loadedRevisions;\r\n      const newState = {\r\n        bIsFirstRun: bIsFirstRun,\r\n        bSkipWelcome: bSkipWelcome,\r\n        strLang: strLang,\r\n        revisions: newRevArr,\r\n        curRevision: null,\r\n      };\r\n\r\n      return newState;\r\n    }\r\n    case allActions.UPDATE_REVISION:\r\n    case allActions.DEL_REVISION: {\r\n      // todo: replace push with splice or more efficient way\r\n      const rev = action.payload;\r\n\r\n      var newRevArr = [];\r\n      for (var i = 0; i < revisions.length; i++) {\r\n        if (revisions[i].id != rev.id) {\r\n          newRevArr.push(revisions[i]); //currev[i].clone()\r\n          continue;\r\n        }\r\n      }\r\n      if (action.type == allActions.UPDATE_REVISION) newRevArr.push(rev); //rev.clone()\r\n\r\n      var revisionsManager = new RevisionsManager();\r\n      revisionsManager.m_loadedRevisions = newRevArr;\r\n      revisionsManager.sortRevisions();\r\n      newRevArr = revisionsManager.m_loadedRevisions;\r\n      const newState = {\r\n        bIsFirstRun: bIsFirstRun,\r\n        bSkipWelcome: bSkipWelcome,\r\n        strLang: strLang,\r\n        revisions: newRevArr,\r\n        curRevision: null,\r\n      };\r\n\r\n      return newState;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default actionsReducer;\r\n"]},"metadata":{},"sourceType":"module"}