{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Tysseer Harak\\\\Desktop\\\\Data\\\\Code\\\\React Native\\\\Dawem\\\\App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScreenRevisions from \"./app/js/screens/ScreenRevisions\";\nimport ScreenWelcome from \"./app/js/screens/ScreenWelcome\";\nimport ScreenLanguage from \"./app/js/screens/ScreenLanguage\";\nimport ScreenQuranBrowser from \"./app/js/screens/ScreenQuranBrowser\";\nimport ScreenRevisionDetails from \"./app/js/screens/ScreenRevisionDetails\";\nimport ScreenSettings from \"./app/js/screens/ScreenSettings\";\nimport \"react-native-gesture-handler\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { Provider } from \"react-redux\";\nimport reduxStore from \"./app/js/redux/reduxStore\";\nimport reduxPersistor from \"./app/js/redux/reduxPersistor\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport Revision from \"./app/js/helpers/Revision\";\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      bIsLoaded: false\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"onBeforeLift\",\n    value: function onBeforeLift() {\n      for (var i = 0; i < reduxStore.getState().revisions.length; i++) {\n        var rev = new Revision();\n        rev.fillFromSerializedObj(reduxStore.getState().revisions[i]);\n        reduxStore.getState().revisions[i] = rev;\n      }\n\n      this.setState({\n        bIsLoaded: true\n      });\n    }\n  }, {\n    key: \"getLoadingRender\",\n    value: function getLoadingRender() {\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 40,\n          color: \"red\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 9\n        }\n      }, \"Loading\"));\n    }\n  }, {\n    key: \"getNavigationStack\",\n    value: function getNavigationStack() {\n      var Stack = createStackNavigator();\n      return React.createElement(NavigationContainer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 7\n        }\n      }, React.createElement(Stack.Navigator, {\n        screenOptions: {\n          headerShown: false\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }\n      }, reduxStore.getState().bIsFirstRun ? React.createElement(Stack.Screen, {\n        name: \"ScrLang\",\n        component: ScreenLanguage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }\n      }) : null, reduxStore.getState().bSkipWelcome == false ? React.createElement(Stack.Screen, {\n        name: \"ScrWelcome\",\n        component: ScreenWelcome,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }\n      }) : null, React.createElement(Stack.Screen, {\n        name: \"ScrList\",\n        component: ScreenRevisions,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }\n      }), React.createElement(Stack.Screen, {\n        name: \"ScrRev\",\n        component: ScreenRevisionDetails,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }\n      }), React.createElement(Stack.Screen, {\n        name: \"ScrQuran\",\n        component: ScreenQuranBrowser,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }\n      }), React.createElement(Stack.Screen, {\n        name: \"ScrSettings\",\n        component: ScreenSettings,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }\n      })));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Provider, {\n        store: reduxStore,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 7\n        }\n      }, React.createElement(PersistGate, {\n        loading: null,\n        persistor: reduxPersistor,\n        onBeforeLift: this.onBeforeLift.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 9\n        }\n      }, this.state.bIsLoaded ? this.getNavigationStack() : this.getLoadingRender()));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#666\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});","map":{"version":3,"sources":["C:/Users/Tysseer Harak/Desktop/Data/Code/React Native/Dawem/App.js"],"names":["React","Component","ScreenRevisions","ScreenWelcome","ScreenLanguage","ScreenQuranBrowser","ScreenRevisionDetails","ScreenSettings","NavigationContainer","createStackNavigator","Provider","reduxStore","reduxPersistor","PersistGate","Revision","App","props","state","bIsLoaded","i","getState","revisions","length","rev","fillFromSerializedObj","setState","styles","container","fontSize","color","Stack","headerShown","bIsFirstRun","bSkipWelcome","onBeforeLift","bind","getNavigationStack","getLoadingRender","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { StyleSheet, Text, View } from \"react-native\";\r\n\r\nimport ScreenRevisions from \"./app/js/screens/ScreenRevisions\";\r\nimport ScreenWelcome from \"./app/js/screens/ScreenWelcome\";\r\nimport ScreenLanguage from \"./app/js/screens/ScreenLanguage\";\r\nimport ScreenQuranBrowser from \"./app/js/screens/ScreenQuranBrowser\";\r\nimport ScreenRevisionDetails from \"./app/js/screens/ScreenRevisionDetails\";\r\nimport ScreenSettings from \"./app/js/screens/ScreenSettings\";\r\nimport \"react-native-gesture-handler\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createStackNavigator } from \"@react-navigation/stack\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport reduxStore from \"./app/js/redux/reduxStore\";\r\nimport reduxPersistor from \"./app/js/redux/reduxPersistor\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\nimport Revision from \"./app/js/helpers/Revision\";\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      bIsLoaded: false,\r\n    };\r\n  }\r\n\r\n  onBeforeLift() {\r\n    // take some action before the gate lifts\r\n    for (var i = 0; i < reduxStore.getState().revisions.length; i++) {\r\n      var rev = new Revision();\r\n      rev.fillFromSerializedObj(reduxStore.getState().revisions[i]);\r\n      reduxStore.getState().revisions[i] = rev;\r\n    }\r\n    this.setState({ bIsLoaded: true });\r\n  }\r\n  getLoadingRender() {\r\n    return (\r\n      <View style={styles.container}>\r\n        <Text style={{ fontSize: 40, color: \"red\" }}>Loading</Text>\r\n      </View>\r\n    );\r\n  }\r\n  getNavigationStack() {\r\n    const Stack = createStackNavigator();\r\n    return (\r\n      <NavigationContainer>\r\n        <Stack.Navigator\r\n          screenOptions={{\r\n            headerShown: false,\r\n          }}\r\n        >\r\n          {reduxStore.getState().bIsFirstRun ? (\r\n            <Stack.Screen name=\"ScrLang\" component={ScreenLanguage} />\r\n          ) : null}\r\n          {reduxStore.getState().bSkipWelcome == false ? (\r\n            <Stack.Screen name=\"ScrWelcome\" component={ScreenWelcome} />\r\n          ) : null}\r\n          <Stack.Screen name=\"ScrList\" component={ScreenRevisions} />\r\n          <Stack.Screen name=\"ScrRev\" component={ScreenRevisionDetails} />\r\n          <Stack.Screen name=\"ScrQuran\" component={ScreenQuranBrowser} />\r\n          <Stack.Screen name=\"ScrSettings\" component={ScreenSettings} />\r\n        </Stack.Navigator>\r\n      </NavigationContainer>\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <Provider store={reduxStore}>\r\n        <PersistGate\r\n          loading={null}\r\n          persistor={reduxPersistor}\r\n          onBeforeLift={this.onBeforeLift.bind(this)}\r\n        >\r\n          {this.state.bIsLoaded\r\n            ? this.getNavigationStack()\r\n            : this.getLoadingRender()}\r\n        </PersistGate>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#666\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}