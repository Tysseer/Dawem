{"ast":null,"code":"import _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { EventEmitter, UnavailabilityError } from 'expo-modules-core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { v4 as uuidv4 } from 'uuid';\nimport ExponentFileSystem from \"./ExponentFileSystem\";\nimport { EncodingType, FileSystemSessionType, FileSystemUploadType } from \"./FileSystem.types\";\nif (!ExponentFileSystem) {\n  console.warn(\"No native ExponentFileSystem module found, are you sure the expo-file-system's module is linked properly?\");\n}\nvar _unused = new EventEmitter(ExponentFileSystem);\nexport { EncodingType, FileSystemSessionType, FileSystemUploadType };\nfunction normalizeEndingSlash(p) {\n  if (p != null) {\n    return p.replace(/\\/*$/, '') + '/';\n  }\n  return null;\n}\nexport var documentDirectory = normalizeEndingSlash(ExponentFileSystem.documentDirectory);\nexport var cacheDirectory = normalizeEndingSlash(ExponentFileSystem.cacheDirectory);\nvar bundledAssets = ExponentFileSystem.bundledAssets,\n  bundleDirectory = ExponentFileSystem.bundleDirectory;\nexport { bundledAssets, bundleDirectory };\nexport function getInfoAsync(fileUri) {\n  var options,\n    _args = arguments;\n  return _regeneratorRuntime.async(function getInfoAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n          if (ExponentFileSystem.getInfoAsync) {\n            _context.next = 3;\n            break;\n          }\n          throw new UnavailabilityError('expo-file-system', 'getInfoAsync');\n        case 3:\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.getInfoAsync(fileUri, options));\n        case 5:\n          return _context.abrupt(\"return\", _context.sent);\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function readAsStringAsync(fileUri, options) {\n  return _regeneratorRuntime.async(function readAsStringAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (ExponentFileSystem.readAsStringAsync) {\n            _context2.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('expo-file-system', 'readAsStringAsync');\n        case 2:\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.readAsStringAsync(fileUri, options || {}));\n        case 4:\n          return _context2.abrupt(\"return\", _context2.sent);\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getContentUriAsync(fileUri) {\n  return _regeneratorRuntime.async(function getContentUriAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!(Platform.OS === 'android')) {\n            _context3.next = 8;\n            break;\n          }\n          if (ExponentFileSystem.getContentUriAsync) {\n            _context3.next = 3;\n            break;\n          }\n          throw new UnavailabilityError('expo-file-system', 'getContentUriAsync');\n        case 3:\n          _context3.next = 5;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.getContentUriAsync(fileUri));\n        case 5:\n          return _context3.abrupt(\"return\", _context3.sent);\n        case 8:\n          return _context3.abrupt(\"return\", new Promise(function (resolve, reject) {\n            resolve(fileUri);\n          }));\n        case 9:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function writeAsStringAsync(fileUri, contents) {\n  var options,\n    _args4 = arguments;\n  return _regeneratorRuntime.async(function writeAsStringAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          options = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};\n          if (ExponentFileSystem.writeAsStringAsync) {\n            _context4.next = 3;\n            break;\n          }\n          throw new UnavailabilityError('expo-file-system', 'writeAsStringAsync');\n        case 3:\n          _context4.next = 5;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.writeAsStringAsync(fileUri, contents, options));\n        case 5:\n          return _context4.abrupt(\"return\", _context4.sent);\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function deleteAsync(fileUri) {\n  var options,\n    _args5 = arguments;\n  return _regeneratorRuntime.async(function deleteAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          options = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};\n          if (ExponentFileSystem.deleteAsync) {\n            _context5.next = 3;\n            break;\n          }\n          throw new UnavailabilityError('expo-file-system', 'deleteAsync');\n        case 3:\n          _context5.next = 5;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.deleteAsync(fileUri, options));\n        case 5:\n          return _context5.abrupt(\"return\", _context5.sent);\n        case 6:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function deleteLegacyDocumentDirectoryAndroid() {\n  var legacyDocumentDirectory;\n  return _regeneratorRuntime.async(function deleteLegacyDocumentDirectoryAndroid$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          if (!(Platform.OS !== 'android' || documentDirectory == null)) {\n            _context6.next = 2;\n            break;\n          }\n          return _context6.abrupt(\"return\");\n        case 2:\n          legacyDocumentDirectory = documentDirectory + \"ExperienceData/\";\n          _context6.next = 5;\n          return _regeneratorRuntime.awrap(deleteAsync(legacyDocumentDirectory, {\n            idempotent: true\n          }));\n        case 5:\n          return _context6.abrupt(\"return\", _context6.sent);\n        case 6:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function moveAsync(options) {\n  return _regeneratorRuntime.async(function moveAsync$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          if (ExponentFileSystem.moveAsync) {\n            _context7.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('expo-file-system', 'moveAsync');\n        case 2:\n          _context7.next = 4;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.moveAsync(options));\n        case 4:\n          return _context7.abrupt(\"return\", _context7.sent);\n        case 5:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function copyAsync(options) {\n  return _regeneratorRuntime.async(function copyAsync$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          if (ExponentFileSystem.copyAsync) {\n            _context8.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('expo-file-system', 'copyAsync');\n        case 2:\n          _context8.next = 4;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.copyAsync(options));\n        case 4:\n          return _context8.abrupt(\"return\", _context8.sent);\n        case 5:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function makeDirectoryAsync(fileUri) {\n  var options,\n    _args9 = arguments;\n  return _regeneratorRuntime.async(function makeDirectoryAsync$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          options = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {};\n          if (ExponentFileSystem.makeDirectoryAsync) {\n            _context9.next = 3;\n            break;\n          }\n          throw new UnavailabilityError('expo-file-system', 'makeDirectoryAsync');\n        case 3:\n          _context9.next = 5;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.makeDirectoryAsync(fileUri, options));\n        case 5:\n          return _context9.abrupt(\"return\", _context9.sent);\n        case 6:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function readDirectoryAsync(fileUri) {\n  return _regeneratorRuntime.async(function readDirectoryAsync$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          if (ExponentFileSystem.readDirectoryAsync) {\n            _context10.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('expo-file-system', 'readDirectoryAsync');\n        case 2:\n          _context10.next = 4;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.readDirectoryAsync(fileUri, {}));\n        case 4:\n          return _context10.abrupt(\"return\", _context10.sent);\n        case 5:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getFreeDiskStorageAsync() {\n  return _regeneratorRuntime.async(function getFreeDiskStorageAsync$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          if (ExponentFileSystem.getFreeDiskStorageAsync) {\n            _context11.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('expo-file-system', 'getFreeDiskStorageAsync');\n        case 2:\n          _context11.next = 4;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.getFreeDiskStorageAsync());\n        case 4:\n          return _context11.abrupt(\"return\", _context11.sent);\n        case 5:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getTotalDiskCapacityAsync() {\n  return _regeneratorRuntime.async(function getTotalDiskCapacityAsync$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          if (ExponentFileSystem.getTotalDiskCapacityAsync) {\n            _context12.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('expo-file-system', 'getTotalDiskCapacityAsync');\n        case 2:\n          _context12.next = 4;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.getTotalDiskCapacityAsync());\n        case 4:\n          return _context12.abrupt(\"return\", _context12.sent);\n        case 5:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function downloadAsync(uri, fileUri) {\n  var options,\n    _args13 = arguments;\n  return _regeneratorRuntime.async(function downloadAsync$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          options = _args13.length > 2 && _args13[2] !== undefined ? _args13[2] : {};\n          if (ExponentFileSystem.downloadAsync) {\n            _context13.next = 3;\n            break;\n          }\n          throw new UnavailabilityError('expo-file-system', 'downloadAsync');\n        case 3:\n          _context13.next = 5;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.downloadAsync(uri, fileUri, _objectSpread({\n            sessionType: FileSystemSessionType.BACKGROUND\n          }, options)));\n        case 5:\n          return _context13.abrupt(\"return\", _context13.sent);\n        case 6:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function uploadAsync(url, fileUri) {\n  var options,\n    _args14 = arguments;\n  return _regeneratorRuntime.async(function uploadAsync$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          options = _args14.length > 2 && _args14[2] !== undefined ? _args14[2] : {};\n          if (ExponentFileSystem.uploadAsync) {\n            _context14.next = 3;\n            break;\n          }\n          throw new UnavailabilityError('expo-file-system', 'uploadAsync');\n        case 3:\n          _context14.next = 5;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.uploadAsync(url, fileUri, _objectSpread(_objectSpread({\n            sessionType: FileSystemSessionType.BACKGROUND,\n            uploadType: FileSystemUploadType.BINARY_CONTENT\n          }, options), {}, {\n            httpMethod: (options.httpMethod || 'POST').toUpperCase()\n          })));\n        case 5:\n          return _context14.abrupt(\"return\", _context14.sent);\n        case 6:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function createDownloadResumable(uri, fileUri, options, callback, resumeData) {\n  return new DownloadResumable(uri, fileUri, options, callback, resumeData);\n}\nexport function createUploadTask(url, fileUri, options, callback) {\n  return new UploadTask(url, fileUri, options, callback);\n}\nexport var FileSystemCancellableNetworkTask = function () {\n  function FileSystemCancellableNetworkTask() {\n    _classCallCheck(this, FileSystemCancellableNetworkTask);\n    this._uuid = uuidv4();\n    this.taskWasCanceled = false;\n    this.emitter = new EventEmitter(ExponentFileSystem);\n  }\n  _createClass(FileSystemCancellableNetworkTask, [{\n    key: \"cancelAsync\",\n    value: function cancelAsync() {\n      return _regeneratorRuntime.async(function cancelAsync$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              if (ExponentFileSystem.networkTaskCancelAsync) {\n                _context15.next = 2;\n                break;\n              }\n              throw new UnavailabilityError('expo-file-system', 'networkTaskCancelAsync');\n            case 2:\n              this.removeSubscription();\n              this.taskWasCanceled = true;\n              _context15.next = 6;\n              return _regeneratorRuntime.awrap(ExponentFileSystem.networkTaskCancelAsync(this.uuid));\n            case 6:\n              return _context15.abrupt(\"return\", _context15.sent);\n            case 7:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"isTaskCancelled\",\n    value: function isTaskCancelled() {\n      if (this.taskWasCanceled) {\n        console.warn('This task was already canceled.');\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"uuid\",\n    get: function get() {\n      return this._uuid;\n    }\n  }, {\n    key: \"addSubscription\",\n    value: function addSubscription() {\n      var _this = this;\n      if (this.subscription) {\n        return;\n      }\n      this.subscription = this.emitter.addListener(this.getEventName(), function (event) {\n        if (event.uuid === _this.uuid) {\n          var callback = _this.getCallback();\n          if (callback) {\n            callback(event.data);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription() {\n      if (!this.subscription) {\n        return;\n      }\n      this.emitter.removeSubscription(this.subscription);\n      this.subscription = null;\n    }\n  }]);\n  return FileSystemCancellableNetworkTask;\n}();\nexport var UploadTask = function (_FileSystemCancellabl) {\n  _inherits(UploadTask, _FileSystemCancellabl);\n  var _super = _createSuper(UploadTask);\n  function UploadTask(url, fileUri, options, callback) {\n    var _options$httpMethod;\n    var _this2;\n    _classCallCheck(this, UploadTask);\n    _this2 = _super.call(this);\n    _this2.url = url;\n    _this2.fileUri = fileUri;\n    _this2.callback = callback;\n    var httpMethod = (options == null ? void 0 : (_options$httpMethod = options.httpMethod) == null ? void 0 : _options$httpMethod.toUpperCase()) || 'POST';\n    _this2.options = _objectSpread(_objectSpread({\n      sessionType: FileSystemSessionType.BACKGROUND,\n      uploadType: FileSystemUploadType.BINARY_CONTENT\n    }, options), {}, {\n      httpMethod: httpMethod\n    });\n    return _this2;\n  }\n  _createClass(UploadTask, [{\n    key: \"getEventName\",\n    value: function getEventName() {\n      return 'expo-file-system.uploadProgress';\n    }\n  }, {\n    key: \"getCallback\",\n    value: function getCallback() {\n      return this.callback;\n    }\n  }, {\n    key: \"uploadAsync\",\n    value: function uploadAsync() {\n      var result;\n      return _regeneratorRuntime.async(function uploadAsync$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              if (ExponentFileSystem.uploadTaskStartAsync) {\n                _context16.next = 2;\n                break;\n              }\n              throw new UnavailabilityError('expo-file-system', 'uploadTaskStartAsync');\n            case 2:\n              if (!this.isTaskCancelled()) {\n                _context16.next = 4;\n                break;\n              }\n              return _context16.abrupt(\"return\");\n            case 4:\n              this.addSubscription();\n              _context16.next = 7;\n              return _regeneratorRuntime.awrap(ExponentFileSystem.uploadTaskStartAsync(this.url, this.fileUri, this.uuid, this.options));\n            case 7:\n              result = _context16.sent;\n              this.removeSubscription();\n              return _context16.abrupt(\"return\", result);\n            case 10:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n  return UploadTask;\n}(FileSystemCancellableNetworkTask);\nexport var DownloadResumable = function (_FileSystemCancellabl2) {\n  _inherits(DownloadResumable, _FileSystemCancellabl2);\n  var _super2 = _createSuper(DownloadResumable);\n  function DownloadResumable(url, _fileUri) {\n    var _this3;\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var callback = arguments.length > 3 ? arguments[3] : undefined;\n    var resumeData = arguments.length > 4 ? arguments[4] : undefined;\n    _classCallCheck(this, DownloadResumable);\n    _this3 = _super2.call(this);\n    _this3.url = url;\n    _this3._fileUri = _fileUri;\n    _this3.options = options;\n    _this3.callback = callback;\n    _this3.resumeData = resumeData;\n    return _this3;\n  }\n  _createClass(DownloadResumable, [{\n    key: \"fileUri\",\n    get: function get() {\n      return this._fileUri;\n    }\n  }, {\n    key: \"getEventName\",\n    value: function getEventName() {\n      return 'expo-file-system.downloadProgress';\n    }\n  }, {\n    key: \"getCallback\",\n    value: function getCallback() {\n      return this.callback;\n    }\n  }, {\n    key: \"downloadAsync\",\n    value: function downloadAsync() {\n      return _regeneratorRuntime.async(function downloadAsync$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              if (ExponentFileSystem.downloadResumableStartAsync) {\n                _context17.next = 2;\n                break;\n              }\n              throw new UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n            case 2:\n              if (!this.isTaskCancelled()) {\n                _context17.next = 4;\n                break;\n              }\n              return _context17.abrupt(\"return\");\n            case 4:\n              this.addSubscription();\n              _context17.next = 7;\n              return _regeneratorRuntime.awrap(ExponentFileSystem.downloadResumableStartAsync(this.url, this._fileUri, this.uuid, this.options, this.resumeData));\n            case 7:\n              return _context17.abrupt(\"return\", _context17.sent);\n            case 8:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"pauseAsync\",\n    value: function pauseAsync() {\n      var pauseResult;\n      return _regeneratorRuntime.async(function pauseAsync$(_context18) {\n        while (1) {\n          switch (_context18.prev = _context18.next) {\n            case 0:\n              if (ExponentFileSystem.downloadResumablePauseAsync) {\n                _context18.next = 2;\n                break;\n              }\n              throw new UnavailabilityError('expo-file-system', 'downloadResumablePauseAsync');\n            case 2:\n              if (!this.isTaskCancelled()) {\n                _context18.next = 4;\n                break;\n              }\n              return _context18.abrupt(\"return\", {\n                fileUri: this._fileUri,\n                options: this.options,\n                url: this.url\n              });\n            case 4:\n              _context18.next = 6;\n              return _regeneratorRuntime.awrap(ExponentFileSystem.downloadResumablePauseAsync(this.uuid));\n            case 6:\n              pauseResult = _context18.sent;\n              this.removeSubscription();\n              if (!pauseResult) {\n                _context18.next = 13;\n                break;\n              }\n              this.resumeData = pauseResult.resumeData;\n              return _context18.abrupt(\"return\", this.savable());\n            case 13:\n              throw new Error('Unable to generate a savable pause state');\n            case 14:\n            case \"end\":\n              return _context18.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"resumeAsync\",\n    value: function resumeAsync() {\n      return _regeneratorRuntime.async(function resumeAsync$(_context19) {\n        while (1) {\n          switch (_context19.prev = _context19.next) {\n            case 0:\n              if (ExponentFileSystem.downloadResumableStartAsync) {\n                _context19.next = 2;\n                break;\n              }\n              throw new UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n            case 2:\n              if (!this.isTaskCancelled()) {\n                _context19.next = 4;\n                break;\n              }\n              return _context19.abrupt(\"return\");\n            case 4:\n              this.addSubscription();\n              _context19.next = 7;\n              return _regeneratorRuntime.awrap(ExponentFileSystem.downloadResumableStartAsync(this.url, this.fileUri, this.uuid, this.options, this.resumeData));\n            case 7:\n              return _context19.abrupt(\"return\", _context19.sent);\n            case 8:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"savable\",\n    value: function savable() {\n      return {\n        url: this.url,\n        fileUri: this.fileUri,\n        options: this.options,\n        resumeData: this.resumeData\n      };\n    }\n  }]);\n  return DownloadResumable;\n}(FileSystemCancellableNetworkTask);\nvar baseReadAsStringAsync = readAsStringAsync;\nvar baseWriteAsStringAsync = writeAsStringAsync;\nvar baseDeleteAsync = deleteAsync;\nvar baseMoveAsync = moveAsync;\nvar baseCopyAsync = copyAsync;\nexport var StorageAccessFramework;\n(function (StorageAccessFramework) {\n  function getUriForDirectoryInRoot(folderName) {\n    return \"content://com.android.externalstorage.documents/tree/primary:\" + folderName + \"/document/primary:\" + folderName;\n  }\n  StorageAccessFramework.getUriForDirectoryInRoot = getUriForDirectoryInRoot;\n  function requestDirectoryPermissionsAsync() {\n    var initialFileUrl,\n      _args20 = arguments;\n    return _regeneratorRuntime.async(function requestDirectoryPermissionsAsync$(_context20) {\n      while (1) {\n        switch (_context20.prev = _context20.next) {\n          case 0:\n            initialFileUrl = _args20.length > 0 && _args20[0] !== undefined ? _args20[0] : null;\n            if (ExponentFileSystem.requestDirectoryPermissionsAsync) {\n              _context20.next = 3;\n              break;\n            }\n            throw new UnavailabilityError('expo-file-system', 'StorageAccessFramework.requestDirectoryPermissionsAsync');\n          case 3:\n            _context20.next = 5;\n            return _regeneratorRuntime.awrap(ExponentFileSystem.requestDirectoryPermissionsAsync(initialFileUrl));\n          case 5:\n            return _context20.abrupt(\"return\", _context20.sent);\n          case 6:\n          case \"end\":\n            return _context20.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n  StorageAccessFramework.requestDirectoryPermissionsAsync = requestDirectoryPermissionsAsync;\n  function readDirectoryAsync(dirUri) {\n    return _regeneratorRuntime.async(function readDirectoryAsync$(_context21) {\n      while (1) {\n        switch (_context21.prev = _context21.next) {\n          case 0:\n            if (ExponentFileSystem.readSAFDirectoryAsync) {\n              _context21.next = 2;\n              break;\n            }\n            throw new UnavailabilityError('expo-file-system', 'StorageAccessFramework.readDirectoryAsync');\n          case 2:\n            _context21.next = 4;\n            return _regeneratorRuntime.awrap(ExponentFileSystem.readSAFDirectoryAsync(dirUri, {}));\n          case 4:\n            return _context21.abrupt(\"return\", _context21.sent);\n          case 5:\n          case \"end\":\n            return _context21.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n  StorageAccessFramework.readDirectoryAsync = readDirectoryAsync;\n  function makeDirectoryAsync(parentUri, dirName) {\n    return _regeneratorRuntime.async(function makeDirectoryAsync$(_context22) {\n      while (1) {\n        switch (_context22.prev = _context22.next) {\n          case 0:\n            if (ExponentFileSystem.makeSAFDirectoryAsync) {\n              _context22.next = 2;\n              break;\n            }\n            throw new UnavailabilityError('expo-file-system', 'StorageAccessFramework.makeDirectoryAsync');\n          case 2:\n            _context22.next = 4;\n            return _regeneratorRuntime.awrap(ExponentFileSystem.makeSAFDirectoryAsync(parentUri, dirName));\n          case 4:\n            return _context22.abrupt(\"return\", _context22.sent);\n          case 5:\n          case \"end\":\n            return _context22.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n  StorageAccessFramework.makeDirectoryAsync = makeDirectoryAsync;\n  function createFileAsync(parentUri, fileName, mimeType) {\n    return _regeneratorRuntime.async(function createFileAsync$(_context23) {\n      while (1) {\n        switch (_context23.prev = _context23.next) {\n          case 0:\n            if (ExponentFileSystem.createSAFFileAsync) {\n              _context23.next = 2;\n              break;\n            }\n            throw new UnavailabilityError('expo-file-system', 'StorageAccessFramework.createFileAsync');\n          case 2:\n            _context23.next = 4;\n            return _regeneratorRuntime.awrap(ExponentFileSystem.createSAFFileAsync(parentUri, fileName, mimeType));\n          case 4:\n            return _context23.abrupt(\"return\", _context23.sent);\n          case 5:\n          case \"end\":\n            return _context23.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n  StorageAccessFramework.createFileAsync = createFileAsync;\n  StorageAccessFramework.writeAsStringAsync = baseWriteAsStringAsync;\n  StorageAccessFramework.readAsStringAsync = baseReadAsStringAsync;\n  StorageAccessFramework.deleteAsync = baseDeleteAsync;\n  StorageAccessFramework.moveAsync = baseMoveAsync;\n  StorageAccessFramework.copyAsync = baseCopyAsync;\n})(StorageAccessFramework || (StorageAccessFramework = {}));","map":{"version":3,"mappings":"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","names":["EventEmitter","UnavailabilityError","v4","uuidv4","ExponentFileSystem","EncodingType","FileSystemSessionType","FileSystemUploadType","console","warn","_unused","normalizeEndingSlash","p","replace","documentDirectory","cacheDirectory","bundledAssets","bundleDirectory","getInfoAsync","fileUri","options","readAsStringAsync","getContentUriAsync","Platform","OS","Promise","resolve","reject","writeAsStringAsync","contents","deleteAsync","deleteLegacyDocumentDirectoryAndroid","legacyDocumentDirectory","idempotent","moveAsync","copyAsync","makeDirectoryAsync","readDirectoryAsync","getFreeDiskStorageAsync","getTotalDiskCapacityAsync","downloadAsync","uri","sessionType","BACKGROUND","uploadAsync","url","uploadType","BINARY_CONTENT","httpMethod","toUpperCase","createDownloadResumable","callback","resumeData","DownloadResumable","createUploadTask","UploadTask","FileSystemCancellableNetworkTask","_uuid","taskWasCanceled","emitter","networkTaskCancelAsync","removeSubscription","uuid","subscription","addListener","getEventName","event","getCallback","data","uploadTaskStartAsync","isTaskCancelled","addSubscription","result","_fileUri","downloadResumableStartAsync","downloadResumablePauseAsync","pauseResult","savable","Error","baseReadAsStringAsync","baseWriteAsStringAsync","baseDeleteAsync","baseMoveAsync","baseCopyAsync","StorageAccessFramework","getUriForDirectoryInRoot","folderName","requestDirectoryPermissionsAsync","initialFileUrl","dirUri","readSAFDirectoryAsync","parentUri","dirName","makeSAFDirectoryAsync","createFileAsync","fileName","mimeType","createSAFFileAsync"],"sourceRoot":"","sources":["../src/FileSystem.ts"],"sourcesContent":["import { EventEmitter, Subscription, UnavailabilityError } from 'expo-modules-core';\nimport { Platform } from 'react-native';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport ExponentFileSystem from './ExponentFileSystem';\nimport {\n  DownloadOptions,\n  DownloadPauseState,\n  DownloadProgressCallback,\n  FileSystemNetworkTaskProgressCallback,\n  DownloadProgressData,\n  UploadProgressData,\n  DownloadResult,\n  EncodingType,\n  FileInfo,\n  FileSystemAcceptedUploadHttpMethod,\n  FileSystemDownloadResult,\n  FileSystemRequestDirectoryPermissionsResult,\n  FileSystemSessionType,\n  FileSystemUploadOptions,\n  FileSystemUploadResult,\n  FileSystemUploadType,\n  ProgressEvent,\n  ReadingOptions,\n  WritingOptions,\n} from './FileSystem.types';\n\nif (!ExponentFileSystem) {\n  console.warn(\n    \"No native ExponentFileSystem module found, are you sure the expo-file-system's module is linked properly?\"\n  );\n}\n// Prevent webpack from pruning this.\nconst _unused = new EventEmitter(ExponentFileSystem); // eslint-disable-line\n\nexport {\n  DownloadOptions,\n  DownloadPauseState,\n  DownloadProgressCallback,\n  DownloadProgressData,\n  DownloadResult,\n  EncodingType,\n  FileInfo,\n  FileSystemDownloadResult,\n  FileSystemRequestDirectoryPermissionsResult,\n  FileSystemAcceptedUploadHttpMethod,\n  FileSystemSessionType,\n  FileSystemUploadOptions,\n  FileSystemUploadResult,\n  FileSystemUploadType,\n  FileSystemNetworkTaskProgressCallback,\n  ReadingOptions,\n  WritingOptions,\n};\n\nfunction normalizeEndingSlash(p: string | null): string | null {\n  if (p != null) {\n    return p.replace(/\\/*$/, '') + '/';\n  }\n  return null;\n}\n\nexport const documentDirectory = normalizeEndingSlash(ExponentFileSystem.documentDirectory);\nexport const cacheDirectory = normalizeEndingSlash(ExponentFileSystem.cacheDirectory);\n\nexport const { bundledAssets, bundleDirectory } = ExponentFileSystem;\n\nexport async function getInfoAsync(\n  fileUri: string,\n  options: { md5?: boolean; size?: boolean } = {}\n): Promise<FileInfo> {\n  if (!ExponentFileSystem.getInfoAsync) {\n    throw new UnavailabilityError('expo-file-system', 'getInfoAsync');\n  }\n  return await ExponentFileSystem.getInfoAsync(fileUri, options);\n}\n\nexport async function readAsStringAsync(\n  fileUri: string,\n  options?: ReadingOptions\n): Promise<string> {\n  if (!ExponentFileSystem.readAsStringAsync) {\n    throw new UnavailabilityError('expo-file-system', 'readAsStringAsync');\n  }\n  return await ExponentFileSystem.readAsStringAsync(fileUri, options || {});\n}\n\nexport async function getContentUriAsync(fileUri: string): Promise<string> {\n  if (Platform.OS === 'android') {\n    if (!ExponentFileSystem.getContentUriAsync) {\n      throw new UnavailabilityError('expo-file-system', 'getContentUriAsync');\n    }\n    return await ExponentFileSystem.getContentUriAsync(fileUri);\n  } else {\n    return new Promise(function (resolve, reject) {\n      resolve(fileUri);\n    });\n  }\n}\n\nexport async function writeAsStringAsync(\n  fileUri: string,\n  contents: string,\n  options: WritingOptions = {}\n): Promise<void> {\n  if (!ExponentFileSystem.writeAsStringAsync) {\n    throw new UnavailabilityError('expo-file-system', 'writeAsStringAsync');\n  }\n  return await ExponentFileSystem.writeAsStringAsync(fileUri, contents, options);\n}\n\nexport async function deleteAsync(\n  fileUri: string,\n  options: { idempotent?: boolean } = {}\n): Promise<void> {\n  if (!ExponentFileSystem.deleteAsync) {\n    throw new UnavailabilityError('expo-file-system', 'deleteAsync');\n  }\n  return await ExponentFileSystem.deleteAsync(fileUri, options);\n}\n\nexport async function deleteLegacyDocumentDirectoryAndroid(): Promise<void> {\n  if (Platform.OS !== 'android' || documentDirectory == null) {\n    return;\n  }\n  const legacyDocumentDirectory = `${documentDirectory}ExperienceData/`;\n  return await deleteAsync(legacyDocumentDirectory, { idempotent: true });\n}\n\nexport async function moveAsync(options: { from: string; to: string }): Promise<void> {\n  if (!ExponentFileSystem.moveAsync) {\n    throw new UnavailabilityError('expo-file-system', 'moveAsync');\n  }\n  return await ExponentFileSystem.moveAsync(options);\n}\n\nexport async function copyAsync(options: { from: string; to: string }): Promise<void> {\n  if (!ExponentFileSystem.copyAsync) {\n    throw new UnavailabilityError('expo-file-system', 'copyAsync');\n  }\n  return await ExponentFileSystem.copyAsync(options);\n}\n\nexport async function makeDirectoryAsync(\n  fileUri: string,\n  options: { intermediates?: boolean } = {}\n): Promise<void> {\n  if (!ExponentFileSystem.makeDirectoryAsync) {\n    throw new UnavailabilityError('expo-file-system', 'makeDirectoryAsync');\n  }\n  return await ExponentFileSystem.makeDirectoryAsync(fileUri, options);\n}\n\nexport async function readDirectoryAsync(fileUri: string): Promise<string[]> {\n  if (!ExponentFileSystem.readDirectoryAsync) {\n    throw new UnavailabilityError('expo-file-system', 'readDirectoryAsync');\n  }\n  return await ExponentFileSystem.readDirectoryAsync(fileUri, {});\n}\n\nexport async function getFreeDiskStorageAsync(): Promise<number> {\n  if (!ExponentFileSystem.getFreeDiskStorageAsync) {\n    throw new UnavailabilityError('expo-file-system', 'getFreeDiskStorageAsync');\n  }\n  return await ExponentFileSystem.getFreeDiskStorageAsync();\n}\n\nexport async function getTotalDiskCapacityAsync(): Promise<number> {\n  if (!ExponentFileSystem.getTotalDiskCapacityAsync) {\n    throw new UnavailabilityError('expo-file-system', 'getTotalDiskCapacityAsync');\n  }\n  return await ExponentFileSystem.getTotalDiskCapacityAsync();\n}\n\nexport async function downloadAsync(\n  uri: string,\n  fileUri: string,\n  options: DownloadOptions = {}\n): Promise<FileSystemDownloadResult> {\n  if (!ExponentFileSystem.downloadAsync) {\n    throw new UnavailabilityError('expo-file-system', 'downloadAsync');\n  }\n\n  return await ExponentFileSystem.downloadAsync(uri, fileUri, {\n    sessionType: FileSystemSessionType.BACKGROUND,\n    ...options,\n  });\n}\n\nexport async function uploadAsync(\n  url: string,\n  fileUri: string,\n  options: FileSystemUploadOptions = {}\n): Promise<FileSystemUploadResult> {\n  if (!ExponentFileSystem.uploadAsync) {\n    throw new UnavailabilityError('expo-file-system', 'uploadAsync');\n  }\n\n  return await ExponentFileSystem.uploadAsync(url, fileUri, {\n    sessionType: FileSystemSessionType.BACKGROUND,\n    uploadType: FileSystemUploadType.BINARY_CONTENT,\n    ...options,\n    httpMethod: (options.httpMethod || 'POST').toUpperCase(),\n  });\n}\n\nexport function createDownloadResumable(\n  uri: string,\n  fileUri: string,\n  options?: DownloadOptions,\n  callback?: FileSystemNetworkTaskProgressCallback<DownloadProgressData>,\n  resumeData?: string\n): DownloadResumable {\n  return new DownloadResumable(uri, fileUri, options, callback, resumeData);\n}\n\nexport function createUploadTask(\n  url: string,\n  fileUri: string,\n  options?: FileSystemUploadOptions,\n  callback?: FileSystemNetworkTaskProgressCallback<UploadProgressData>\n): UploadTask {\n  return new UploadTask(url, fileUri, options, callback);\n}\n\nexport abstract class FileSystemCancellableNetworkTask<\n  T extends DownloadProgressData | UploadProgressData\n> {\n  private _uuid = uuidv4();\n  protected taskWasCanceled = false;\n  private emitter = new EventEmitter(ExponentFileSystem);\n  private subscription?: Subscription | null;\n\n  public async cancelAsync(): Promise<void> {\n    if (!ExponentFileSystem.networkTaskCancelAsync) {\n      throw new UnavailabilityError('expo-file-system', 'networkTaskCancelAsync');\n    }\n\n    this.removeSubscription();\n    this.taskWasCanceled = true;\n    return await ExponentFileSystem.networkTaskCancelAsync(this.uuid);\n  }\n\n  protected isTaskCancelled(): boolean {\n    if (this.taskWasCanceled) {\n      console.warn('This task was already canceled.');\n      return true;\n    }\n\n    return false;\n  }\n\n  protected get uuid(): string {\n    return this._uuid;\n  }\n\n  protected abstract getEventName(): string;\n\n  protected abstract getCallback(): FileSystemNetworkTaskProgressCallback<T> | undefined;\n\n  protected addSubscription() {\n    if (this.subscription) {\n      return;\n    }\n\n    this.subscription = this.emitter.addListener(this.getEventName(), (event: ProgressEvent<T>) => {\n      if (event.uuid === this.uuid) {\n        const callback = this.getCallback();\n        if (callback) {\n          callback(event.data);\n        }\n      }\n    });\n  }\n\n  protected removeSubscription() {\n    if (!this.subscription) {\n      return;\n    }\n    this.emitter.removeSubscription(this.subscription);\n    this.subscription = null;\n  }\n}\n\nexport class UploadTask extends FileSystemCancellableNetworkTask<UploadProgressData> {\n  private options: FileSystemUploadOptions;\n\n  constructor(\n    private url: string,\n    private fileUri: string,\n    options?: FileSystemUploadOptions,\n    private callback?: FileSystemNetworkTaskProgressCallback<UploadProgressData>\n  ) {\n    super();\n\n    const httpMethod = (options?.httpMethod?.toUpperCase() ||\n      'POST') as FileSystemAcceptedUploadHttpMethod;\n\n    this.options = {\n      sessionType: FileSystemSessionType.BACKGROUND,\n      uploadType: FileSystemUploadType.BINARY_CONTENT,\n      ...options,\n      httpMethod,\n    };\n  }\n\n  protected getEventName(): string {\n    return 'expo-file-system.uploadProgress';\n  }\n  protected getCallback(): FileSystemNetworkTaskProgressCallback<UploadProgressData> | undefined {\n    return this.callback;\n  }\n\n  public async uploadAsync(): Promise<FileSystemUploadResult | undefined> {\n    if (!ExponentFileSystem.uploadTaskStartAsync) {\n      throw new UnavailabilityError('expo-file-system', 'uploadTaskStartAsync');\n    }\n\n    if (this.isTaskCancelled()) {\n      return;\n    }\n\n    this.addSubscription();\n    const result = await ExponentFileSystem.uploadTaskStartAsync(\n      this.url,\n      this.fileUri,\n      this.uuid,\n      this.options\n    );\n    this.removeSubscription();\n\n    return result;\n  }\n}\n\nexport class DownloadResumable extends FileSystemCancellableNetworkTask<DownloadProgressData> {\n  constructor(\n    private url: string,\n    private _fileUri: string,\n    private options: DownloadOptions = {},\n    private callback?: FileSystemNetworkTaskProgressCallback<DownloadProgressData>,\n    private resumeData?: string\n  ) {\n    super();\n  }\n\n  public get fileUri(): string {\n    return this._fileUri;\n  }\n\n  protected getEventName(): string {\n    return 'expo-file-system.downloadProgress';\n  }\n\n  protected getCallback(): FileSystemNetworkTaskProgressCallback<DownloadProgressData> | undefined {\n    return this.callback;\n  }\n\n  async downloadAsync(): Promise<FileSystemDownloadResult | undefined> {\n    if (!ExponentFileSystem.downloadResumableStartAsync) {\n      throw new UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n    }\n\n    if (this.isTaskCancelled()) {\n      return;\n    }\n\n    this.addSubscription();\n    return await ExponentFileSystem.downloadResumableStartAsync(\n      this.url,\n      this._fileUri,\n      this.uuid,\n      this.options,\n      this.resumeData\n    );\n  }\n\n  async pauseAsync(): Promise<DownloadPauseState> {\n    if (!ExponentFileSystem.downloadResumablePauseAsync) {\n      throw new UnavailabilityError('expo-file-system', 'downloadResumablePauseAsync');\n    }\n\n    if (this.isTaskCancelled()) {\n      return {\n        fileUri: this._fileUri,\n        options: this.options,\n        url: this.url,\n      };\n    }\n\n    const pauseResult = await ExponentFileSystem.downloadResumablePauseAsync(this.uuid);\n    this.removeSubscription();\n    if (pauseResult) {\n      this.resumeData = pauseResult.resumeData;\n      return this.savable();\n    } else {\n      throw new Error('Unable to generate a savable pause state');\n    }\n  }\n\n  async resumeAsync(): Promise<FileSystemDownloadResult | undefined> {\n    if (!ExponentFileSystem.downloadResumableStartAsync) {\n      throw new UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n    }\n\n    if (this.isTaskCancelled()) {\n      return;\n    }\n\n    this.addSubscription();\n    return await ExponentFileSystem.downloadResumableStartAsync(\n      this.url,\n      this.fileUri,\n      this.uuid,\n      this.options,\n      this.resumeData\n    );\n  }\n\n  savable(): DownloadPauseState {\n    return {\n      url: this.url,\n      fileUri: this.fileUri,\n      options: this.options,\n      resumeData: this.resumeData,\n    };\n  }\n}\n\nconst baseReadAsStringAsync = readAsStringAsync;\nconst baseWriteAsStringAsync = writeAsStringAsync;\nconst baseDeleteAsync = deleteAsync;\nconst baseMoveAsync = moveAsync;\nconst baseCopyAsync = copyAsync;\n/**\n * Android only\n */\nexport namespace StorageAccessFramework {\n  export function getUriForDirectoryInRoot(folderName: string) {\n    return `content://com.android.externalstorage.documents/tree/primary:${folderName}/document/primary:${folderName}`;\n  }\n\n  export async function requestDirectoryPermissionsAsync(\n    initialFileUrl: string | null = null\n  ): Promise<FileSystemRequestDirectoryPermissionsResult> {\n    if (!ExponentFileSystem.requestDirectoryPermissionsAsync) {\n      throw new UnavailabilityError(\n        'expo-file-system',\n        'StorageAccessFramework.requestDirectoryPermissionsAsync'\n      );\n    }\n\n    return await ExponentFileSystem.requestDirectoryPermissionsAsync(initialFileUrl);\n  }\n\n  export async function readDirectoryAsync(dirUri: string): Promise<string[]> {\n    if (!ExponentFileSystem.readSAFDirectoryAsync) {\n      throw new UnavailabilityError(\n        'expo-file-system',\n        'StorageAccessFramework.readDirectoryAsync'\n      );\n    }\n    return await ExponentFileSystem.readSAFDirectoryAsync(dirUri, {});\n  }\n\n  export async function makeDirectoryAsync(parentUri: string, dirName: string): Promise<string> {\n    if (!ExponentFileSystem.makeSAFDirectoryAsync) {\n      throw new UnavailabilityError(\n        'expo-file-system',\n        'StorageAccessFramework.makeDirectoryAsync'\n      );\n    }\n    return await ExponentFileSystem.makeSAFDirectoryAsync(parentUri, dirName);\n  }\n\n  export async function createFileAsync(\n    parentUri: string,\n    fileName: string,\n    mimeType: string\n  ): Promise<string> {\n    if (!ExponentFileSystem.createSAFFileAsync) {\n      throw new UnavailabilityError('expo-file-system', 'StorageAccessFramework.createFileAsync');\n    }\n    return await ExponentFileSystem.createSAFFileAsync(parentUri, fileName, mimeType);\n  }\n\n  export const writeAsStringAsync = baseWriteAsStringAsync;\n  export const readAsStringAsync = baseReadAsStringAsync;\n  export const deleteAsync = baseDeleteAsync;\n  export const moveAsync = baseMoveAsync;\n  export const copyAsync = baseCopyAsync;\n}\n"]},"metadata":{},"sourceType":"module"}