{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport Animated from \"react-native-reanimated\";\nimport { useRef } from \"react\";\nimport { onGestureEvent, panGestureHandler, pinchGestureHandler, rotationGestureHandler, tapGestureHandler, scrollHandler } from \"./Gesture\";\nimport { vec } from \"./Vectors\";\nimport { loop } from \"./AnimationRunners\";\nvar Clock = Animated.Clock,\n  Value = Animated.Value,\n  diff = Animated.diff,\n  set = Animated.set,\n  useCode = Animated.useCode,\n  debug = Animated.debug,\n  block = Animated.block;\nexport var useConst = function useConst(initialValue) {\n  var ref = useRef();\n  if (ref.current === undefined) {\n    ref.current = {\n      value: typeof initialValue === \"function\" ? initialValue() : initialValue\n    };\n  }\n  return ref.current.value;\n};\nexport var useGestureHandler = function useGestureHandler(nativeEvent) {\n  return useConst(function () {\n    return onGestureEvent(nativeEvent);\n  });\n};\nexport var usePanGestureHandler = function usePanGestureHandler() {\n  return useConst(function () {\n    return panGestureHandler();\n  });\n};\nexport var useRotationGestureHandler = function useRotationGestureHandler() {\n  return useConst(function () {\n    return rotationGestureHandler();\n  });\n};\nexport var usePinchGestureHandler = function usePinchGestureHandler() {\n  return useConst(function () {\n    return pinchGestureHandler();\n  });\n};\nexport var useTapGestureHandler = function useTapGestureHandler() {\n  return useConst(function () {\n    return tapGestureHandler();\n  });\n};\nexport var useScrollHandler = function useScrollHandler() {\n  return useConst(function () {\n    return scrollHandler();\n  });\n};\nexport var useVector = function useVector() {\n  for (var _len = arguments.length, defaultValues = new Array(_len), _key = 0; _key < _len; _key++) {\n    defaultValues[_key] = arguments[_key];\n  }\n  return useConst(function () {\n    return vec.createValue.apply(vec, defaultValues);\n  });\n};\nexport var useVectors = function useVectors() {\n  for (var _len2 = arguments.length, defaultValues = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    defaultValues[_key2] = arguments[_key2];\n  }\n  return useConst(function () {\n    return defaultValues.map(function (values) {\n      return vec.createValue.apply(vec, _toConsumableArray(values));\n    });\n  });\n};\nexport var useClock = function useClock() {\n  return useConst(function () {\n    return new Clock();\n  });\n};\nexport var useValue = function useValue(value) {\n  return useConst(function () {\n    return new Value(value);\n  });\n};\nexport var useLoop = function useLoop() {\n  var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;\n  var boomerang = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var progress = useValue(0);\n  useCode(function () {\n    return set(progress, loop({\n      duration: duration,\n      boomerang: boomerang\n    }));\n  }, [progress]);\n  return progress;\n};\nexport var useValues = function useValues() {\n  for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    values[_key3] = arguments[_key3];\n  }\n  return useConst(function () {\n    return values.map(function (v) {\n      return new Value(v);\n    });\n  });\n};\nexport var useClocks = function useClocks(numberOfClocks) {\n  return useConst(function () {\n    return new Array(numberOfClocks).fill(0).map(function () {\n      return new Clock();\n    });\n  });\n};\nexport var useDiff = function useDiff(node) {\n  var dDiff = useValue(0);\n  useCode(function () {\n    return set(dDiff, diff(node));\n  }, [dDiff, node]);\n  return dDiff;\n};\nexport var useDebug = function useDebug(values) {\n  var keys = Object.keys(values);\n  useCode(function () {\n    return block(keys.map(function (name) {\n      return debug(name, values[name]);\n    }));\n  }, [keys, values]);\n};","map":{"version":3,"mappings":"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","names":["Animated","useRef","onGestureEvent","panGestureHandler","pinchGestureHandler","rotationGestureHandler","tapGestureHandler","scrollHandler","vec","loop","Clock","Value","diff","set","useCode","debug","block","useConst","initialValue","ref","current","undefined","value","useGestureHandler","nativeEvent","usePanGestureHandler","useRotationGestureHandler","usePinchGestureHandler","useTapGestureHandler","useScrollHandler","useVector","defaultValues","createValue","useVectors","map","values","useClock","useValue","useLoop","duration","boomerang","progress","useValues","v","useClocks","numberOfClocks","Array","fill","useDiff","node","dDiff","useDebug","keys","Object","name"],"sources":["Hooks.ts"],"sourcesContent":["import Animated from \"react-native-reanimated\";\nimport { useRef } from \"react\";\n\nimport {\n  onGestureEvent,\n  panGestureHandler,\n  pinchGestureHandler,\n  rotationGestureHandler,\n  tapGestureHandler,\n  scrollHandler,\n} from \"./Gesture\";\nimport { Vector, vec } from \"./Vectors\";\nimport { loop } from \"./AnimationRunners\";\n\nconst { Clock, Value, diff, set, useCode, debug, block } = Animated;\n\nexport const useConst = <T>(initialValue: T | (() => T)): T => {\n  const ref = useRef<{ value: T }>();\n  if (ref.current === undefined) {\n    // Box the value in an object so we can tell if it's initialized even if the initializer\n    // returns/is undefined\n    ref.current = {\n      value:\n        typeof initialValue === \"function\"\n          ? (initialValue as Function)()\n          : initialValue,\n    };\n  }\n  return ref.current.value;\n};\n\nexport const useGestureHandler = (\n  nativeEvent: Parameters<typeof onGestureEvent>[0]\n) => useConst(() => onGestureEvent(nativeEvent));\n\nexport const usePanGestureHandler = () => useConst(() => panGestureHandler());\nexport const useRotationGestureHandler = () =>\n  useConst(() => rotationGestureHandler());\nexport const usePinchGestureHandler = () =>\n  useConst(() => pinchGestureHandler());\nexport const useTapGestureHandler = () => useConst(() => tapGestureHandler());\nexport const useScrollHandler = () => useConst(() => scrollHandler());\n\ntype Atomic = string | number | boolean;\n\nexport const useVector = (\n  ...defaultValues: Parameters<typeof vec.createValue>\n) => useConst(() => vec.createValue(...defaultValues));\n\ntype P = Parameters<typeof vec.createValue>;\ntype R = Vector<Animated.Value<number>>;\ntype UseVectors = {\n  (...v: [P]): [R];\n  (...v: [P, P]): [R, R];\n  (...v: [P, P, P]): [R, R, R];\n  (...v: [P, P, P, P]): [R, R, R, R];\n  (...v: [P, P, P, P, P]): [R, R, R, R, R];\n  (...v: [P, P, P, P, P, P]): [R, R, R, R, R, R];\n  (...v: P[]): R[];\n};\n\nexport const useVectors = (((\n  ...defaultValues: Parameters<typeof vec.createValue>[]\n) =>\n  useConst(() =>\n    defaultValues.map((values) => vec.createValue(...values))\n  )) as unknown) as UseVectors;\n\nexport const useClock = () => useConst(() => new Clock());\n\nexport const useValue = <V extends Atomic>(value: V) =>\n  useConst(() => new Value(value));\n\nexport const useLoop = (duration = 1000, boomerang = true) => {\n  const progress = useValue(0);\n  useCode(() => set(progress, loop({ duration, boomerang })), [progress]);\n  return progress;\n};\n\ntype UseValues = {\n  <V extends Atomic>(v: V): [Animated.Value<V>];\n  <V1 extends Atomic, V2 extends Atomic>(v1: V1, v2: V2): [\n    Animated.Value<V1>,\n    Animated.Value<V2>\n  ];\n  <V1 extends Atomic, V2 extends Atomic, V3 extends Atomic>(\n    v1: V1,\n    v2: V2,\n    v3: V3\n  ): [Animated.Value<V1>, Animated.Value<V2>, Animated.Value<V3>];\n  <V1 extends Atomic, V2 extends Atomic, V3 extends Atomic, V4 extends Atomic>(\n    v1: V1,\n    v2: V2,\n    v3: V3,\n    v4: V4\n  ): [\n    Animated.Value<V1>,\n    Animated.Value<V2>,\n    Animated.Value<V3>,\n    Animated.Value<V4>\n  ];\n  <\n    V1 extends Atomic,\n    V2 extends Atomic,\n    V3 extends Atomic,\n    V4 extends Atomic,\n    V5 extends Atomic\n  >(\n    v1: V1,\n    v2: V2,\n    v3: V3,\n    v4: V4,\n    v5: V5\n  ): [\n    Animated.Value<V1>,\n    Animated.Value<V2>,\n    Animated.Value<V3>,\n    Animated.Value<V4>,\n    Animated.Value<V5>\n  ];\n  <V extends Atomic>(...values: V[]): Animated.Value<V>[];\n};\n\nexport const useValues = ((<V extends Atomic>(...values: [V, ...V[]]) =>\n  useConst(() => values.map((v) => new Value(v)))) as unknown) as UseValues;\n\nexport const useClocks = (numberOfClocks: number): Animated.Clock[] =>\n  useConst(() => new Array(numberOfClocks).fill(0).map(() => new Clock()));\n\nexport const useDiff = (node: Animated.Node<number>) => {\n  const dDiff = useValue(0);\n  useCode(() => set(dDiff, diff(node)), [dDiff, node]);\n  return dDiff;\n};\n\nexport const useDebug = (values: { [key: string]: Animated.Node<number> }) => {\n  const keys = Object.keys(values);\n  useCode(() => block(keys.map((name) => debug(name, values[name]))), [\n    keys,\n    values,\n  ]);\n};\n"]},"metadata":{},"sourceType":"module"}