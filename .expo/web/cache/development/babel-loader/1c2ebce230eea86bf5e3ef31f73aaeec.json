{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport Animated, { block, defined } from \"react-native-reanimated\";\nimport { clamp, max, min } from \"./Math\";\nimport { decompose2d } from \"./Matrix3\";\nvar Value = Animated.Value,\n  set = Animated.set,\n  add = Animated.add,\n  multiply = Animated.multiply,\n  cond = Animated.cond,\n  eq = Animated.eq,\n  abs = Animated.abs,\n  sub = Animated.sub,\n  not = Animated.not,\n  lessThan = Animated.lessThan,\n  greaterThan = Animated.greaterThan,\n  divide = Animated.divide,\n  modulo = Animated.modulo,\n  proc = Animated.proc;\nexport var mix = proc(function (value, x, y) {\n  return add(x, multiply(value, sub(y, x)));\n});\nexport var step = proc(function (value, edge) {\n  return lessThan(value, edge);\n});\nexport var smoothstep = proc(function (value, edge0, edge1) {\n  var t = clamp(divide(sub(value, edge0), sub(edge1, edge0)), 0, 1);\n  return multiply(t, t, sub(3, multiply(2, t)));\n});\nexport var tween2d = function tween2d(value, t1, t2) {\n  var d1 = decompose2d(t1);\n  var d2 = decompose2d(t2);\n  var translateX = mix(value, d1[0].translateX, d2[0].translateX);\n  var translateY = mix(value, d1[1].translateY, d2[1].translateY);\n  var skewX = mix(value, d1[2].rotateZ, d2[2].rotateZ);\n  var scaleX = mix(value, d1[3].scaleX, d2[3].scaleX);\n  var scaleY = mix(value, d1[4].scaleY, d2[4].scaleY);\n  var rotateZ = mix(value, d1[5].rotateZ, d2[5].rotateZ);\n  return [{\n    translateX: translateX\n  }, {\n    translateY: translateY\n  }, {\n    rotateZ: skewX\n  }, {\n    scaleX: scaleX\n  }, {\n    scaleY: scaleY\n  }, {\n    rotateZ: rotateZ\n  }];\n};\nexport var diff = function diff(v) {\n  var stash = new Value(0);\n  var prev = new Value();\n  return block([set(stash, cond(defined(prev), sub(v, prev), 0)), set(prev, v), stash]);\n};\nexport var diffClamp = function diffClamp(a, minVal, maxVal) {\n  var value = new Value();\n  return set(value, min(max(add(cond(defined(value), value, a), diff(a)), minVal), maxVal));\n};\nexport var moving = function moving(position) {\n  var minPositionDelta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1e-3;\n  var emptyFrameThreshold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5;\n  var delta = diff(position);\n  var noMovementFrames = new Value(0);\n  return cond(lessThan(abs(delta), minPositionDelta), [set(noMovementFrames, add(noMovementFrames, 1)), not(greaterThan(noMovementFrames, emptyFrameThreshold))], [set(noMovementFrames, 0), 1]);\n};\nexport var snapPoint = function snapPoint(value, velocity, points) {\n  var point = add(value, multiply(0.2, velocity));\n  var diffPoint = function diffPoint(p) {\n    return abs(sub(point, p));\n  };\n  var deltas = points.map(function (p) {\n    return diffPoint(p);\n  });\n  var minDelta = min.apply(void 0, _toConsumableArray(deltas));\n  return points.reduce(function (acc, p) {\n    return cond(eq(diffPoint(p), minDelta), p, acc);\n  }, new Value());\n};\nexport var addTo = proc(function (value, node) {\n  return set(value, add(value, node));\n});\nexport var subTo = proc(function (value, node) {\n  return set(value, sub(value, node));\n});\nexport var multiplyTo = proc(function (value, node) {\n  return set(value, multiply(value, node));\n});\nexport var divideTo = proc(function (value, node) {\n  return set(value, divide(value, node));\n});\nexport var moduloTo = proc(function (value, node) {\n  return set(value, modulo(value, node));\n});","map":{"version":3,"mappings":"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","names":["Animated","block","defined","clamp","max","min","decompose2d","Value","set","add","multiply","cond","eq","abs","sub","not","lessThan","greaterThan","divide","modulo","proc","mix","value","x","y","step","edge","smoothstep","edge0","edge1","t","tween2d","t1","t2","d1","d2","translateX","translateY","skewX","rotateZ","scaleX","scaleY","diff","v","stash","prev","diffClamp","a","minVal","maxVal","moving","position","minPositionDelta","emptyFrameThreshold","delta","noMovementFrames","snapPoint","velocity","points","point","diffPoint","p","deltas","map","minDelta","reduce","acc","addTo","node","subTo","multiplyTo","divideTo","moduloTo"],"sources":["Animations.ts"],"sourcesContent":["import Animated, { block, defined } from \"react-native-reanimated\";\n\nimport { clamp, max, min } from \"./Math\";\nimport { Matrix3, Transforms2d, decompose2d } from \"./Matrix3\";\n\nconst {\n  Value,\n  set,\n  add,\n  multiply,\n  cond,\n  eq,\n  abs,\n  sub,\n  not,\n  lessThan,\n  greaterThan,\n  divide,\n  modulo,\n  proc,\n} = Animated;\n\nexport type SpringConfig = Partial<Omit<Animated.SpringConfig, \"toValue\">>;\nexport type TimingConfig = Partial<Omit<Animated.TimingConfig, \"toValue\">>;\n\nexport const mix = proc(\n  (\n    value: Animated.Adaptable<number>,\n    x: Animated.Adaptable<number>,\n    y: Animated.Adaptable<number>\n  ) => add(x, multiply(value, sub(y, x)))\n);\n\nexport const step = proc(\n  (value: Animated.Adaptable<number>, edge: Animated.Adaptable<number>) =>\n    lessThan(value, edge)\n);\n\nexport const smoothstep = proc(\n  (\n    value: Animated.Adaptable<number>,\n    edge0: Animated.Adaptable<number>,\n    edge1: Animated.Adaptable<number>\n  ) => {\n    const t = clamp(divide(sub(value, edge0), sub(edge1, edge0)), 0, 1);\n    return multiply(t, t, sub(3, multiply(2, t)));\n  }\n);\n\nexport const tween2d = (\n  value: Animated.Node<number>,\n  t1: Matrix3 | Transforms2d,\n  t2: Matrix3 | Transforms2d\n) => {\n  const d1 = decompose2d(t1);\n  const d2 = decompose2d(t2);\n  const translateX = mix(value, d1[0].translateX, d2[0].translateX);\n  const translateY = mix(value, d1[1].translateY, d2[1].translateY);\n  const skewX = mix(value, d1[2].rotateZ, d2[2].rotateZ);\n  const scaleX = mix(value, d1[3].scaleX, d2[3].scaleX);\n  const scaleY = mix(value, d1[4].scaleY, d2[4].scaleY);\n  const rotateZ = mix(value, d1[5].rotateZ, d2[5].rotateZ);\n  return [\n    { translateX },\n    { translateY },\n    { rotateZ: skewX },\n    { scaleX },\n    { scaleY },\n    { rotateZ },\n  ] as const;\n};\n\n// currently diffClamp() from reanimated seems currently buggy because of proc()\nexport const diff = (v: Animated.Node<number>) => {\n  const stash = new Value(0);\n  const prev = new Value<number>();\n  return block([\n    set(stash, cond(defined(prev), sub(v, prev), 0)),\n    set(prev, v),\n    stash,\n  ]);\n};\n\nexport const diffClamp = (\n  a: Animated.Node<number>,\n  minVal: Animated.Adaptable<number>,\n  maxVal: Animated.Adaptable<number>\n) => {\n  const value = new Value<number>();\n  return set(\n    value,\n    min(max(add(cond(defined(value), value, a), diff(a)), minVal), maxVal)\n  );\n};\n\nexport const moving = (\n  position: Animated.Node<number>,\n  minPositionDelta = 1e-3,\n  emptyFrameThreshold = 5\n) => {\n  const delta = diff(position);\n  const noMovementFrames = new Value(0);\n  return cond(\n    lessThan(abs(delta), minPositionDelta),\n    [\n      set(noMovementFrames, add(noMovementFrames, 1)),\n      not(greaterThan(noMovementFrames, emptyFrameThreshold)),\n    ],\n    [set(noMovementFrames, 0), 1]\n  );\n};\n\nexport const snapPoint = (\n  value: Animated.Adaptable<number>,\n  velocity: Animated.Adaptable<number>,\n  points: Animated.Adaptable<number>[]\n) => {\n  const point = add(value, multiply(0.2, velocity));\n  const diffPoint = (p: Animated.Adaptable<number>) => abs(sub(point, p));\n  const deltas = points.map((p) => diffPoint(p));\n  const minDelta = min(...deltas);\n  return points.reduce(\n    (acc, p) => cond(eq(diffPoint(p), minDelta), p, acc),\n    new Value()\n  ) as Animated.Node<number>;\n};\n\nexport const addTo = proc(\n  (value: Animated.Value<number>, node: Animated.Adaptable<number>) =>\n    set(value, add(value, node))\n);\n\nexport const subTo = proc(\n  (value: Animated.Value<number>, node: Animated.Adaptable<number>) =>\n    set(value, sub(value, node))\n);\n\nexport const multiplyTo = proc(\n  (value: Animated.Value<number>, node: Animated.Adaptable<number>) =>\n    set(value, multiply(value, node))\n);\n\nexport const divideTo = proc(\n  (value: Animated.Value<number>, node: Animated.Adaptable<number>) =>\n    set(value, divide(value, node))\n);\n\nexport const moduloTo = proc(\n  (value: Animated.Value<number>, node: Animated.Adaptable<number>) =>\n    set(value, modulo(value, node))\n);\n"]},"metadata":{},"sourceType":"module"}