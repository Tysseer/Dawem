{"ast":null,"code":"import Animated from \"react-native-reanimated\";\nimport { atan2 } from \"./Math\";\nvar sub = Animated.sub,\n  multiply = Animated.multiply,\n  add = Animated.add,\n  cos = Animated.cos,\n  sin = Animated.sin,\n  pow = Animated.pow,\n  sqrt = Animated.sqrt;\nexport var canvas2Cartesian = function canvas2Cartesian(_ref, center) {\n  var x = _ref.x,\n    y = _ref.y;\n  return {\n    x: sub(x, center.x),\n    y: multiply(sub(y, center.y), -1)\n  };\n};\nexport var cartesian2Canvas = function cartesian2Canvas(_ref2, center) {\n  var x = _ref2.x,\n    y = _ref2.y;\n  return {\n    x: add(x, center.x),\n    y: add(multiply(y, -1), center.y)\n  };\n};\nexport var cartesian2Polar = function cartesian2Polar(_ref3) {\n  var x = _ref3.x,\n    y = _ref3.y;\n  return {\n    theta: atan2(y, x),\n    radius: sqrt(add(pow(x, 2), pow(y, 2)))\n  };\n};\nexport var polar2Cartesian = function polar2Cartesian(_ref4) {\n  var theta = _ref4.theta,\n    radius = _ref4.radius;\n  return {\n    x: multiply(radius, cos(theta)),\n    y: multiply(radius, sin(theta))\n  };\n};\nexport var polar2Canvas = function polar2Canvas(_ref5, center) {\n  var theta = _ref5.theta,\n    radius = _ref5.radius;\n  return cartesian2Canvas(polar2Cartesian({\n    theta: theta,\n    radius: radius\n  }), center);\n};\nexport var canvas2Polar = function canvas2Polar(_ref6, center) {\n  var x = _ref6.x,\n    y = _ref6.y;\n  return cartesian2Polar(canvas2Cartesian({\n    x: x,\n    y: y\n  }, center));\n};","map":{"version":3,"mappings":"AAAA,OAAOA,QAAP,MAAqB,yBAArB;AAEA,SAASC,KAAT;IAGQC,G,GAA4CF,Q,CAA5CE,G;EAAKC,Q,GAAuCH,Q,CAAvCG,Q;EAAUC,G,GAA6BJ,Q,CAA7BI,G;EAAKC,G,GAAwBL,Q,CAAxBK,G;EAAKC,G,GAAmBN,Q,CAAnBM,G;EAAKC,G,GAAcP,Q,CAAdO,G;EAAKC,I,GAASR,Q,CAATQ,I;AAO3C,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,OAAmBC,MAAnB,EAAsC;EAAA,IAAnCC,CAAmC,QAAnCA,CAAmC;IAAhCC,CAAgC,QAAhCA,CAAgC;EACpE,OAAO;IACLD,CAAC,EAAET,GAAG,CAACS,CAAD,EAAID,MAAM,CAACC,CAAX,CADD;IAELC,CAAC,EAAET,QAAQ,CAACD,GAAG,CAACU,CAAD,EAAIF,MAAM,CAACE,CAAX,CAAJ,EAAmB,CAAC,CAApB;EAFN,CAAP;AAID,CALM;AAOP,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,QAAmBH,MAAnB;EAAA,IAAGC,CAAH,SAAGA,CAAH;IAAMC,CAAN,SAAMA,CAAN;EAAA,OAAuC;IACrED,CAAC,EAAEP,GAAG,CAACO,CAAD,EAAID,MAAM,CAACC,CAAX,CAD+D;IAErEC,CAAC,EAAER,GAAG,CAACD,QAAQ,CAACS,CAAD,EAAI,CAAC,CAAL,CAAT,EAAkBF,MAAM,CAACE,CAAzB;EAF+D,CAAvC;AAAA,CAAzB;AAKP,OAAO,IAAME,eAAe,GAAG,SAAlBA,eAAkB,QAAsB;EAAA,IAAnBH,CAAmB,SAAnBA,CAAmB;IAAhBC,CAAgB,SAAhBA,CAAgB;EACnD,OAAO;IACLG,KAAK,EAAEd,KAAK,CAACW,CAAD,EAAID,CAAJ,CADP;IAELK,MAAM,EAAER,IAAI,CAACJ,GAAG,CAACG,GAAG,CAACI,CAAD,EAAI,CAAJ,CAAJ,EAAYJ,GAAG,CAACK,CAAD,EAAI,CAAJ,CAAf,CAAJ;EAFP,CAAP;AAID,CALM;AAOP,OAAO,IAAMK,eAAe,GAAG,SAAlBA,eAAkB;EAAA,IAAGF,KAAH,SAAGA,KAAH;IAAUC,MAAV,SAAUA,MAAV;EAAA,OAAoC;IACjEL,CAAC,EAAER,QAAQ,CAACa,MAAD,EAASX,GAAG,CAACU,KAAD,CAAZ,CADsD;IAEjEH,CAAC,EAAET,QAAQ,CAACa,MAAD,EAASV,GAAG,CAACS,KAAD,CAAZ;EAFsD,CAApC;AAAA,CAAxB;AAKP,OAAO,IAAMG,YAAY,GAAG,SAAfA,YAAe,QAAgCR,MAAhC;EAAA,IAAGK,KAAH,SAAGA,KAAH;IAAUC,MAAV,SAAUA,MAAV;EAAA,OAC1BH,gBAAgB,CAACI,eAAe,CAAC;IAAEF,KAAK,EAALA,KAAF;IAASC,MAAM,EAANA;EAAT,CAAD,CAAhB,EAAqCN,MAArC,CADU;AAAA,CAArB;AAGP,OAAO,IAAMS,YAAY,GAAG,SAAfA,YAAe,QAAmBT,MAAnB;EAAA,IAAGC,CAAH,SAAGA,CAAH;IAAMC,CAAN,SAAMA,CAAN;EAAA,OAC1BE,eAAe,CAACL,gBAAgB,CAAC;IAAEE,CAAC,EAADA,CAAF;IAAKC,CAAC,EAADA;EAAL,CAAD,EAAWF,MAAX,CAAjB,CADW;AAAA,CAArB","names":["Animated","atan2","sub","multiply","add","cos","sin","pow","sqrt","canvas2Cartesian","center","x","y","cartesian2Canvas","cartesian2Polar","theta","radius","polar2Cartesian","polar2Canvas","canvas2Polar"],"sources":["Coordinates.ts"],"sourcesContent":["import Animated from \"react-native-reanimated\";\n\nimport { atan2 } from \"./Math\";\nimport { Vector } from \"./Vectors\";\n\nconst { sub, multiply, add, cos, sin, pow, sqrt } = Animated;\n\nexport interface PolarPoint {\n  theta: Animated.Adaptable<number>;\n  radius: Animated.Adaptable<number>;\n}\n\nexport const canvas2Cartesian = ({ x, y }: Vector, center: Vector) => {\n  return {\n    x: sub(x, center.x),\n    y: multiply(sub(y, center.y), -1),\n  };\n};\n\nexport const cartesian2Canvas = ({ x, y }: Vector, center: Vector) => ({\n  x: add(x, center.x),\n  y: add(multiply(y, -1), center.y),\n});\n\nexport const cartesian2Polar = ({ x, y }: Vector) => {\n  return {\n    theta: atan2(y, x),\n    radius: sqrt(add(pow(x, 2), pow(y, 2))),\n  };\n};\n\nexport const polar2Cartesian = ({ theta, radius }: PolarPoint) => ({\n  x: multiply(radius, cos(theta)),\n  y: multiply(radius, sin(theta)),\n});\n\nexport const polar2Canvas = ({ theta, radius }: PolarPoint, center: Vector) =>\n  cartesian2Canvas(polar2Cartesian({ theta, radius }), center);\n\nexport const canvas2Polar = ({ x, y }: Vector, center: Vector) =>\n  cartesian2Polar(canvas2Cartesian({ x, y }, center));\n"]},"metadata":{},"sourceType":"module"}